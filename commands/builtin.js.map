{"version":3,"sources":["commands/builtin.js"],"names":[],"mappings":"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","file":"commands/builtin.js","sourcesContent":["import Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\n\nfunction formatDate(seconds) {\n  let msecs = Math.floor(seconds * Tools.SECOND);\n  let days = Math.floor(msecs / Tools.DAY);\n  let hours = Math.floor((msecs % Tools.DAY) / Tools.HOUR);\n  let minutes = Math.floor((msecs % Tools.HOUR) / Tools.MINUTE);\n  seconds = Math.floor((msecs % Tools.MINUTE) / Tools.SECOND);\n  return `${days} days ${Tools.pad(hours, 2, '0')}:${Tools.pad(minutes, 2, '0')}:${Tools.pad(seconds, 2, '0')}`;\n}\n\nexport default [{\n  command: 'quit',\n  handler: function() {\n    process.exit(0);\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Quits the application.'),\n    alias: ['exit', 'q']\n  }\n}, {\n  command: 'respawn [exitCode]',\n  handler: async function({ exitCode } = {}) {\n    await IPC.send('exit', Tools.option(exitCode, 'number', 0), true);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Respawns worker processes with the passed exit code.') }\n}, {\n  command: 'add-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let { input } = await this.prompt(Tools.translate('Enter superuser IP list (separate by spaces): '));\n    let ips = Tools.ipList(input);\n    if (typeof ips === 'string') {\n      throw new Error(ips);\n    }\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.addSuperuser(hashpass, ips);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Registers a superuser.') }\n}, {\n  command: 'remove-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.removeSuperuser(hashpass);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Unregisters a superuser.') }\n}, {\n  command: 'rerender-posts [targets...]',\n  handler: async function({ targets } = {}) {\n    let result = await this.prompt({\n      type: 'confirm',\n      name: 'rerender',\n      default: true,\n      message: Tools.translate('Are you sure? ')\n    });\n    if (!result.rerender) {\n      return;\n    }\n    await PostsModel.rerenderPosts(Tools.rerenderPostsTargetsFromString((targets || []).join(' ')));\n    //TODO: Rerender corresponding pages?\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Rerenders posts specified as $[1].\\n'\n      + 'If $[1] is omitted, rerenders all posts on all boards.\\n'\n      + 'Each target is a string in the following form:\\n'\n      + '$[2]', '', '[targets...]', '<board name>[:<post number>[:...]]')\n  }\n}, {\n  command: 'stop',\n  handler: async function() {\n    await IPC.send('stop');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Closes all workers, preventing incoming connections.') }\n}, {\n  command: 'start',\n  handler: async function() {\n    await IPC.send('start');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Opens workers for connections if closed.') }\n}, {\n  command: 'rerender [what...]',\n  handler: async function({ options, what } = {}) {\n    let { list, archive } = options || {};\n    if (list) {\n      let paths = await Renderer.getRouterPaths(true);\n      return paths.map((path) => {\n        return (typeof path === 'object') ? `${path.path} ${path.description}` : path;\n      }).join('\\n');\n    } else {\n      if (what) {\n        await Renderer.rerender(what);\n      } else if (archive) {\n        await Renderer.rerender();\n      } else {\n        await Renderer.rerender(['**', '!/*/arch/*']);\n      }\n      return 'OK';\n    }\n  },\n  options: {\n    description: Tools.translate(\"Rerenders the cache (workers are closed and then opened again).\"),\n    options: [{\n      value: '-a, --archive',\n      description: Tools.translate('Rerender archived threads (if no pattern is specified).')\n    }, {\n      value: '-l, --list',\n      description: Tools.translate('Only list available router paths. No rerender.')\n    }]\n  }\n}, {\n  command: 'reload-boards',\n  handler: async function() {\n    Board.initialize();\n    await IPC.send('reloadBoards');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the boards.') }\n}, {\n  command: 'reload-templates',\n  handler: async function(args) {\n    await Renderer.compileTemplates();\n    await Renderer.reloadTemplates();\n    await IPC.send('reloadTemplates');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the templates and the partials (including public ones).') }\n}, {\n  command: 'rebuild-search-index [targets...]',\n  handler: async function({ targets } = {}) {\n    let result = await this.prompt({\n      type: 'confirm',\n      name: 'rebuild',\n      default: true,\n      message: Tools.translate('Are you sure? ')\n    });\n    if (!result.rebuild) {\n      return;\n    }\n    await PostsModel.rebuildSearchIndex(Tools.rerenderPostsTargetsFromString((targets || []).join(' ')));\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Rebuilds post search index of posts specified as $[1].\\n'\n      + 'If $[1] is omitted, rerenders all posts on all boards.\\n'\n      + 'Each target is a string in the following form:\\n'\n      + '$[2]', '', '[targets...]', '<board name>[:<post number>[:...]]')\n  }\n}, {\n  command: 'uptime',\n  handler: function() {\n    return formatDate(process.uptime());\n  },\n  options: { description: Tools.translate('Shows server uptime.') }\n}];\n"],"sourceRoot":"/source/"}