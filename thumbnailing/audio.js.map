{"version":3,"sources":["thumbnailing/audio.js"],"names":[],"mappings":"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","file":"thumbnailing/audio.js","sourcesContent":["import _ from 'underscore';\nimport ffmpeg from 'fluent-ffmpeg';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\nimport promisify from 'promisify-node';\n\nimport * as Files from '../helpers/files';\nimport * as Tools from '../helpers/tools';\n\nconst ImageMagick = promisify('imagemagick');\nconst musicMetadata = promisify('musicmetadata');\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('application/ogg', 'ogg', 'png');\ndefineMimeTypeSuffixes('audio/mpeg', ['mpeg', 'mp1', 'm1a', 'mp3', 'm2a', 'mpa', 'mpg'], 'png');\ndefineMimeTypeSuffixes('audio/ogg', 'ogg', 'png');\ndefineMimeTypeSuffixes('audio/wav', 'wav', 'png');\n\nexport const AUDIO_TAGS = ['album', 'artist', 'title', 'year'];\n\nexport function match(mimeType) {\n  return Files.isAudioType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  let metadata = await new Promise((resolve, reject) => {\n    ffmpeg.ffprobe(path, (err, metadata) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(metadata);\n    });\n  });\n  let duration = metadata.format.duration;\n  let bitrate = +metadata.format.bit_rate;\n  let extraData = {\n    duration: (+duration ? durationToString(duration) : duration),\n    bitrate: (bitrate ? Math.floor(bitrate / 1024) : 0)\n  };\n  try {\n    metadata = await musicMetadata(FSSync.createReadStream(path));\n  } catch (err) {\n    Logger.error(err.stack || err);\n    metadata = {};\n  }\n  extraData.album = metadata.album || '';\n  extraData.artist = (metadata.artist && metadata.artist.length > 0) ? metadata.artist[0] : '';\n  extraData.title = metadata.title || '';\n  extraData.year = metadata.year || '';\n  if (metadata.picture && metadata.picture.length > 0) {\n    await FS.write(thumbPath, metadata.picture[0].data);\n  } else {\n    await Files.generateRandomImage(file.hash, file.mimeType, thumbPath);\n  }\n  let thumbInfo = await ImageMagick.identify(thumbPath);\n  if (thumbInfo.width > 200 && thumbInfo.height > 200) {\n    await ImageMagick.convert([\n      thumbPath,\n      '-resize',\n      '200x200',\n      thumbPath\n    ]);\n    await ImageMagick.identify(thumbPath);\n  }\n  return {\n    extraData: extraData,\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n}\n\nexport async function rerenderPostFileInfo(fileInfo) {\n  let { duration, bitrate, album, artist, title, year } = fileInfo.extraData || {};\n  if (duration) {\n    fileInfo.sizeText += `, ${duration}`;\n  }\n  if (bitrate) {\n    fileInfo.sizeText += `, ${bitrate} ${Tools.translate('kbps')}`;\n  }\n  fileInfo.sizeTooltip = artist ? artist : Tools.translate('Unknown artist');\n  fileInfo.sizeTooltip += ' - ';\n  fileInfo.sizeTooltip += title ? title : Tools.translate('Unknown title');\n  fileInfo.sizeTooltip += ' [';\n  fileInfo.sizeTooltip += album ? album : Tools.translate('Unknown album');\n  fileInfo.sizeTooltip += ']';\n  if (year) {\n    fileInfo.sizeTooltip += ` (${year})`;\n  }\n}\n"],"sourceRoot":"/source/"}