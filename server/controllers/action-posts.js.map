{"version":3,"sources":["controllers/action-posts.js"],"names":[],"mappings":"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","file":"controllers/action-posts.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport PostCreationTransaction from '../helpers/post-creation-transaction';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport * as FilesModel from '../models/files';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nasync function testParameters(req, boardName, mode, { fields, files, postNumber } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!fields) {\n    fields = {};\n  }\n  if (!_(files).isArray()) {\n    files = [];\n  }\n  let fileCount = 0;\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let post;\n  if (postNumber) {\n    post = await PostsModel.getPost(boardName, postNumber);\n    if (typeof fields.text === 'undefined') {\n      fields.text = post.rawText;\n    }\n    fileCount = await FilesModel.getPostFileCount(boardName, postNumber, { archived: post.archived });\n  }\n  await board.testParameters({\n    req: req,\n    mode: mode,\n    fields: fields,\n    files: files,\n    existingFileCount: fileCount\n  });\n  return post;\n}\n\nrouter.post('/action/markupText', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, text, markupMode, signAsOp, tripcode } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let rawText = text || '';\n    await testParameters(req, boardName, 'markupText', { fields: fields });\n    markupMode = markupMode || '';\n    let markupModes = markup.markupModes(markupMode);\n    text = await markup(boardName, text, {\n      markupModes: markupModes,\n      accessLevel: req.level(boardName)\n    });\n    let data = {\n      boardName: boardName,\n      text: text || null,\n      rawText: rawText || null,\n      options: {\n        signAsOp: ('true' === signAsOp),\n        showTripcode: !!(req.hashpass && ('true' === tripcode))\n      },\n      createdAt: Tools.now().toISOString()\n    };\n    if (req.hashpass && tripcode) {\n      data.tripcode = board.generateTripcode(req.hashpass);\n    }\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/createPost', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, threadNumber, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createPost', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction);\n    IPC.send('notifyAboutNewPosts', `${boardName}/${threadNumber}`);\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: post.boardName,\n        postNumber: post.number\n      });\n    } else {\n      let hash = `post-${post.number}`;\n      let path = `/${config('site.pathPrefix')}${post.boardName}/res/${post.threadNumber}.html#${hash}`;\n      res.redirect(303, path);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/createThread', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createThread', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    let thread = await ThreadsModel.createThread(req, fields, transaction);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction, {\n      postNumber: thread.number,\n      date: new Date(thread.createdAt)\n    });\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: thread.boardName,\n        threadNumber: thread.number\n      });\n    } else {\n      res.redirect(303, `/${config('site.pathPrefix')}${thread.boardName}/res/${thread.number}.html`);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/editPost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editPost');\n    await testParameters(req, boardName, 'editPost', {\n      fields: fields,\n      postNumber: postNumber\n    });\n    let post = await PostsModel.editPost(req, fields);\n    res.json({\n      boardName: post.boardName,\n      postNumber: post.number\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/addFiles', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'addFilesToPost');\n    let post = await PostsModel.getPost(boardName, postNumber);\n    if (!post) {\n      throw new Error(Tools.translate('No such post'));\n    }\n    files = await Files.getFiles(fields, files);\n    if (files.length <= 0) {\n      throw new Error(Tools.translate('No file specified'));\n    }\n    await testParameters(req, boardName, 'addFiles', {\n      fields: fields,\n      files: files,\n      postNumber: postNumber\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    await FilesModel.addFilesToPost(boardName, postNumber, files, { archived: post.archived });\n    res.json({});\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/deletePost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deletePost', Tools.sha1(password));\n    let isThread = await ThreadsModel.threadExists(boardName, postNumber);\n    if (isThread) {\n      await ThreadsModel.deleteThread(boardName, postNumber);\n    } else {\n      await PostsModel.deletePost(boardName, postNumber);\n    }\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteFile', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deleteFile', Tools.sha1(password));\n    let post = await testParameters(req, boardName, 'deleteFile', { postNumber: postNumber });\n    await FilesModel.deleteFile(fileName);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editFileRating', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, rating, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editFileRating', Tools.sha1(password));\n    await FilesModel.editFileRating(fileName, rating);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editAudioTags', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    if (!Files.isAudioType(fileInfo.mimeType)) {\n      throw new Error(Tools.translate('Not an audio file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editAudioTags', Tools.sha1(password));\n    await FilesModel.editAudioTags(fileName, fields);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n"],"sourceRoot":"/source/"}