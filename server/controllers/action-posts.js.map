{"version":3,"sources":["controllers/action-posts.js"],"names":["req","boardName","mode","fields","files","postNumber","board","Error","Tools","translate","isArray","fileCount","option","test","testPostNumber","post","PostsModel","getPost","text","rawText","FilesModel","getPostFileCount","testParameters","existingFileCount","Files","IPC","ThreadsModel","UsersModel","router","Router","res","next","parseForm","markupMode","signAsOp","tripcode","checkUserBan","ip","write","markupModes","accessLevel","level","data","options","showTripcode","hashpass","createdAt","now","toISOString","generateTripcode","json","transaction","threadNumber","captchaEngine","checkCaptcha","getFiles","getThread","closed","unbumpable","thread","processFiles","createPost","archived","send","number","hash","path","redirect","rollback","createThread","date","Date","checkUserPermissions","editPost","length","addFilesToPost","password","sha1","threadExists","isThread","deleteThread","deletePost","fileName","getFileInfoByName","fileInfo","deleteFile","rating","editFileRating","isAudioType","mimeType","editAudioTags"],"mappings":"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","file":"action-posts.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport PostCreationTransaction from '../helpers/post-creation-transaction';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport * as FilesModel from '../models/files';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nasync function testParameters(req, boardName, mode, { fields, files, postNumber } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!fields) {\n    fields = {};\n  }\n  if (!_(files).isArray()) {\n    files = [];\n  }\n  let fileCount = 0;\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let post;\n  if (postNumber) {\n    post = await PostsModel.getPost(boardName, postNumber);\n    if (typeof fields.text === 'undefined') {\n      fields.text = post.rawText;\n    }\n    fileCount = await FilesModel.getPostFileCount(boardName, postNumber);\n  }\n  await board.testParameters({\n    req: req,\n    mode: mode,\n    fields: fields,\n    files: files,\n    existingFileCount: fileCount\n  });\n  return post;\n}\n\nrouter.post('/action/markupText', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, text, markupMode, signAsOp, tripcode } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    let rawText = text || '';\n    await testParameters(req, boardName, 'markupText', { fields: fields });\n    markupMode = markupMode || '';\n    let markupModes = markup.markupModes(markupMode);\n    text = await markup(boardName, text, {\n      markupModes: markupModes,\n      accessLevel: req.level(boardName)\n    });\n    let data = {\n      boardName: boardName,\n      text: text || null,\n      rawText: rawText || null,\n      options: {\n        signAsOp: ('true' === signAsOp),\n        showTripcode: !!(req.hashpass && ('true' === tripcode))\n      },\n      createdAt: Tools.now().toISOString()\n    };\n    if (req.hashpass && tripcode) {\n      data.tripcode = board.generateTripcode(req.hashpass);\n    }\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/createPost', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, threadNumber, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createPost', {\n      fields: fields,\n      files: files\n    });\n    let thread = await ThreadsModel.getThread(boardName, threadNumber, {\n      closed: 1,\n      unbumpable: 1\n    });\n    if (thread.closed) {\n      throw new Error(Tools.translate('Posting is disabled in this thread'));\n    }\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction, {\n      unbumpable: thread.unbumpable,\n      archived: thread.archived\n    });\n    IPC.send('notifyAboutNewPosts', `${boardName}/${threadNumber}`);\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: post.boardName,\n        postNumber: post.number\n      });\n    } else {\n      let hash = `post-${post.number}`;\n      let path = `/${config('site.pathPrefix')}${post.boardName}/res/${post.threadNumber}.html#${hash}`;\n      res.redirect(303, path);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/createThread', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createThread', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    let thread = await ThreadsModel.createThread(req, fields, transaction);\n    files = await Files.processFiles(boardName, files, transaction);\n    await PostsModel.createPost(req, fields, files, transaction, {\n      postNumber: thread.number,\n      date: new Date(thread.createdAt)\n    });\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: thread.boardName,\n        threadNumber: thread.number\n      });\n    } else {\n      res.redirect(303, `/${config('site.pathPrefix')}${thread.boardName}/res/${thread.number}.html`);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/editPost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editPost');\n    await testParameters(req, boardName, 'editPost', {\n      fields: fields,\n      postNumber: postNumber\n    });\n    let post = await PostsModel.editPost(req, fields);\n    res.json({\n      boardName: post.boardName,\n      postNumber: post.number\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/addFiles', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'addFilesToPost');\n    let post = await PostsModel.getPost(boardName, postNumber);\n    if (!post) {\n      throw new Error(Tools.translate('No such post'));\n    }\n    files = await Files.getFiles(fields, files);\n    if (files.length <= 0) {\n      throw new Error(Tools.translate('No file specified'));\n    }\n    await testParameters(req, boardName, 'addFiles', {\n      fields: fields,\n      files: files,\n      postNumber: postNumber\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    await FilesModel.addFilesToPost(boardName, postNumber, files);\n    res.json({});\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/deletePost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deletePost', Tools.sha1(password));\n    let isThread = await ThreadsModel.threadExists(boardName, postNumber);\n    if (isThread) {\n      await ThreadsModel.deleteThread(boardName, postNumber);\n    } else {\n      await PostsModel.deletePost(boardName, postNumber);\n    }\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteFile', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deleteFile', Tools.sha1(password));\n    let post = await testParameters(req, boardName, 'deleteFile', { postNumber: postNumber });\n    await FilesModel.deleteFile(fileName);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editFileRating', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, rating, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editFileRating', Tools.sha1(password));\n    await FilesModel.editFileRating(fileName, rating);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editAudioTags', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    if (!Files.isAudioType(fileInfo.mimeType)) {\n      throw new Error(Tools.translate('Not an audio file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editAudioTags', Tools.sha1(password));\n    await FilesModel.editAudioTags(fileName, fields);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n"]}