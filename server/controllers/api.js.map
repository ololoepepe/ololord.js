{"version":3,"sources":["controllers/api.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;IAAY,K;;AACZ;;;;AACA;;IAAY,K;;AACZ;;IAAY,W;;AACZ;;IAAY,U;;AACZ;;IAAY,U;;AACZ;;IAAY,U;;AACZ;;IAAY,Y;;AACZ;;IAAY,U;;;;;;;;AAEZ,IAAM,2BAA2B,MAAM,MAAvC;AACA,IAAM,eAAe,IAAI,GAAJ,CAAQ,CAAC,KAAD,EAAQ,IAAR,EAAc,MAAd,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,MAApC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,IAA1D,EAAgE,SAAhE,EAA2E,WAA3E,EAC3B,KAD2B,CAAR,CAArB;;AAGA,IAAI,SAAS,kBAAQ,MAAR,EAAb;;AAEA,OAAO,GAAP,CAAW,gBAAX;AAAA,sDAA6B,iBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAMrB,IANqB,EAcrB,KAdqB;AAAA;AAAA;AAAA;AAAA;AAAA,gBACtB,IAAI,KAAJ,CAAU,SADY;AAAA;AAAA;AAAA;;AAAA,6CAElB,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAFkB;;AAAA;AAAA;AAAA;AAAA,mBAKnB,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,IAAI,KAAJ,CAAU,SAA1C,CALmB;;AAAA;AAAA;AAAA,mBAMR,WAAW,OAAX,CAAmB,IAAI,KAAJ,CAAU,SAA7B,EAAwC,CAAC,IAAI,KAAJ,CAAU,UAAnD,EAA+D;AAC9E,6BAAe,IAD+D;AAE9E,8BAAgB,IAF8D;AAG9E,6BAAe;AAH+D,aAA/D,CANQ;;AAAA;AAMrB,gBANqB;;AAAA,gBAWpB,IAXoB;AAAA;AAAA;AAAA;;AAAA,6CAYhB,IAAI,IAAJ,CAAS,IAAT,CAZgB;;AAAA;AAcrB,iBAdqB,GAcb,gBAAM,KAAN,CAAY,KAAK,SAAjB,CAda;AAAA;AAAA,mBAenB,MAAM,mBAAN,CAA0B,IAA1B,CAfmB;;AAAA;AAAA;AAAA,mBAgBZ,MAAM,UAAN,CAAiB,IAAjB,CAhBY;;AAAA;AAgBzB,gBAhByB;;AAiBzB,gBAAI,IAAJ,CAAS,QAAQ,IAAjB;AAjByB;AAAA;;AAAA;AAAA;AAAA;;AAmBzB;;AAnByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAuBA,OAAO,GAAP,CAAW,sBAAX;AAAA,sDAAmC,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAM3B,UAN2B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC5B,IAAI,KAAJ,CAAU,SADkB;AAAA;AAAA;AAAA;;AAAA,8CAExB,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAFwB;;AAAA;AAAA;AAAA;AAAA,mBAKzB,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,IAAI,KAAJ,CAAU,SAA1C,CALyB;;AAAA;AAAA;AAAA,mBAMR,aAAa,aAAb,CAA2B,IAAI,KAAJ,CAAU,SAArC,EAAgD,CAAC,IAAI,KAAJ,CAAU,YAA3D,EACrB,EAAE,gBAAgB,CAAC,IAAI,KAAJ,CAAU,cAA7B,EADqB,CANQ;;AAAA;AAM3B,sBAN2B;;AAQ/B,gBAAI,IAAJ,CAAS,UAAT;AAR+B;AAAA;;AAAA;AAAA;AAAA;;AAU/B;;AAV+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAcA,OAAO,GAAP,CAAW,uBAAX;AAAA,sDAAoC,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAC9B,OAD8B,EAM5B,UAN4B,EAQ5B,WAR4B;AAAA;AAAA;AAAA;AAAA;AAC9B,mBAD8B,GACpB,IAAI,KAAJ,CAAU,OADU;;AAElC,gBAAI,CAAC,0BAAE,OAAF,EAAW,OAAX,EAAL,EAA2B;AACzB,wBAAU,CAAC,OAAD,CAAV;AACD;AAJiC;AAM5B,sBAN4B,GAMf,CAAC,WAAW,EAAZ,EAAgB,GAAhB,CAAoB;AAAA,qBAAU,OAAO,KAAP,CAAa,GAAb,EAAkB,KAAlB,EAAV;AAAA,aAApB,CANe;AAAA;AAAA,mBAO1B,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,UAAhC,CAP0B;;AAAA;AAAA;AAAA,mBAQR,MAAM,MAAN,CAAa,WAAW,EAAxB;AAAA,kEAA4B,kBAAe,MAAf;AAAA,mDAC7C,SAD6C,EAClC,YADkC,EACpB,cADoB;;AAAA;AAAA;AAAA;AAAA;AAAA,wCACF,OAAO,KAAP,CAAa,GAAb,CADE;AAAA;AAC7C,iCAD6C;AAClC,oCADkC;AACpB,sCADoB;AAAA;AAAA,+BAErC,aAAa,aAAb,CAA2B,SAA3B,EAAsC,CAAC,YAAvC,EAAqD,EAAE,gBAAgB,CAAC,cAAnB,EAArD,CAFqC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA5B;;AAAA;AAAA;AAAA;AAAA,iBAGrB,IAHqB,CARQ;;AAAA;AAQ5B,uBAR4B;;AAYhC,gBAAI,IAAJ,CAAS,WAAT;AAZgC;AAAA;;AAAA;AAAA;AAAA;;AAchC;;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAkBA,OAAO,GAAP,CAAW,gCAAX;AAAA,sDAA6C,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QACvC,SADuC,EAOrC,oBAPqC;AAAA;AAAA;AAAA;AAAA;AACvC,qBADuC,GAC3B,IAAI,KAAJ,CAAU,SADiB;;AAAA,gBAEtC,SAFsC;AAAA;AAAA;AAAA;;AAAA,8CAGlC,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAHkC;;AAAA;AAAA;AAAA;AAAA,mBAMnC,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,SAAhC,CANmC;;AAAA;AAAA;AAAA,mBAOR,aAAa,uBAAb,CAAqC,SAArC,EAAgD,CAAC,IAAI,KAAJ,CAAU,YAA3D,CAPQ;;AAAA;AAOrC,gCAPqC;;AAQzC,gBAAI,IAAJ,CAAS,EAAE,gBAAgB,oBAAlB,EAAT;AARyC;AAAA;;AAAA;AAAA;AAAA;;AAUzC;;AAVyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7C;;AAAA;AAAA;AAAA;AAAA;;AAcA,OAAO,GAAP,CAAW,iCAAX;AAAA,sDAA8C,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QACxC,OADwC,EAMtC,UANsC,EAQtC,qBARsC;AAAA;AAAA;AAAA;AAAA;AACxC,mBADwC,GAC9B,IAAI,KAAJ,CAAU,OADoB;;AAE5C,gBAAI,CAAC,0BAAE,OAAF,EAAW,OAAX,EAAL,EAA2B;AACzB,wBAAU,CAAC,OAAD,CAAV;AACD;AAJ2C;AAMtC,sBANsC,GAMzB,CAAC,WAAW,EAAZ,EAAgB,GAAhB,CAAoB;AAAA,qBAAU,OAAO,KAAP,CAAa,GAAb,EAAkB,KAAlB,EAAV;AAAA,aAApB,CANyB;AAAA;AAAA,mBAOpC,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,UAAhC,CAPoC;;AAAA;AAAA;AAAA,mBAQR,MAAM,MAAN,CAAa,WAAW,EAAxB;AAAA,kEAA4B,kBAAe,MAAf;AAAA,oDACvD,SADuD,EAC5C,YAD4C;;AAAA;AAAA;AAAA;AAAA;AAAA,yCAC5B,OAAO,KAAP,CAAa,GAAb,CAD4B;AAAA;AACvD,iCADuD;AAC5C,oCAD4C;AAAA;AAAA,+BAE/C,aAAa,uBAAb,CAAqC,SAArC,EAAgD,CAAC,YAAjD,CAF+C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA5B;;AAAA;AAAA;AAAA;AAAA,iBAG/B,IAH+B,CARQ;;AAAA;AAQtC,iCARsC;;AAY1C,gBAAI,IAAJ,CAAS,qBAAT;AAZ0C;AAAA;;AAAA;AAAA;AAAA;;AAc1C;;AAd0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAkBA,OAAO,GAAP,CAAW,oBAAX;AAAA,sDAAiC,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAEzB,QAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzB,oBAFyB,GAEd,IAFc;;AAAA,iBAGzB,IAAI,KAAJ,CAAU,QAHe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIV,WAAW,iBAAX,CAA6B,IAAI,KAAJ,CAAU,QAAvC,CAJU;;AAAA;AAI3B,oBAJ2B;AAAA;AAAA;;AAAA;AAAA,iBAKlB,IAAI,KAAJ,CAAU,QALQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMV,WAAW,iBAAX,CAA6B,IAAI,KAAJ,CAAU,QAAvC,CANU;;AAAA;AAM3B,oBAN2B;AAAA;AAAA;;AAAA;AAAA,8CAQpB,KAAK,MAAM,SAAN,CAAgB,yCAAhB,CAAL,CARoB;;AAAA;AAU7B,gBAAI,IAAJ,CAAS,QAAT;AAV6B;AAAA;;AAAA;AAAA;AAAA;;AAY7B;;AAZ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,GAAP,CAAW,yBAAX;AAAA,sDAAsC,kBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAE9B,MAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9B,kBAF8B,GAErB,KAFqB;;AAAA,iBAG9B,IAAI,KAAJ,CAAU,QAHoB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIjB,WAAW,oBAAX,CAAgC,IAAI,KAAJ,CAAU,QAA1C,CAJiB;;AAAA;AAIhC,kBAJgC;AAAA;AAAA;;AAAA;AAAA,iBAKvB,IAAI,KAAJ,CAAU,QALa;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMjB,WAAW,oBAAX,CAAgC,IAAI,KAAJ,CAAU,QAA1C,CANiB;;AAAA;AAMhC,kBANgC;AAAA;AAAA;;AAAA;AAAA,8CAQzB,KAAK,MAAM,SAAN,CAAgB,yCAAhB,CAAL,CARyB;;AAAA;AAUlC,gBAAI,IAAJ,CAAS,MAAT;AAVkC;AAAA;;AAAA;AAAA;AAAA;;AAYlC;;AAZkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,GAAP,CAAW,0BAAX;AAAA,sDAAuC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAK/B,cAL+B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChC,IAAI,KAAJ,CAAU,SADsB;AAAA;AAAA;AAAA;;AAAA,+CAE5B,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAF4B;;AAAA;AAAA;AAAA;AAAA,mBAKR,YAAY,iBAAZ,CAA8B,IAAI,KAAJ,CAAU,SAAxC,CALQ;;AAAA;AAK/B,0BAL+B;;AAMnC,gBAAI,IAAJ,CAAS,EAAE,gBAAgB,cAAlB,EAAT;AANmC;AAAA;;AAAA;AAAA;AAAA;;AAQnC;;AARmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;;AAYA,OAAO,GAAP,CAAW,2BAAX;AAAA,sDAAwC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAClC,UADkC,EAQhC,eARgC;AAAA;AAAA;AAAA;AAAA;AAClC,sBADkC,GACrB,IAAI,KAAJ,CAAU,UADW;;AAEtC,gBAAI,CAAC,UAAL,EAAiB;AACf,2BAAa,gBAAM,UAAN,EAAb;AACD,aAFD,MAEO,IAAI,CAAC,0BAAE,UAAF,EAAc,OAAd,EAAL,EAA8B;AACnC,2BAAa,CAAC,UAAD,CAAb;AACD;AANqC;AAAA;AAAA,mBAQR,YAAY,kBAAZ,CAA+B,UAA/B,CARQ;;AAAA;AAQhC,2BARgC;;AASpC,gBAAI,IAAJ,CAAS,eAAT;AAToC;AAAA;;AAAA;AAAA;AAAA;;AAWpC;;AAXoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;;AAeA,OAAO,GAAP,CAAW,wBAAX;AAAA,sDAAqC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAE7B,KAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEf,WAAW,eAAX,CAA2B,GAA3B,EAAgC,IAAI,IAAJ,CAAS,IAAI,KAAJ,CAAU,eAAnB,CAAhC,CAFe;;AAAA;AAE7B,iBAF6B;;AAGjC,gBAAI,IAAJ,CAAS,KAAT;AAHiC;AAAA;;AAAA;AAAA;AAAA;;AAKjC;;AALiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AASA,OAAO,GAAP,CAAW,2BAAX;AAAA,sDAAwC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAKhC,IALgC;AAAA;AAAA;AAAA;AAAA;AAAA,gBACjC,IAAI,KAAJ,CAAU,GADuB;AAAA;AAAA;AAAA;;AAAA,+CAE7B,KAAK,MAAM,SAAN,CAAgB,kBAAhB,CAAL,CAF6B;;AAAA;AAAA;AAAA;AAAA,mBAKnB,WAAW,sBAAX,CAAkC,IAAI,KAAJ,CAAU,GAA5C,CALmB;;AAAA;AAKhC,gBALgC;;AAMpC,gBAAI,IAAJ,CAAS,IAAT;AANoC;AAAA;;AAAA;AAAA;AAAA;;AAQpC;;AARoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;;AAYA,OAAO,GAAP,CAAW,wBAAX;AAAA,sDAAqC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAM7B,KAN6B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC9B,IAAI,KAAJ,CAAU,SADoB;AAAA;AAAA;AAAA;;AAAA,+CAE1B,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAF0B;;AAAA;AAAA;AAAA;AAAA,mBAK3B,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,IAAI,KAAJ,CAAU,SAA1C,CAL2B;;AAAA;AAAA;AAAA,mBAMf,WAAW,mBAAX,CAA+B,IAAI,KAAJ,CAAU,SAAzC,EAAoD,IAAI,QAAJ,IAAgB,IAAI,EAAxE,CANe;;AAAA;AAM7B,iBAN6B;;AAOjC,gBAAI,IAAJ,CAAS,EAAE,OAAO,KAAT,EAAT;AAPiC;AAAA;;AAAA;AAAA;AAAA;;AASjC;;AATiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAaA,OAAO,GAAP,CAAW,sBAAX;AAAA,sDAAmC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA;AAAA;AAAA;AAAA;AACjC,gBAAI;AACF,kBAAI,IAAJ,CAAS,IAAI,MAAJ,IAAc,EAAvB;AACD,aAFD,CAEE,OAAM,GAAN,EAAW;AACX,mBAAK,GAAL;AACD;;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAQA,OAAO,GAAP,CAAW,kBAAX;AAAA,sDAA+B,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QASvB,EATuB;AAAA;AAAA;AAAA;AAAA;AAAA,gBACxB,IAAI,KAAJ,CAAU,SADc;AAAA;AAAA;AAAA;;AAAA,+CAEpB,KAAK,MAAM,SAAN,CAAgB,eAAhB,CAAL,CAFoB;;AAAA;AAAA;AAAA;AAAA,mBAKrB,WAAW,YAAX,CAAwB,IAAI,EAA5B,EAAgC,IAAI,KAAJ,CAAU,SAA1C,CALqB;;AAAA;AAAA,gBAMtB,IAAI,OAAJ,EANsB;AAAA;AAAA;AAAA;;AAAA,+CAOlB,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAPkB;;AAAA;AAAA;AAAA,mBASZ,WAAW,SAAX,CAAqB,IAAI,KAAJ,CAAU,SAA/B,EAA0C,CAAC,IAAI,KAAJ,CAAU,UAArD,CATY;;AAAA;AASvB,cATuB;;AAU3B,gBAAI,IAAJ,CAAS,MAAM,OAAN,CAAc,EAAE,IAAI,EAAN,EAAd,CAAT;AAV2B;AAAA;;AAAA;AAAA;AAAA;;AAY3B;;AAZ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,GAAP,CAAW,sBAAX;AAAA,sDAAmC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAC7B,EAD6B,EAS3B,UAT2B,EAU3B,UAV2B;AAAA;AAAA;AAAA;AAAA;AAC7B,cAD6B,GACxB,MAAM,cAAN,CAAqB,IAAI,KAAJ,CAAU,EAA/B,CADwB;;AAAA,gBAE5B,EAF4B;AAAA;AAAA;AAAA;;AAAA,+CAGxB,KAAK,MAAM,SAAN,CAAgB,oBAAhB,CAAL,CAHwB;;AAAA;AAAA,gBAK5B,IAAI,OAAJ,EAL4B;AAAA;AAAA;AAAA;;AAAA,+CAMxB,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CANwB;;AAAA;AAAA;AAS3B,sBAT2B,GASd,gBAAM,UAAN,GAAmB,MAAnB,CAA0B;AAAA,qBAAa,IAAI,OAAJ,CAAY,SAAZ,CAAb;AAAA,aAA1B,CATc;AAAA;AAAA,mBAUR,WAAW,aAAX,CAAyB,EAAzB,EAA6B,UAA7B,CAVQ;;AAAA;AAU3B,sBAV2B;;AAW/B,uBAAW,MAAX,GAAoB,WAAW,MAAX,GAAoB,WAAW,MAAX,CAAkB,MAAtC,GAA+C,CAAnE;AACA,gBAAI,IAAJ,CAAS,MAAM,OAAN,CAAc,UAAd,CAAT;AAZ+B;AAAA;;AAAA;AAAA;AAAA;;AAc/B;;AAd+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAkBA,OAAO,GAAP,CAAW,uBAAX;AAAA,sDAAoC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAK5B,UAL4B,EAM5B,KAN4B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC7B,IAAI,OAAJ,EAD6B;AAAA;AAAA;AAAA;;AAAA,+CAEzB,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAFyB;;AAAA;AAAA;AAK5B,sBAL4B,GAKf,gBAAM,UAAN,GAAmB,MAAnB,CAA0B;AAAA,qBAAa,IAAI,OAAJ,CAAY,SAAZ,CAAb;AAAA,aAA1B,CALe;AAAA;AAAA,mBAMd,WAAW,cAAX,CAA0B,UAA1B,CANc;;AAAA;AAM5B,iBAN4B;;AAOhC,gBAAI,IAAJ,CAAS,0BAAE,KAAF,EAAS,GAAT,CAAa,UAAC,UAAD,EAAgB;AACpC,yBAAW,MAAX,GAAoB,WAAW,MAAX,GAAoB,WAAW,MAAX,CAAkB,MAAtC,GAA+C,CAAnE;AACA,qBAAO,MAAM,OAAN,CAAc,UAAd,CAAP;AACD,aAHQ,CAAT;AAPgC;AAAA;;AAAA;AAAA;AAAA;;AAYhC;;AAZgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,GAAP,CAAW,0BAAX;AAAA,sDAAuC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAIjC,QAJiC,EAS/B,IAT+B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChC,IAAI,WAAJ,EADgC;AAAA;AAAA;AAAA;;AAAA,+CAE5B,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAF4B;;AAAA;AAIjC,oBAJiC,GAItB,IAAI,KAAJ,CAAU,QAJY;;AAAA,gBAKhC,MAAM,aAAN,CAAoB,QAApB,CALgC;AAAA;AAAA;AAAA;;AAAA,+CAM5B,KAAK,MAAM,SAAN,CAAgB,kBAAhB,CAAL,CAN4B;;AAAA;AAAA;AAAA;AAAA,mBASlB,WAAW,iBAAX,CAA6B,QAA7B,CATkB;;AAAA;AAS/B,gBAT+B;;AAUnC,gBAAI,IAAJ,CAAS,MAAM,OAAN,CAAc,IAAd,CAAT;AAVmC;AAAA;;AAAA;AAAA;AAAA;;AAYnC;;AAZmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;;AAgBA,OAAO,GAAP,CAAW,2BAAX;AAAA,sDAAwC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAKhC,KALgC;AAAA;AAAA;AAAA;AAAA;AAAA,gBACjC,IAAI,WAAJ,EADiC;AAAA;AAAA;AAAA;;AAAA,+CAE7B,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAF6B;;AAAA;AAAA;AAAA;AAAA,mBAKlB,WAAW,kBAAX,EALkB;;AAAA;AAKhC,iBALgC;;AAMpC,gBAAI,IAAJ,CAAS,MAAM,GAAN,CAAU,MAAM,OAAhB,CAAT;AANoC;AAAA;;AAAA;AAAA;AAAA;;AAQpC;;AARoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC;;AAAA;AAAA;AAAA;AAAA;;AAYA,OAAO,GAAP,CAAW,oBAAX;AAAA,sDAAiC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC1B,IAAI,WAAJ,EAD0B;AAAA;AAAA;AAAA;;AAAA,+CAEtB,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAFsB;;AAAA;AAAA;AAAA;AAAA,kBAKzB,GALyB,EAYzB,IAZyB,EAazB,IAbyB;AAAA;AAAA;AAAA;AAAA;AAKzB,yBALyB,GAKnB,IAAI,KAAJ,CAAU,GALS;;AAM7B,0BAAI,CAAC,GAAD,IAAQ,QAAQ,GAApB,EAAyB;AACvB,8BAAM,IAAN;AACD;AACD,0BAAI,QAAQ,IAAI,KAAJ,CAAU,CAAC,CAAX,EAAc,CAAd,CAAZ,EAA8B;AAC5B,+BAAO,GAAP;AACD;AACG,0BAZyB,GAYf,SAZe,eAYI,GAZJ;AAAA;AAAA,6BAaZ,aAAG,IAAH,CAAQ,IAAR,CAbY;;AAAA;AAazB,0BAbyB;AAAA;AAAA,6BAchB,MAAM,MAAN,CAAa,IAAb;AAAA,4EAAmB,mBAAe,IAAf;AAAA,8BAC1B,IAD0B,EAE1B,IAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACb,aAAG,IAAH,CAAW,IAAX,SAAmB,IAAnB,CADa;;AAAA;AAC1B,sCAD0B;AAE1B,sCAF0B,GAEnB;AACT,wCAAI,MAAM,IADD;AAET,0CAAM;AAFG,mCAFmB;;AAM9B,sCAAI,KAAK,WAAL,EAAJ,EAAwB;AACtB,yCAAK,IAAL,GAAY,QAAZ;AACA,yCAAK,QAAL,GAAgB,IAAhB;AACD,mCAHD,MAGO,IAAI,KAAK,MAAL,EAAJ,EAAmB;AACxB,yCAAK,IAAL,GAAY,MAAZ;AACD;AAX6B,qEAYvB,IAZuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAnB;;AAAA;AAAA;AAAA;AAAA,2BAaV,IAbU,CAdgB;;AAAA;AAc7B,0BAd6B;;AA4B7B,0BAAI,IAAJ,CAAS,IAAT;;AA5B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA8B7B,gBAAI,aAAa,cAAI,IAArB,EAA2B;AACzB,4BAAI,MAAJ,GAAa,GAAb;AACD,aAFD,MAEO,IAAI,cAAc,cAAI,IAAtB,EAA4B;AACjC,8BAAM,MAAM,SAAN,CAAgB,iBAAhB,CAAN;AACD;AACD;;AAnC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAuCA,OAAO,GAAP,CAAW,uBAAX;AAAA,sDAAoC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAK5B,QAL4B,EAM5B,OAN4B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC7B,IAAI,WAAJ,EAD6B;AAAA;AAAA;AAAA;;AAAA,+CAEzB,KAAK,MAAM,SAAN,CAAgB,mBAAhB,CAAL,CAFyB;;AAAA;AAAA;AAK5B,oBAL4B,GAKjB,CAAC,aAAa,GAAb,CAAiB,CAAC,IAAI,KAAJ,CAAU,QAAV,IAAsB,EAAvB,EAA2B,KAA3B,CAAiC,GAAjC,EAAsC,GAAtC,EAAjB,CAAD,GAAiE,GAAjE,GAAuE,SALtD;AAAA;AAAA,mBAMZ,aAAG,IAAH,CAAW,SAAX,eAA8B,IAAI,KAAJ,CAAU,QAAxC,EAAoD,QAApD,CANY;;AAAA;AAM5B,mBAN4B;;AAOhC,gBAAI,IAAJ,CAAS,EAAE,SAAS,OAAX,EAAT;AAPgC;AAAA;;AAAA;AAAA;AAAA;;AAShC,gBAAI,aAAa,cAAI,IAArB,EAA2B;AACzB,4BAAI,MAAJ,GAAa,GAAb;AACD,aAFD,MAEO,IAAI,aAAa,cAAI,IAArB,EAA2B;AAChC,8BAAM,MAAM,SAAN,CAAgB,YAAhB,CAAN;AACD;AACD;;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAkBA,OAAO,GAAP,CAAW,uBAAX;AAAA,sDAAoC,mBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAK5B,OAL4B,EAS5B,KAT4B,EAoB5B,QApB4B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC7B,IAAI,KAAJ,CAAU,GADmB;AAAA;AAAA;AAAA;;AAAA,+CAEzB,KAAK,MAAM,SAAN,CAAgB,aAAhB,CAAL,CAFyB;;AAAA;AAAA;AAK5B,mBAL4B,GAKlB;AACZ,sBAAQ,MADI;AAEZ,uBAAS;AAFG,aALkB;AAS5B,iBAT4B,GASpB,iBAAO,KAAP,EAToB;;AAUhC,gBAAI,KAAJ,EAAW;AACT,wBAAU,gBAAM,SAAN,CAAgB,OAAhB,EAAyB;AACjC,sBAAM,MAAM,IADqB;AAEjC,sBAAM,MAAM,IAFqB;AAGjC,yBAAS,EAAE,uBAAuB,MAAM,IAA/B,EAHwB;AAIjC,sBAAM,IAAI,KAAJ,CAAU;AAJiB,eAAzB,CAAV;AAMD,aAPD,MAOO;AACL,sBAAQ,GAAR,GAAc,IAAI,KAAJ,CAAU,GAAxB;AACD;AAnB+B;AAAA,mBAoBX,eAAK,OAAL,CAAa,OAAb,CApBW;;AAAA;AAoB5B,oBApB4B;;AAAA,kBAqB5B,QAAQ,CAAC,SAAS,MArBU;AAAA;AAAA;AAAA;;AAAA,+CAsBvB,KAAK,MAAM,SAAN,CAAgB,4BAAhB,CAAL,CAtBuB;;AAAA;AAwBhC,gBAAI,IAAJ,CAAS,SAAS,OAAlB;AAxBgC;AAAA;;AAAA;AAAA;AAAA;;AA0BhC;;AA1BgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AA8BA,kBAAQ,UAAR,GAAqB,OAArB,CAA6B,UAAC,EAAD,EAAQ;AACnC,oBAAQ,OAAR,CAAgB,EAAhB,EAAoB,SAApB,GAAgC,OAAhC,CAAwC,UAAC,KAAD,EAAW;AACjD,WAAO,MAAM,MAAb,WAA4B,MAAM,IAAlC,EAA0C,MAAM,OAAhD;AACD,GAFD;AAGD,CAJD;;AAMA,gBAAM,UAAN,GAAmB,OAAnB,CAA2B,UAAC,IAAD,EAAU;AACnC,kBAAM,KAAN,CAAY,IAAZ,EAAkB,SAAlB,GAA8B,OAA9B,CAAsC,UAAC,KAAD,EAAW;AAC/C,WAAO,MAAM,MAAb,WAA4B,MAAM,IAAlC,EAA0C,MAAM,OAAhD;AACD,GAFD;AAGD,CAJD;;AAMA,OAAO,OAAP,GAAiB,MAAjB","file":"controllers/api.js","sourcesContent":["import _ from 'underscore';\nimport Express from 'express';\nimport FS from 'q-io/fs';\nimport HTTP from 'q-io/http';\nimport merge from 'merge';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as ChatsModel from '../models/chats';\nimport * as FilesModel from '../models/files';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport * as UsersModel from '../models/users';\n\nconst GET_FILE_HEADERS_TIMEOUT = Tools.MINUTE;\nconst TEXT_FORMATS = new Set(['txt', 'js', 'json', 'jst', 'def', 'html', 'xml', 'css', 'md', 'example', 'gitignore',\n  'log']);\n\nlet router = Express.Router();\n\nrouter.get('/api/post.json', async function(req, res, next) {\n  if (!req.query.boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    await UsersModel.checkUserBan(req.ip, req.query.boardName);\n    let post = await PostsModel.getPost(req.query.boardName, +req.query.postNumber, {\n      withFileInfos: true,\n      withReferences: true,\n      withExtraData: true\n    });\n    if (!post) {\n      return res.json(null);\n    }\n    let board = Board.board(post.boardName);\n    await Files.renderPostFileInfos(post);\n    post = await board.renderPost(post);\n    res.json(post || null);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/threadInfo.json', async function(req, res, next) {\n  if (!req.query.boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    await UsersModel.checkUserBan(req.ip, req.query.boardName);\n    let threadInfo = await ThreadsModel.getThreadInfo(req.query.boardName, +req.query.threadNumber,\n      { lastPostNumber: +req.query.lastPostNumber });\n    res.json(threadInfo);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/threadInfos.json', async function(req, res, next) {\n  let threads = req.query.threads;\n  if (!_(threads).isArray()) {\n    threads = [threads];\n  }\n  try {\n    let boardNames = (threads || []).map(thread => thread.split(':').shift());\n    await UsersModel.checkUserBan(req.ip, boardNames);\n    let threadInfos = await Tools.series(threads || [], async function(thread) {\n      let [boardName, threadNumber, lastPostNumber] = thread.split(':');\n      return await ThreadsModel.getThreadInfo(boardName, +threadNumber, { lastPostNumber: +lastPostNumber });\n    }, true);\n    res.json(threadInfos);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/threadLastPostNumber.json', async function(req, res, next) {\n  let boardName = req.query.boardName;\n  if (!boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    await UsersModel.checkUserBan(req.ip, boardName);\n    let threadLastPostNumber = await ThreadsModel.getThreadLastPostNumber(boardName, +req.query.threadNumber);\n    res.json({ lastPostNumber: threadLastPostNumber });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/threadLastPostNumbers.json', async function(req, res, next) {\n  let threads = req.query.threads;\n  if (!_(threads).isArray()) {\n    threads = [threads];\n  }\n  try {\n    let boardNames = (threads || []).map(thread => thread.split(':').shift());\n    await UsersModel.checkUserBan(req.ip, boardNames);\n    let threadLastPostNumbers = await Tools.series(threads || [], async function(thread) {\n      let [boardName, threadNumber] = thread.split(':');\n      return await ThreadsModel.getThreadLastPostNumber(boardName, +threadNumber);\n    }, true);\n    res.json(threadLastPostNumbers);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/fileInfo.json', async function(req, res, next) {\n  try {\n    let fileInfo = null;\n    if (req.query.fileName) {\n      fileInfo = await FilesModel.getFileInfoByName(req.query.fileName);\n    } else if (req.query.fileHash) {\n      fileInfo = await FilesModel.getFileInfoByHash(req.query.fileHash);\n    } else {\n      return next(Tools.translate('Neither file name nor hash is specified'));\n    }\n    res.json(fileInfo);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/fileExistence.json', async function(req, res, next) {\n  try {\n    let exists = false;\n    if (req.query.fileName) {\n      exists = await FilesModel.fileInfoExistsByName(req.query.fileName);\n    } else if (req.query.fileHash) {\n      exists = await FilesModel.fileInfoExistsByHash(req.query.fileHash);\n    } else {\n      return next(Tools.translate('Neither file name nor hash is specified'));\n    }\n    res.json(exists);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/lastPostNumber.json', async function(req, res, next) {\n  if (!req.query.boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    let lastPostNumber = await BoardsModel.getLastPostNumber(req.query.boardName);\n    res.json({ lastPostNumber: lastPostNumber });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/lastPostNumbers.json', async function(req, res, next) {\n  let boardNames = req.query.boardNames;\n  if (!boardNames) {\n    boardNames = Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  try {\n    let lastPostNumbers = await BoardsModel.getLastPostNumbers(boardNames);\n    res.json(lastPostNumbers);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/chatMessages.json', async function(req, res, next) {\n  try {\n    let chats = await ChatsModel.getChatMessages(req, new Date(req.query.lastRequestDate));\n    res.json(chats);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/synchronization.json', async function(req, res, next) {\n  if (!req.query.key) {\n    return next(Tools.translate('No key specified'));\n  }\n  try {\n    let data = await UsersModel.getSynchronizationData(req.query.key);\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/captchaQuota.json', async function(req, res, next) {\n  if (!req.query.boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    await UsersModel.checkUserBan(req.ip, req.query.boardName);\n    let quota = await UsersModel.getUserCaptchaQuota(req.query.boardName, req.hashpass || req.ip);\n    res.json({ quota: quota });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/userLevels.json', async function(req, res, next) {\n  try {\n    res.json(req.levels || {});\n  } catch(err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/userIp.json', async function(req, res, next) {\n  if (!req.query.boardName) {\n    return next(Tools.translate('Invalid board'));\n  }\n  try {\n    await UsersModel.checkUserBan(req.ip, req.query.boardName);\n    if (!req.isModer()) {\n      return next(Tools.translate('Not enough rights'));\n    }\n    let ip = await UsersModel.getUserIP(req.query.boardName, +req.query.postNumber);\n    res.json(Tools.addIPv4({ ip: ip }));\n  } catch(err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/bannedUser.json', async function(req, res, next) {\n  let ip = Tools.correctAddress(req.query.ip);\n  if (!ip) {\n    return next(Tools.translate('Invalid IP address'));\n  }\n  if (!req.isModer()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  try {\n    let boardNames = Board.boardNames().filter(boardName => req.isModer(boardName));\n    let bannedUser = await UsersModel.getBannedUser(ip, boardNames);\n    bannedUser.subnet = bannedUser.subnet ? bannedUser.subnet.subnet : 0;\n    res.json(Tools.addIPv4(bannedUser));\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/bannedUsers.json', async function(req, res, next) {\n  if (!req.isModer()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  try {\n    let boardNames = Board.boardNames().filter(boardName => req.isModer(boardName));\n    let users = await UsersModel.getBannedUsers(boardNames);\n    res.json(_(users).map((bannedUser) => {\n      bannedUser.subnet = bannedUser.subnet ? bannedUser.subnet.subnet : 0;\n      return Tools.addIPv4(bannedUser);\n    }));\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/registeredUser.json', async function(req, res, next) {\n  if (!req.isSuperuser()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  let hashpass = req.query.hashpass;\n  if (!Tools.mayBeHashpass(hashpass)) {\n    return next(Tools.translate('Invalid hashpass'));\n  }\n  try {\n    let user = await UsersModel.getRegisteredUser(hashpass);\n    res.json(Tools.addIPv4(user));\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/registeredUsers.json', async function(req, res, next) {\n  if (!req.isSuperuser()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  try {\n    let users = await UsersModel.getRegisteredUsers();\n    res.json(users.map(Tools.addIPv4));\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.get('/api/fileTree.json', async function(req, res, next) {\n  if (!req.isSuperuser()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  try {\n    let dir = req.query.dir;\n    if (!dir || '#' === dir) {\n      dir = './';\n    }\n    if ('/' !== dir.slice(-1)[0]) {\n      dir += '/';\n    }\n    let path = `${__dirname}/../../${dir}`;\n    let list = await FS.list(path);\n    list = await Tools.series(list, async function(file) {\n      let stat = await FS.stat(`${path}/${file}`);\n      let node = {\n        id: dir + file,\n        text: file\n      };\n      if (stat.isDirectory()) {\n        node.type = 'folder';\n        node.children = true;\n      } else if (stat.isFile()) {\n        node.type = 'file';\n      }\n      return node;\n    }, true);\n    res.json(list);\n  } catch (err) {\n    if ('ENOENT' === err.code) {\n      err.status = 404;\n    } else if ('ENOTDIR' === err.code) {\n      err = Tools.translate('Not a directory');\n    }\n    next(err);\n  }\n});\n\nrouter.get('/api/fileContent.json', async function(req, res, next) {\n  if (!req.isSuperuser()) {\n    return next(Tools.translate('Not enough rights'));\n  }\n  try {\n    let encoding = !TEXT_FORMATS.has((req.query.fileName || '').split('.').pop()) ? 'b' : undefined;\n    let content = await FS.read(`${__dirname}/../../${req.query.fileName}`, encoding);\n    res.json({ content: content });\n  } catch (err) {\n    if ('ENOENT' === err.code) {\n      err.status = 404;\n    } else if ('EISDIR' === err.code) {\n      err = Tools.translate('Not a file');\n    }\n    next(err);\n  }\n});\n\nrouter.get('/api/fileHeaders.json', async function(req, res, next) {\n  if (!req.query.url) {\n    return next(Tools.translate('Invalid URL'));\n  }\n  try {\n    let options = {\n      method: 'HEAD',\n      timeout: GET_FILE_HEADERS_TIMEOUT\n    };\n    let proxy = config.proxy();\n    if (proxy) {\n      options = merge.recursive(options, {\n        host: proxy.host,\n        port: proxy.port,\n        headers: { 'Proxy-Authorization': proxy.auth },\n        path: req.query.url,\n      });\n    } else {\n      options.url = req.query.url;\n    }\n    let response = await HTTP.request(options);\n    if (200 !== +response.status) {\n      return next(Tools.translate('Failed to get file headers'));\n    }\n    res.json(response.headers);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).apiRoutes().forEach((route) => {\n    router[route.method](`/api${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).apiRoutes().forEach((route) => {\n    router[route.method](`/api${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}