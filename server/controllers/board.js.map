{"version":3,"sources":["controllers/board.js"],"names":[],"mappings":"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","file":"controllers/board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport FS from 'q-io/fs';\nimport moment from 'moment';\nimport promisify from 'promisify-node';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as MiscModel from '../models/misc';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nconst mkpath = promisify('mkpath');\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet client = mongodbClient();\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost) {\n      return true;\n    }\n    if (oldPost.options.bannedFor !== post.options.bannedFor) {\n      return true;\n    }\n    if (oldPost.sequenceNumber !== post.sequenceNumber) {\n      return true;\n    }\n    if (oldPost.updatedAt < post.updatedAt) {\n      return true;\n    }\n    if (oldPost.text !== post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { prerendered } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let model = {\n    thread: thread,\n    title: thread.title || `${board.title} — ${thread.number}`,\n    isThreadPage: true,\n    board: MiscModel.board(board).board,\n    threadNumber: thread.number,\n    prerendered: prerendered\n  };\n  let data = Renderer.render('pages/thread', model);\n  await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nfunction getPrerenderedPost(html, postNumber) {\n  let startIndex = html.indexOf(`<div id='post-${postNumber}'`);\n  if (startIndex < 0) {\n    return;\n  }\n  let endPattern = `<!--__ololord_end_post#${postNumber}-->`;\n  let endIndex = html.lastIndexOf(endPattern);\n  if (endIndex < 0) {\n    return;\n  }\n  return html.substring(startIndex, endIndex + endPattern.length);\n}\n\nasync function renderPage(boardName, pageNumber, { allowPrerender } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  if (allowPrerender) {\n    let pageJSON = await Cache.readFile(`${boardName}/${pageNumber}.json`);\n    pageJSON = JSON.parse(pageJSON);\n    let pageHTML = await Cache.readFile(`${boardName}/${pageID}.html`);\n    let mustRender = page.threads.some((thread) => { return (allowPrerender === thread.number); });\n    let lastPosts = pageJSON.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    lastPosts = _(lastPosts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = page.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    posts = _(posts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    if (!mustRender && _(postsToRerender).isEmpty()) {\n      return;\n    }\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(pageHTML, postNumber);\n    });\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n    page.prerendered = prerendered;\n  } else {\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  }\n  page.title = board.title;\n  page.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nasync function renderPages(boardName, { allowPrerender } = {}) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber, { allowPrerender });\n  });\n};\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/rss',\n      description: Tools.translate('Board RSS feed')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    threadNumbers = threadNumbers.concat(archivedThreadNumbers).sort();\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`, `/${boardName}/rss`];\n    return paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten();\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}`;\n    let threadData = await Cache.readFile(`${threadID}.json`);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    thread = await BoardsModel.getThread(data.boardName, data.threadNumber);\n    let posts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    let threadHTML = await Cache.readFile(`${threadID}.html`);\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(threadHTML, postNumber);\n    });\n    await Files.renderPostFileInfos(thread.opPost);\n    thread.opPost = await board.renderPost(thread.opPost);\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      await Files.renderPostFileInfos(post);\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    model.thread = thread;\n    await Cache.writeFile(`${threadID}.json`, JSON.stringify(model));\n    await renderThreadHTML(thread, { prerendered: prerendered });\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    throw new Error(Tools.translate('Invalid action'));\n  }\n  }\n}\n\nrouter.renderPages = async function(boardName, threadNumber) {\n  return await renderPages(boardName, { allowPrerender: threadNumber || true });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function(boardName) {\n  if (!boardName) {\n    return await Tools.series(Board.boardNames(), router.renderRSS.bind(router));\n  }\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board name: $[1]', '', boardName));\n  }\n  let rssPostCount = config('server.rss.postCount');\n  let Post = await client.collection('post');\n  let posts = await Post.find({ boardName: boardName }, {\n    number: 1,\n    threadNumber: 1,\n    subject: 1,\n    name: 1,\n    text: 1,\n    fileInfos: 1,\n    createdAt: 1\n  }).sort({ createdAt: -1 }).limit(rssPostCount).toArray();\n  if (posts.length <= 0) {\n    return;\n  }\n  posts.sort((p1, p2) => {\n    return +p1.createdAt < +p2.createdAt;\n  });\n  posts.forEach((post) => {\n    if (post.text) {\n      post.text = post.text.split('&nbsp', ' '); //NOTE: Required for the RSS to be valid\n    }\n    post.subject = BoardsModel.postSubject(post, 150) || post.number; //TODO: Magic number\n  });\n  let rss = {\n    date: Tools.now(),\n    ttl: config('server.rss.ttl'),\n    board: MiscModel.board(board).board,\n    posts: posts,\n    formattedDate: (date) => {\n      return moment(date).utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n    }\n  };\n  return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/([^\\/]+)\\/rss$/);\n  if (match) {\n    return await router.renderRSS(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nexport default router;\n"],"sourceRoot":"/source/"}