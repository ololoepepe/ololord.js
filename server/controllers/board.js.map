{"version":3,"sources":["controllers/board.js"],"names":["thread","prerendered","board","boardName","Error","Tools","translate","model","title","number","isThreadPage","MiscModel","threadNumber","data","Renderer","render","Cache","writeFile","renderThreadHTML","BoardsModel","getThread","user","ip","hashpass","password","renderThread","JSON","stringify","pageNumber","allowPrerender","getPage","page","series","threads","pageID","readFile","pageJSON","parse","pageHTML","mustRender","some","lastPosts","map","posts","concat","opPost","splice","flatten","reduce","acc","post","pick","_1","postNumber","hasOwnProperty","postsToRerender","pickPostsToRerender","isEmpty","mapObject","getPrerenderedPost","renderPage","getPageCount","pageCount","range","renderPages","Files","ThreadsModel","mkpath","RSS_DATE_TIME_FORMAT","client","router","Router","oldPosts","oldPost","options","bannedFor","sequenceNumber","updatedAt","text","oldRefs","referringPosts","ref","newRefs","oldFileInfos","fileInfos","fileInfo","fileName","extraData","newFileInfos","html","startIndex","indexOf","endPattern","endIndex","lastIndexOf","substring","length","paths","description","path","boardNames","getThreadNumbers","threadNumbers","archived","archivedThreadNumbers","sort","arrays","key","isArray","mustCreate","d","action","mustDelete","threadID","threadData","threadHTML","renderPostFileInfos","renderPost","renderedPost","toArray","setThreadDeleted","removeFile","renderCatalog","sortMode","getCatalog","catalog","suffix","renderArchive","getArchive","archive","renderRSS","bind","rssPostCount","collection","Post","find","subject","name","createdAt","limit","p1","p2","forEach","split","postSubject","rss","date","now","ttl","formattedDate","utc","locale","format","match","installThreadHandler","type","get","req","res","next","params","option","test","testPostNumber","create404Error","baseUrl","getThreadRedirect","redirect"],"mappings":"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","file":"board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport moment from 'moment';\nimport promisify from 'promisify-node';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as MiscModel from '../models/misc';\nimport * as ThreadsModel from '../models/threads';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nconst mkpath = promisify('mkpath');\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet client = mongodbClient();\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost) {\n      return true;\n    }\n    if (oldPost.options.bannedFor !== post.options.bannedFor) {\n      return true;\n    }\n    if (oldPost.sequenceNumber !== post.sequenceNumber) {\n      return true;\n    }\n    if (oldPost.updatedAt < post.updatedAt) {\n      return true;\n    }\n    if (oldPost.text !== post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { prerendered } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let model = {\n    thread: thread,\n    title: thread.title || `${board.title} — ${thread.number}`,\n    isThreadPage: true,\n    board: MiscModel.board(board).board,\n    threadNumber: thread.number,\n    prerendered: prerendered\n  };\n  let data = Renderer.render('pages/thread', model);\n  await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  delete thread.user.ip;\n  delete thread.user.hashpass;\n  delete thread.user.password;\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nfunction getPrerenderedPost(html, postNumber) {\n  let startIndex = html.indexOf(`<div id='post-${postNumber}'`);\n  if (startIndex < 0) {\n    return;\n  }\n  let endPattern = `<!--__ololord_end_post#${postNumber}-->`;\n  let endIndex = html.lastIndexOf(endPattern);\n  if (endIndex < 0) {\n    return;\n  }\n  return html.substring(startIndex, endIndex + endPattern.length);\n}\n\nasync function renderPage(boardName, pageNumber, { allowPrerender } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  if (allowPrerender) {\n    let pageJSON = await Cache.readFile(`${boardName}/${pageNumber}.json`);\n    pageJSON = JSON.parse(pageJSON);\n    let pageHTML = await Cache.readFile(`${boardName}/${pageID}.html`);\n    let mustRender = page.threads.some((thread) => { return (allowPrerender === thread.number); });\n    let lastPosts = pageJSON.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    lastPosts = _(lastPosts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = page.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    posts = _(posts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    if (!mustRender && _(postsToRerender).isEmpty()) {\n      return;\n    }\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(pageHTML, postNumber);\n    });\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n    page.prerendered = prerendered;\n  } else {\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  }\n  page.title = board.title;\n  page.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nasync function renderPages(boardName, { allowPrerender } = {}) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber, { allowPrerender });\n  });\n}\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/rss',\n      description: Tools.translate('Board RSS feed')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    threadNumbers = threadNumbers.concat(archivedThreadNumbers).sort();\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`, `/${boardName}/rss`];\n    return paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten();\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}`;\n    let threadData = await Cache.readFile(`${threadID}.json`);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    thread = await BoardsModel.getThread(data.boardName, data.threadNumber);\n    let posts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    let threadHTML = await Cache.readFile(`${threadID}.html`);\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(threadHTML, postNumber);\n    });\n    await Files.renderPostFileInfos(thread.opPost);\n    thread.opPost = await board.renderPost(thread.opPost);\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      await Files.renderPostFileInfos(post);\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    model.thread = thread;\n    await Cache.writeFile(`${threadID}.json`, JSON.stringify(model));\n    await renderThreadHTML(thread, { prerendered: prerendered });\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    throw new Error(Tools.translate('Invalid action'));\n  }\n  }\n};\n\nrouter.renderPages = async function(boardName, threadNumber) {\n  return await renderPages(boardName, { allowPrerender: threadNumber || true });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function(boardName) {\n  if (!boardName) {\n    return await Tools.series(Board.boardNames(), router.renderRSS.bind(router));\n  }\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board name: $[1]', '', boardName));\n  }\n  let rssPostCount = config('server.rss.postCount');\n  let Post = await client.collection('post');\n  let posts = await Post.find({ boardName: boardName }, {\n    number: 1,\n    threadNumber: 1,\n    subject: 1,\n    name: 1,\n    text: 1,\n    fileInfos: 1,\n    createdAt: 1\n  }).sort({ createdAt: -1 }).limit(rssPostCount).toArray();\n  if (posts.length <= 0) {\n    return;\n  }\n  posts.sort((p1, p2) => {\n    return +p1.createdAt < +p2.createdAt;\n  });\n  posts.forEach((post) => {\n    if (post.text) {\n      post.text = post.text.split('&nbsp', ' '); //NOTE: Required for the RSS to be valid\n    }\n    post.subject = BoardsModel.postSubject(post, 150) || post.number; //TODO: Magic number\n  });\n  let rss = {\n    date: Tools.now(),\n    ttl: config('server.rss.ttl'),\n    board: MiscModel.board(board).board,\n    posts: posts,\n    formattedDate: (date) => {\n      return moment(date).utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n    }\n  };\n  return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/([^\\/]+)\\/rss$/);\n  if (match) {\n    return await router.renderRSS(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nfunction installThreadHandler(type) {\n  router.get(`/:boardName/res/:threadNumber.${type}`, async function(req, res, next) {\n    let { boardName, threadNumber } = req.params;\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      return next(Tools.create404Error(req.baseUrl));\n    }\n    let redirect = await ThreadsModel.getThreadRedirect(boardName, threadNumber);\n    if (!redirect) {\n      return next(Tools.create404Error(req.baseUrl));\n    }\n    res.redirect(301, `/${config('site.pathPrefix')}${redirect.boardName}/res/${redirect.threadNumber}.${type}`);\n  });\n}\n\ninstallThreadHandler('html');\ninstallThreadHandler('json');\n\nexport default router;\n"]}