{"version":3,"sources":["controllers/markup.js"],"names":["Renderer","Tools","router","Router","CODE_TO_MARKUP","LATEX_TO_MARKUP","INLINE_LATEX_TO_MARKUP","paths","render","path","result","markupCode","markupLaTeX","markedUpLatex","markedUpInlineLatex","model","title","translate","codeToMarkup","markedUpCode","op","text","cl","latexToMarkup","inlineLatexToMarkup","module","exports"],"mappings":";;AAAA;;;;AAEA;;IAAYA,Q;;AACZ;;IAAYC,K;;AACZ;;;;;;;;;;AAEA,IAAIC,SAAS,kBAAQC,MAAR,EAAb;;AAEA,IAAMC,iBAAiB,yBAAvB;AACA,IAAMC,kBAAkB,uBAAxB;AACA,IAAMC,yBAAyB,QAA/B;;AAEAJ,OAAOK,KAAP,GAAe,YAAM;AACnB,SAAO,CAAC,cAAD,CAAP;AACD,CAFD;;AAIAL,OAAOM,MAAP;AAAA,uDAAgB,iBAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACV,mBAAmBA,IADT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIVC,kBAJU,GAID,iBAAOC,UAAP,CAAkBP,cAAlB,EAAkC,KAAlC,CAJC;AAAA;AAAA,mBAKY,iBAAOQ,WAAP,CAAmBP,eAAnB,CALZ;;AAAA;AAKVQ,yBALU;AAAA;AAAA,mBAMkB,iBAAOD,WAAP,CAAmBN,sBAAnB,EAA2C,IAA3C,CANlB;;AAAA;AAMVQ,+BANU;AAOVC,iBAPU,GAOF;AACVC,qBAAOf,MAAMgB,SAAN,CAAgB,QAAhB,EAA0B,WAA1B,CADG;AAEVC,4BAAcd,cAFJ;AAGVe,4BAAcT,OAAOU,EAAP,GAAYV,OAAOW,IAAnB,GAA0BX,OAAOY,EAHrC;AAIVC,6BAAelB,eAJL;AAKVQ,6BAAeA,aALL;AAMVW,mCAAqBlB,sBANX;AAOVQ,mCAAqBA;AAPX,aAPE;AAAA,6CAgBP,EAAE,eAAed,SAASQ,MAAT,CAAgB,cAAhB,EAAgCO,KAAhC,CAAjB,EAhBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAmBAU,OAAOC,OAAP,GAAiBxB,MAAjB","file":"markup.js","sourcesContent":["import express from 'express';\n\nimport * as Renderer from '../core/renderer';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\n\nlet router = express.Router();\n\nconst CODE_TO_MARKUP = 'static const int x = 0;';\nconst LATEX_TO_MARKUP = 'v=v_0+\\\\frac{at^2}{2}';\nconst INLINE_LATEX_TO_MARKUP = 'E=mc^2';\n\nrouter.paths = () => {\n  return ['/markup.html'];\n};\n\nrouter.render = async function(path) {\n  if ('/markup.html' !== path) {\n    return;\n  }\n  let result = markup.markupCode(CODE_TO_MARKUP, 'cpp');\n  let markedUpLatex = await markup.markupLaTeX(LATEX_TO_MARKUP);\n  let markedUpInlineLatex = await markup.markupLaTeX(INLINE_LATEX_TO_MARKUP, true);\n  let model = {\n    title: Tools.translate('Markup', 'pageTitle'),\n    codeToMarkup: CODE_TO_MARKUP,\n    markedUpCode: result.op + result.text + result.cl,\n    latexToMarkup: LATEX_TO_MARKUP,\n    markedUpLatex: markedUpLatex,\n    inlineLatexToMarkup: INLINE_LATEX_TO_MARKUP,\n    markedUpInlineLatex: markedUpInlineLatex\n  };\n  return { 'markup.html': Renderer.render('pages/markup', model) };\n};\n\nmodule.exports = router;\n"]}