{"version":3,"sources":["controllers/action-other.js"],"names":[],"mappings":"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","file":"controllers/action-other.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nrouter.post('/action/sendChatMessage', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber, text } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    if (!text || typeof text !== 'string') {\n      throw new Error(Tools.translate('Message is empty'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let result = await ChatsModel.addChatMessage({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber,\n      text: text\n    });\n    let { message, senderHash, receiverHash, receiver } = result;\n    if (senderHash !== receiverHash) {\n      message.type = 'in';\n      let ip = receiver.hashpass ? null : receiver.ip;\n      IPC.send('sendChatMessage', {\n        type: 'newChatMessage',\n        message: {\n          message: message,\n          boardName: boardName,\n          postNumber: postNumber,\n          chatNumber: result.chatNumber\n        },\n        ips: ip,\n        hashpasses: receiver.hashpass\n      });\n    }\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteChatMessages', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n    if (!chatNumber) {\n      throw new Error(Tools.translate('Invalid chat number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await ChatsModel.deleteChatMessages({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/synchronize', async function(req, res, next) {\n  try {\n    let { fields: { key, data } } = await Files.parseForm(req);\n    if (!key || typeof key !== 'string') {\n      throw new Error(Tools.translate('No key specified'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    try {\n      data = JSON.parse(data);\n    } catch (err) {\n      throw new Error(Tools.translate('Failed to parse data'));\n    }\n    await UsersModel.setSynchronizationData(key, data);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/search', async function(req, res, next) {\n  try {\n    let { fields: { query, boardName, page } } = await Files.parseForm(req);\n    if (!query || typeof query !== 'string') {\n      throw new Error(Tools.translate('Search query is empty'));\n    }\n    if (query.length > config('site.maxSearchQueryLength')) {\n      throw new Error(Tools.translate('Search query is too long'));\n    }\n    if ('*' === boardName) {\n      boardName = '';\n    }\n    if (boardName && !Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let phrases = query.match(/\\w+|\"[^\"]+\"/g) || [];\n    let model = {\n      searchQuery: query,\n      phrases: phrases.map(phrase => phrase.replace(/(^\\-|^\"|\"$)/g, '')),\n      searchBoard: boardName\n    };\n    let result = await PostsModel.findPosts(query, boardName, page);\n    let maxSubjectLength = config('system.search.maxResultPostSubjectLengh');\n    let maxTextLength = config('system.search.maxResultPostTextLengh');\n    model.searchResults = result.posts.map((post) => {\n      let text = (post.plainText || '').replace(/\\r*\\n+/g, ' ');\n      if (text.length > maxTextLength) {\n        text = text.substr(0, maxTextLength - 1) + '…';\n      }\n      let subject = post.subject || text;\n      if (subject.length > maxSubjectLength) {\n        subject = subject.substr(0, maxSubjectLength - 1) + '…';\n      }\n      return {\n        boardName: post.boardName,\n        postNumber: post.number,\n        threadNumber: post.threadNumber,\n        archived: post.archived,\n        subject: subject,\n        text: text\n      };\n    });\n    model.total = result.total;\n    model.max = result.max;\n    res.json(model);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}