{"version":3,"sources":["controllers/action-other.js"],"names":["Files","Tools","ChatsModel","PostsModel","UsersModel","IPC","router","Router","post","req","res","next","parseForm","fields","boardName","postNumber","chatNumber","text","board","Error","translate","option","test","testPostNumber","checkUserBan","ip","write","addChatMessage","user","result","message","receiver","type","hashpass","send","ips","hashpasses","json","n","deleteChatMessages","key","data","JSON","parse","setSynchronizationData","query","page","length","p","phrases","match","model","searchQuery","map","phrase","replace","searchBoard","findPosts","maxSubjectLength","maxTextLength","searchResults","posts","plainText","substr","subject","number","threadNumber","archived","total","max","captchaIDs","forEach","id","captcha","actionRoutes","route","method","path","handler","boardNames","name","module","exports"],"mappings":"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","file":"action-other.js","sourcesContent":["import express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\nimport * as IPC from '../helpers/ipc';\n\nlet router = express.Router();\n\nrouter.post('/action/sendChatMessage', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber, text } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    if (!text || typeof text !== 'string') {\n      throw new Error(Tools.translate('Message is empty'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    let result = await ChatsModel.addChatMessage({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber,\n      text: text\n    });\n    let { message, receiver } = result;\n    message.type = 'in';\n    let ip = receiver.hashpass ? null : receiver.ip;\n    IPC.send('sendChatMessage', {\n      type: 'newChatMessage',\n      message: {\n        message: message,\n        boardName: boardName,\n        postNumber: postNumber,\n        chatNumber: result.chatNumber\n      },\n      ips: ip,\n      hashpasses: receiver.hashpass\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteChatMessages', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n    if (!chatNumber) {\n      throw new Error(Tools.translate('Invalid chat number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    await ChatsModel.deleteChatMessages({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/synchronize', async function(req, res, next) {\n  try {\n    let { fields: { key, data } } = await Files.parseForm(req);\n    if (!key || typeof key !== 'string') {\n      throw new Error(Tools.translate('No key specified'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    try {\n      data = JSON.parse(data);\n    } catch (err) {\n      throw new Error(Tools.translate('Failed to parse data'));\n    }\n    await UsersModel.setSynchronizationData(key, data);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/search', async function(req, res, next) {\n  try {\n    let { fields: { query, boardName, page } } = await Files.parseForm(req);\n    if (!query || typeof query !== 'string') {\n      throw new Error(Tools.translate('Search query is empty'));\n    }\n    if (query.length > config('site.maxSearchQueryLength')) {\n      throw new Error(Tools.translate('Search query is too long'));\n    }\n    if ('*' === boardName) {\n      boardName = '';\n    }\n    if (boardName && !Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    let phrases = query.match(/\\w+|\"[^\"]+\"/g) || [];\n    let model = {\n      searchQuery: query,\n      phrases: phrases.map(phrase => phrase.replace(/(^\\-|^\"|\"$)/g, '')),\n      searchBoard: boardName\n    };\n    let result = await PostsModel.findPosts(query, boardName, page);\n    let maxSubjectLength = config('system.search.maxResultPostSubjectLengh');\n    let maxTextLength = config('system.search.maxResultPostTextLengh');\n    model.searchResults = result.posts.map((post) => {\n      let text = (post.plainText || '').replace(/\\r*\\n+/g, ' ');\n      if (text.length > maxTextLength) {\n        text = text.substr(0, maxTextLength - 1) + '…';\n      }\n      let subject = post.subject || text;\n      if (subject.length > maxSubjectLength) {\n        subject = subject.substr(0, maxSubjectLength - 1) + '…';\n      }\n      return {\n        boardName: post.boardName,\n        postNumber: post.number,\n        threadNumber: post.threadNumber,\n        archived: post.archived,\n        subject: subject,\n        text: text\n      };\n    });\n    model.total = result.total;\n    model.max = result.max;\n    res.json(model);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"]}