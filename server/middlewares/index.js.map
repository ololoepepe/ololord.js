{"version":3,"sources":["middlewares/index.js"],"names":["Tools","BEFORE","middlewares","setupDdos","push","errorData","errorCode","weight","maxWeight","checkInterval","rules","logFunction","args","error","translate","express","setupStatic","static","__dirname"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,K;;;;;;AAEZ,IAAMC,SAAS,sBAAO,8BAAP,CAAf;AACA,IAAIC,cAAc,EAAlB;;AAEA,SAASC,SAAT,GAAqB;AACnB,MAAI,WAAWF,MAAf,EAAuB;AACrBC,gBAAYE,IAAZ;AACD;AACD,MAAI,CAAC,sBAAO,+BAAP,CAAL,EAA8C;AAC5C;AACD;AACDF,cAAYE,IAAZ,CAAiB,oBAAU;AACzBC,eAAW,sBAAO,iCAAP,CADc;AAEzBC,eAAW,sBAAO,iCAAP,CAFc;AAGzBC,YAAQ,sBAAO,8BAAP,CAHiB;AAIzBC,eAAW,sBAAO,iCAAP,CAJc;AAKzBC,mBAAe,sBAAO,qCAAP,CALU;AAMzBC,WAAO,sBAAO,6BAAP,CANkB;AAOzBC,iBAAa,uBAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACxB,uBAAOC,KAAP,4CAAqBb,MAAMc,SAAN,CAAgB,gBAAhB,CAArB,SAA2DF,IAA3D;AACD;AATwB,GAAV,EAUdG,OAVc,EAAjB;AAWD;;AAED,SAASC,WAAT,GAAuB;AACrB,MAAI,aAAaf,MAAjB,EAAyB;AACvBC,gBAAYE,IAAZ;AACD;AACDF,cAAYE,IAAZ,CAAiB,kBAAQa,MAAR,CAAkBC,SAAlB,mBAAjB;AACD;;AAED,IAAI,UAAUjB,MAAd,EAAsB;AACpBC,cAAYE,IAAZ;AACD;;AAEDF,YAAYE,IAAZ;;AAEA,IAAI,sBAAO,8BAAP,CAAJ,EAA4C;AAC1CD;AACAa;AACD,CAHD,MAGO;AACLA;AACAb;AACD;;AAED,IAAI,iBAAiBF,MAArB,EAA6B;AAC3BC,cAAYE,IAAZ;AACD;;AAEDF,YAAYE,IAAZ,CAAiB,6BAAjB;;AAEA,IAAI,cAAcH,MAAlB,EAA0B;AACxBC,cAAYE,IAAZ;AACD;;kBAEcF,W","file":"index.js","sourcesContent":["import cookieParser from 'cookie-parser';\nimport DDDoS from 'dddos';\nimport express from 'express';\n\nimport hashpass from './hashpass';\nimport ipFix from './ip-fix';\nimport log from './log';\nimport onlineCounter from './online-counter';\nimport registeredUser from './registered-user';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst BEFORE = config('system.log.middleware.before');\nlet middlewares = [];\n\nfunction setupDdos() {\n  if ('ddos' === BEFORE) {\n    middlewares.push(log);\n  }\n  if (!config('server.ddosProtection.enabled')) {\n    return;\n  }\n  middlewares.push(new DDDoS({\n    errorData: config('server.ddosProtection.errorData'),\n    errorCode: config('server.ddosProtection.errorCode'),\n    weight: config('server.ddosProtection.weight'),\n    maxWeight: config('server.ddosProtection.maxWeight'),\n    checkInterval: config('server.ddosProtection.checkInterval'),\n    rules: config('server.ddosProtection.rules'),\n    logFunction: (...args) => {\n      Logger.error(Logger, Tools.translate('DDoS detected:'), ...args);\n    }\n  }).express());\n}\n\nfunction setupStatic() {\n  if ('static' === BEFORE) {\n    middlewares.push(log);\n  }\n  middlewares.push(express.static(`${__dirname}/../../public`));\n}\n\nif ('all' === BEFORE) {\n  middlewares.push(log);\n}\n\nmiddlewares.push(ipFix, onlineCounter);\n\nif (config('server.ddosProtection.static')) {\n  setupDdos();\n  setupStatic();\n} else {\n  setupStatic();\n  setupDdos();\n}\n\nif ('middleware' === BEFORE) {\n  middlewares.push(log);\n}\n\nmiddlewares.push(cookieParser(), hashpass, registeredUser);\n\nif ('request' === BEFORE) {\n  middlewares.push(log);\n}\n\nexport default middlewares;\n"]}