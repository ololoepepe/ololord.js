{"version":3,"sources":["middlewares/registered-user.js"],"names":["Tools","UsersModel","req","res","next","getRegisteredUserLevels","hashpass","levels","maxLevelIndex","toArray","map","level","REGISTERED_USER_LEVELS","indexOf","sort","level1","level2","maxLevel","boardName","test","strict","lvl","compareRegisteredUserLevels","forEach","Level","toLowerCase","charAt","toUpperCase","slice","bind","error","stack"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;IAAYA,K;;AACZ;;IAAYC,U;;;;;;;;;uDAEG,iBAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEQH,WAAWI,uBAAX,CAAmCH,IAAII,QAAvC,CAFR;;AAAA;AAEPC,kBAFO;AAGPC,yBAHO,GAGS,0BAAED,MAAF,EAAUE,OAAV,GAAoBC,GAApB,CAAwB,UAACC,KAAD,EAAW;AACrD,qBAAOX,MAAMY,sBAAN,CAA6BC,OAA7B,CAAqCF,KAArC,CAAP;AACD,aAFmB,EAEjBG,IAFiB,CAEZ,UAACC,MAAD,EAASC,MAAT,EAAoB;AAAE,qBAAOA,SAASD,MAAhB;AAAyB,aAFnC,EAEqC,CAFrC,CAHT;AAMPE,oBANO,GAMIjB,MAAMY,sBAAN,CAA6BJ,aAA7B,KAA+C,IANnD;;AAOXN,gBAAIS,KAAJ,GAAY,UAACO,SAAD,EAAe;AACzB,kBAAI,CAACA,SAAD,IAAc,OAAOA,SAAP,KAAqB,QAAvC,EAAiD;AAC/C,uBAAOD,QAAP;AACD;AACD,qBAAOV,OAAOW,SAAP,KAAqB,IAA5B;AACD,aALD;AAMAhB,gBAAIK,MAAJ,GAAaA,MAAb;;AACIY,gBAdO,GAcA,SAAPA,IAAO,CAASR,KAAT,EAAgBO,SAAhB,EAA2BE,MAA3B,EAAmC;AAC5C,kBAAIC,YAAJ;AACA,kBAAIH,aAAa,OAAOA,SAAP,KAAqB,SAAtC,EAAiD;AAC/CG,sBAAMnB,IAAIK,MAAJ,CAAWW,SAAX,CAAN;AACD,eAFD,MAEO;AACLG,sBAAMJ,QAAN;AACAG,yBAASF,SAAT;AACD;AACD,kBAAIE,MAAJ,EAAY;AACV,uBAAO,CAACpB,MAAMsB,2BAAN,CAAkCD,GAAlC,EAAuCV,KAAvC,CAAR;AACD,eAFD,MAEO;AACL,uBAAOX,MAAMsB,2BAAN,CAAkCD,GAAlC,EAAuCV,KAAvC,KAAiD,CAAxD;AACD;AACF,aA3BU;;AA4BXX,kBAAMY,sBAAN,CAA6BW,OAA7B,CAAqC,UAACF,GAAD,EAAS;AAC5C,kBAAIG,QAAQH,IAAII,WAAJ,EAAZ;AACAD,sBAAQA,MAAME,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCH,MAAMI,KAAN,CAAY,CAAZ,CAAxC;AACA1B,yBAASsB,KAAT,IAAoBL,KAAKU,IAAL,CAAU3B,GAAV,EAAemB,GAAf,CAApB;AACD,aAJD;AAKAjB;AAjCW;AAAA;;AAAA;AAAA;AAAA;;AAmCX,6BAAO0B,KAAP,CAAa,YAAIC,KAAJ,eAAb;AACA3B;;AApCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"registered-user.js","sourcesContent":["import _ from 'underscore';\n\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as UsersModel from '../models/users';\n\nexport default async function(req, res, next) {\n  try {\n    let levels = await UsersModel.getRegisteredUserLevels(req.hashpass);\n    let maxLevelIndex = _(levels).toArray().map((level) => {\n      return Tools.REGISTERED_USER_LEVELS.indexOf(level);\n    }).sort((level1, level2) => { return level2 - level1; })[0];\n    let maxLevel = Tools.REGISTERED_USER_LEVELS[maxLevelIndex] || null;\n    req.level = (boardName) => {\n      if (!boardName || typeof boardName !== 'string') {\n        return maxLevel;\n      }\n      return levels[boardName] || null;\n    };\n    req.levels = levels;\n    let test = function(level, boardName, strict) {\n      let lvl;\n      if (boardName && typeof boardName !== 'boolean') {\n        lvl = req.levels[boardName];\n      } else {\n        lvl = maxLevel;\n        strict = boardName;\n      }\n      if (strict) {\n        return !Tools.compareRegisteredUserLevels(lvl, level);\n      } else {\n        return Tools.compareRegisteredUserLevels(lvl, level) >= 0;\n      }\n    };\n    Tools.REGISTERED_USER_LEVELS.forEach((lvl) => {\n      let Level = lvl.toLowerCase();\n      Level = Level.charAt(0).toUpperCase() + Level.slice(1);\n      req[`is${Level}`] = test.bind(req, lvl);\n    });\n    next();\n  } catch (err) {\n    Logger.error(err.stack || err);\n    next();\n  }\n}\n"]}