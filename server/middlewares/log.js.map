{"version":3,"sources":["middlewares/log.js"],"names":["Files","Tools","excludePaths","excludeRules","resetExcluded","val","key","forEach","rule","regexp","push","RegExp","flags","string","on","exclude","path","hasOwnProperty","some","match","req","res","next","method","args","preferIPv4","ip","query","parseForm","fields","files","formFields","formFiles","info","error"],"mappings":";;;;;;AAAA;;IAAYA,K;;AACZ;;;;AACA;;;;AACA;;IAAYC,K;;;;;;;;AAEZ,IAAIC,eAAe,EAAnB;AACA,IAAIC,eAAe,EAAnB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/BJ,iBAAe,EAAf;AACAC,iBAAe,EAAf;AACA,GAACE,OAAO,EAAR,EAAYE,OAAZ,CAAoB,UAACC,IAAD,EAAU;AAC5B,QAAIA,KAAKC,MAAT,EAAiB;AACfN,mBAAaO,IAAb,CAAkB,IAAIC,MAAJ,CAAWH,KAAKC,MAAhB,EAAwBD,KAAKI,KAA7B,CAAlB;AACD,KAFD,MAEO,IAAIJ,KAAKK,MAAT,EAAiB;AACtBX,mBAAaM,KAAKK,MAAlB,IAA4B,EAA5B;AACD;AACF,GAND;AAOD;;AAED,iBAAOC,EAAP,CAAU,+BAAV,EAA2CV,aAA3C;AACAA,cAAc,sBAAO,+BAAP,EAAwC,EAAxC,CAAd;;AAEA,SAASW,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOd,aAAae,cAAb,CAA4BD,IAA5B,KAAqCb,aAAae,IAAb,CAAkB;AAAA,WAAQF,KAAKG,KAAL,CAAWX,IAAX,CAAR;AAAA,GAAlB,CAA5C;AACD;;;uDAEc,iBAAeY,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACTP,QAAQK,IAAIJ,IAAZ,CADS;AAAA;AAAA;AAAA;;AAAA,6CAEJM,MAFI;;AAAA;AAAA,kBAITF,IAAIG,MAAJ,CAAWJ,KAAX,CAAiB,0BAAjB,KAAgD,sBAAO,iCAAP,MAA8C,KAJrF;AAAA;AAAA;AAAA;;AAKPK,gBALO,GAKA,CAACvB,MAAMwB,UAAN,CAAiBL,IAAIM,EAArB,CAAD,EAA2BN,IAAIJ,IAA/B,EAAqCI,IAAIO,KAAzC,CALA;AAAA;AAAA;AAAA,mBAOqB3B,MAAM4B,SAAN,CAAgBR,GAAhB,CAPrB;;AAAA;AAAA;AAOHS,kBAPG,SAOHA,MAPG;AAOKC,iBAPL,SAOKA,KAPL;;AAQTV,gBAAIW,UAAJ,GAAiBF,MAAjB;AACAT,gBAAIY,SAAJ,GAAgBF,KAAhB;AACAN,iBAAKd,IAAL,CAAUmB,MAAV;AACA,6BAAOI,IAAP,yBAAeT,IAAf;AAXS;AAAA;;AAAA;AAAA;AAAA;;AAaT,6BAAOU,KAAP;;AAbS;AAeXZ;AAfW;;AAAA;AAAA,0BAkBL,sBAAO,iCAAP,CAlBK;AAAA,4CAmBR,KAnBQ,wBAoBR,OApBQ,wBAuBR,MAvBQ,wBA0BR,IA1BQ;AAAA;;AAAA;AAqBX,6BAAOW,IAAP,CAAYhC,MAAMwB,UAAN,CAAiBL,IAAIM,EAArB,CAAZ,EAAsCN,IAAIJ,IAA1C,EAAgDI,IAAIO,KAApD;AArBW;;AAAA;AAwBX,6BAAOM,IAAP,CAAYhC,MAAMwB,UAAN,CAAiBL,IAAIM,EAArB,CAAZ,EAAsCN,IAAIJ,IAA1C;AAxBW;;AAAA;AA2BX,6BAAOiB,IAAP,CAAYhC,MAAMwB,UAAN,CAAiBL,IAAIM,EAArB,CAAZ;AA3BW;;AAAA;AAAA;;AAAA;AAgCbJ;;AAhCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"log.js","sourcesContent":["import * as Files from '../core/files';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet excludePaths = {};\nlet excludeRules = [];\n\nfunction resetExcluded(val, key) {\n  excludePaths = {};\n  excludeRules = [];\n  (val || []).forEach((rule) => {\n    if (rule.regexp) {\n      excludeRules.push(new RegExp(rule.regexp, rule.flags));\n    } else if (rule.string) {\n      excludePaths[rule.string] = {};\n    }\n  });\n}\n\nconfig.on('system.log.middleware.exclude', resetExcluded);\nresetExcluded(config('system.log.middleware.exclude', []));\n\nfunction exclude(path) {\n  return excludePaths.hasOwnProperty(path) || excludeRules.some(rule => path.match(rule));\n}\n\nexport default async function(req, res, next) {\n  if (exclude(req.path)) {\n    return next();\n  }\n  if (req.method.match(/^post|put|patch|delete$/i) && config('system.log.middleware.verbosity') === 'all') {\n    let args = [Tools.preferIPv4(req.ip), req.path, req.query];\n    try {\n      let { fields, files } = await Files.parseForm(req);\n      req.formFields = fields;\n      req.formFiles = files;\n      args.push(fields);\n      Logger.info(...args);\n    } catch (err) {\n      Logger.error(err);\n    }\n    next();\n    return;\n  }\n  switch (config('system.log.middleware.verbosity')) {\n  case 'all':\n  case 'query':\n    Logger.info(Tools.preferIPv4(req.ip), req.path, req.query);\n    break;\n  case 'path':\n    Logger.info(Tools.preferIPv4(req.ip), req.path);\n    break;\n  case 'ip':\n    Logger.info(Tools.preferIPv4(req.ip));\n    break;\n  default:\n    break;\n  }\n  next();\n}\n"]}