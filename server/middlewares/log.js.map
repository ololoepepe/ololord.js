{"version":3,"sources":["middlewares/log.js"],"names":[],"mappings":";;;;;;AAAA;;IAAY,K;;AACZ;;;;AACA;;;;AACA;;IAAY,K;;;;;;;;AAEZ,IAAI,eAAe,EAAnB;AACA,IAAI,eAAe,EAAnB;;AAEA,SAAS,aAAT,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC;AAC/B,iBAAe,EAAf;AACA,iBAAe,EAAf;AACA,GAAC,OAAO,EAAR,EAAY,OAAZ,CAAoB,UAAC,IAAD,EAAU;AAC5B,QAAI,KAAK,MAAT,EAAiB;AACf,mBAAa,IAAb,CAAkB,IAAI,MAAJ,CAAW,KAAK,MAAhB,EAAwB,KAAK,KAA7B,CAAlB;AACD,KAFD,MAEO,IAAI,KAAK,MAAT,EAAiB;AACtB,mBAAa,KAAK,MAAlB,IAA4B,EAA5B;AACD;AACF,GAND;AAOD;;AAED,iBAAO,EAAP,CAAU,+BAAV,EAA2C,aAA3C;AACA,cAAc,sBAAO,+BAAP,EAAwC,EAAxC,CAAd;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AACrB,SAAO,aAAa,cAAb,CAA4B,IAA5B,KAAqC,aAAa,IAAb,CAAkB;AAAA,WAAQ,KAAK,KAAL,CAAW,IAAX,CAAR;AAAA,GAAlB,CAA5C;AACD;;;sDAEc,iBAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB;AAAA,QAKP,IALO,QAOH,MAPG,EAOK,KAPL;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACT,QAAQ,IAAI,IAAZ,CADS;AAAA;AAAA;AAAA;;AAAA,6CAEJ,MAFI;;AAAA;AAAA,kBAIT,IAAI,MAAJ,CAAW,KAAX,CAAiB,0BAAjB,KAAgD,sBAAO,iCAAP,MAA8C,KAJrF;AAAA;AAAA;AAAA;;AAKP,gBALO,GAKA,CAAC,MAAM,UAAN,CAAiB,IAAI,EAArB,CAAD,EAA2B,IAAI,IAA/B,EAAqC,IAAI,KAAzC,CALA;AAAA;AAAA;AAAA,mBAOqB,MAAM,SAAN,CAAgB,GAAhB,CAPrB;;AAAA;AAAA;AAOH,kBAPG,QAOH,MAPG;AAOK,iBAPL,QAOK,KAPL;;AAQT,gBAAI,UAAJ,GAAiB,MAAjB;AACA,gBAAI,SAAJ,GAAgB,KAAhB;AACA,iBAAK,IAAL,CAAU,MAAV;AACA,6BAAO,IAAP,yBAAe,IAAf;AAXS;AAAA;;AAAA;AAAA;AAAA;;AAaT,6BAAO,KAAP;;AAbS;AAeX;AAfW;;AAAA;AAAA,0BAkBL,sBAAO,iCAAP,CAlBK;AAAA,4CAmBR,KAnBQ,wBAoBR,OApBQ,wBAuBR,MAvBQ,wBA0BR,IA1BQ;AAAA;;AAAA;AAqBX,6BAAO,IAAP,CAAY,MAAM,UAAN,CAAiB,IAAI,EAArB,CAAZ,EAAsC,IAAI,IAA1C,EAAgD,IAAI,KAApD;AArBW;;AAAA;AAwBX,6BAAO,IAAP,CAAY,MAAM,UAAN,CAAiB,IAAI,EAArB,CAAZ,EAAsC,IAAI,IAA1C;AAxBW;;AAAA;AA2BX,6BAAO,IAAP,CAAY,MAAM,UAAN,CAAiB,IAAI,EAArB,CAAZ;AA3BW;;AAAA;AAAA;;AAAA;AAgCb;;AAhCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"middlewares/log.js","sourcesContent":["import * as Files from '../core/files';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet excludePaths = {};\nlet excludeRules = [];\n\nfunction resetExcluded(val, key) {\n  excludePaths = {};\n  excludeRules = [];\n  (val || []).forEach((rule) => {\n    if (rule.regexp) {\n      excludeRules.push(new RegExp(rule.regexp, rule.flags));\n    } else if (rule.string) {\n      excludePaths[rule.string] = {};\n    }\n  });\n}\n\nconfig.on('system.log.middleware.exclude', resetExcluded);\nresetExcluded(config('system.log.middleware.exclude', []));\n\nfunction exclude(path) {\n  return excludePaths.hasOwnProperty(path) || excludeRules.some(rule => path.match(rule));\n}\n\nexport default async function(req, res, next) {\n  if (exclude(req.path)) {\n    return next();\n  }\n  if (req.method.match(/^post|put|patch|delete$/i) && config('system.log.middleware.verbosity') === 'all') {\n    let args = [Tools.preferIPv4(req.ip), req.path, req.query];\n    try {\n      let { fields, files } = await Files.parseForm(req);\n      req.formFields = fields;\n      req.formFiles = files;\n      args.push(fields);\n      Logger.info(...args);\n    } catch (err) {\n      Logger.error(err);\n    }\n    next();\n    return;\n  }\n  switch (config('system.log.middleware.verbosity')) {\n  case 'all':\n  case 'query':\n    Logger.info(Tools.preferIPv4(req.ip), req.path, req.query);\n    break;\n  case 'path':\n    Logger.info(Tools.preferIPv4(req.ip), req.path);\n    break;\n  case 'ip':\n    Logger.info(Tools.preferIPv4(req.ip));\n    break;\n  default:\n    break;\n  }\n  next();\n}\n"],"sourceRoot":"/source/"}