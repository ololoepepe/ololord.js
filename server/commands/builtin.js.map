{"version":3,"sources":["commands/builtin.js"],"names":["Renderer","IPC","Tools","PostsModel","UsersModel","formatDate","seconds","msecs","Math","floor","SECOND","days","DAY","hours","HOUR","minutes","MINUTE","pad","basic","command","handler","process","exit","options","description","translate","alias","exitCode","send","option","requestPassword","password","notHashpass","prompt","input","ips","ipList","Error","hashpass","toHashpass","addSuperuser","removeSuperuser","targets","type","name","default","message","result","markup","markupPosts","targetsFromString","join","what","timeStart","Date","list","getRouterPaths","paths","map","path","rerender","value","initialize","args","compileTemplates","reloadTemplates","uptime"],"mappings":"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","file":"builtin.js","sourcesContent":["import Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\n\nfunction formatDate(seconds) {\n  let msecs = Math.floor(seconds * Tools.SECOND);\n  let days = Math.floor(msecs / Tools.DAY);\n  let hours = Math.floor((msecs % Tools.DAY) / Tools.HOUR);\n  let minutes = Math.floor((msecs % Tools.HOUR) / Tools.MINUTE);\n  seconds = Math.floor((msecs % Tools.MINUTE) / Tools.SECOND);\n  return `${days} days ${Tools.pad(hours, 2, '0')}:${Tools.pad(minutes, 2, '0')}:${Tools.pad(seconds, 2, '0')}`;\n}\n\nexport default [{\n  basic: true,\n  command: 'quit',\n  handler: function() {\n    process.exit(0);\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Quits the application.'),\n    alias: ['exit', 'q']\n  }\n}, {\n  basic: true,\n  command: 'respawn [exitCode]',\n  handler: async function({ exitCode } = {}) {\n    await IPC.send('exit', Tools.option(exitCode, 'number', 0), true);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Respawns worker processes with the passed exit code.') }\n}, {\n  command: 'add-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let { input } = await this.prompt(Tools.translate('Enter superuser IP list (separate by spaces): '));\n    let ips = Tools.ipList(input);\n    if (typeof ips === 'string') {\n      throw new Error(ips);\n    }\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.addSuperuser(hashpass, ips);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Registers a superuser.') }\n}, {\n  command: 'remove-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.removeSuperuser(hashpass);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Unregisters a superuser.') }\n}, {\n  command: 'markup-posts [targets...]',\n  handler: async function({ targets } = {}) {\n    let result = await this.prompt({\n      type: 'confirm',\n      name: 'markup',\n      default: true,\n      message: Tools.translate('Are you sure? ')\n    });\n    if (!result.markup) {\n      return;\n    }\n    await PostsModel.markupPosts(Renderer.targetsFromString((targets || []).join(' ')));\n    //TODO: Rerender corresponding pages?\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Rerenders text of posts specified as $[1].\\n'\n      + 'If $[1] is omitted, rerenders text of all posts on all boards.\\n'\n      + 'Each target is a string in the following form:\\n'\n      + '$[2]', '', '[targets...]', '<board name>[:<post number>[:...]]')\n  }\n}, {\n  command: 'stop',\n  handler: async function() {\n    await IPC.send('stop');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Closes all workers, preventing incoming connections.') }\n}, {\n  command: 'start',\n  handler: async function() {\n    await IPC.send('start');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Opens workers for connections if closed.') }\n}, {\n  command: 'rerender [what...]',\n  handler: async function({ options, what } = {}) {\n    let timeStart = new Date();\n    let { list } = options || {};\n    if (list) {\n      let paths = await Renderer.getRouterPaths(true);\n      return paths.map((path) => {\n        return (typeof path === 'object') ? `${path.path} ${path.description}` : path;\n      }).join('\\n');\n    } else {\n      if (what) {\n        await Renderer.rerender(what);\n      } else {\n        await Renderer.rerender();\n      }\n      return `OK (${new Date() - timeStart}ms)`;\n    }\n  },\n  options: {\n    description: Tools.translate(\"Rerenders the cache.\"),\n    options: [{\n      value: '-l, --list',\n      description: Tools.translate('Only list available router paths. No rerender.')\n    }]\n  }\n}, {\n  basic: true,\n  command: 'reload-boards',\n  handler: async function() {\n    Board.initialize();\n    await IPC.send('reloadBoards');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the boards.') }\n}, {\n  basic: true,\n  command: 'reload-templates',\n  handler: async function(args) {\n    await Renderer.compileTemplates();\n    await Renderer.reloadTemplates();\n    await IPC.send('reloadTemplates');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the templates and the partials (including public ones).') }\n}, {\n  basic: true,\n  command: 'uptime',\n  handler: function() {\n    return formatDate(process.uptime());\n  },\n  options: { description: Tools.translate('Shows server uptime.') }\n}];\n"]}