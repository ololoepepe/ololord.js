{"version":3,"sources":["file-types/pdf.js"],"names":[],"mappings":";;;;;;;;sDAqBO,iBAA+B,IAA/B,EAAqC,SAArC,EAAgD,IAAhD;AAAA,QASD,SATC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACC,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,gCAAM,IAAN,UAAiB,SAAjB,CAA2B,KAA3B,EAAkC,MAAlC,CAAyC,GAAzC,EAA8C,GAA9C,EAAmD,OAAnD,CAA2D,GAA3D,EAAgE,KAAhE,CAAsE,SAAtE,EAAiF,UAAC,GAAD,EAAS;AACxF,oBAAI,GAAJ,EAAS;AACP,yBAAO,OAAO,GAAP,CAAP;AACD;AACD;AACD,eALD;AAMD,aAPK,CADD;;AAAA;AASD,qBATC,GASW,MAAM,YAAN,CAAmB,SAAnB,CATX;;AAAA,gBAUA,SAVA;AAAA;AAAA;AAAA;;AAAA,kBAWG,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,qCAAhB,EAAuD,EAAvD,EAA2D,SAA3D,CAAV,CAXH;;AAAA;AAAA,6CAaE;AACL,+BAAiB;AACf,uBAAO,UAAU,KADF;AAEf,wBAAQ,UAAU;AAFH;AADZ,aAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,e;;;;;QAhBN,K,GAAA,K;QAIA,qB,GAAA,qB;QAIA,wB,GAAA,wB;QAIA,0B,GAAA,0B;;AAjBhB;;;;AAEA;;IAAY,K;;AACZ;;IAAY,K;;;;;;;;AAEL,SAAS,KAAT,CAAe,QAAf,EAAyB;AAC9B,SAAO,MAAM,SAAN,CAAgB,QAAhB,CAAP;AACD;;AAEM,SAAS,qBAAT,CAA+B,MAA/B,EAAuC,QAAvC,EAAiD;AACtD,SAAO,UAAU,MAAV,IAAoB,sBAAsB,QAAjD;AACD;;AAEM,SAAS,wBAAT,CAAkC,QAAlC,EAA4C;AACjD,SAAQ,sBAAsB,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD;;AAEM,SAAS,0BAAT,CAAoC,QAApC,EAA8C;AACnD,SAAQ,sBAAsB,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD","file":"file-types/pdf.js","sourcesContent":["import gm from 'gm';\n\nimport * as Files from '../core/files';\nimport * as Tools from '../helpers/tools';\n\nexport function match(mimeType) {\n  return Files.isPdfType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return 'pdf' === suffix && 'application/pdf' === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'pdf' : null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'png' : null;\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  await new Promise((resolve, reject) => {\n    gm(`${path}[0]`).setFormat('png').resize(200, 200).quality(100).write(thumbPath, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  let thumbInfo = Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  return {\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n}\n"],"sourceRoot":"/source/"}