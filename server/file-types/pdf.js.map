{"version":3,"sources":["file-types/pdf.js"],"names":["file","thumbPath","path","Promise","resolve","reject","setFormat","resize","quality","write","err","thumbInfo","Files","getImageSize","Error","Tools","translate","thumbDimensions","width","height","createThumbnail","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","mimeType","isPdfType","suffix"],"mappings":";;;;;;;;uDAqBO,iBAA+BA,IAA/B,EAAqCC,SAArC,EAAgDC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,gCAAMH,IAAN,UAAiBI,SAAjB,CAA2B,KAA3B,EAAkCC,MAAlC,CAAyC,GAAzC,EAA8C,GAA9C,EAAmDC,OAAnD,CAA2D,GAA3D,EAAgEC,KAAhE,CAAsER,SAAtE,EAAiF,UAACS,GAAD,EAAS;AACxF,oBAAIA,GAAJ,EAAS;AACP,yBAAOL,OAAOK,GAAP,CAAP;AACD;AACDN;AACD,eALD;AAMD,aAPK,CADD;;AAAA;AASDO,qBATC,GASWC,MAAMC,YAAN,CAAmBZ,SAAnB,CATX;;AAAA,gBAUAU,SAVA;AAAA;AAAA;AAAA;;AAAA,kBAWG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,qCAAhB,EAAuD,EAAvD,EAA2Df,SAA3D,CAAV,CAXH;;AAAA;AAAA,6CAaE;AACLgB,+BAAiB;AACfC,uBAAOP,UAAUO,KADF;AAEfC,wBAAQR,UAAUQ;AAFH;AADZ,aAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,e;;;;;QAhBNC,K,GAAAA,K;QAIAC,qB,GAAAA,qB;QAIAC,wB,GAAAA,wB;QAIAC,0B,GAAAA,0B;;AAjBhB;;;;AAEA;;IAAYZ,K;;AACZ;;IAAYG,K;;;;;;;;AAEL,SAASM,KAAT,CAAeI,QAAf,EAAyB;AAC9B,SAAOb,MAAMc,SAAN,CAAgBD,QAAhB,CAAP;AACD;;AAEM,SAASH,qBAAT,CAA+BK,MAA/B,EAAuCF,QAAvC,EAAiD;AACtD,SAAO,UAAUE,MAAV,IAAoB,sBAAsBF,QAAjD;AACD;;AAEM,SAASF,wBAAT,CAAkCE,QAAlC,EAA4C;AACjD,SAAQ,sBAAsBA,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD;;AAEM,SAASD,0BAAT,CAAoCC,QAApC,EAA8C;AACnD,SAAQ,sBAAsBA,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD","file":"pdf.js","sourcesContent":["import gm from 'gm';\n\nimport * as Files from '../core/files';\nimport * as Tools from '../helpers/tools';\n\nexport function match(mimeType) {\n  return Files.isPdfType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return 'pdf' === suffix && 'application/pdf' === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'pdf' : null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'png' : null;\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  await new Promise((resolve, reject) => {\n    gm(`${path}[0]`).setFormat('png').resize(200, 200).quality(100).write(thumbPath, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  let thumbInfo = Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  return {\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n}\n"]}