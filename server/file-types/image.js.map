{"version":3,"sources":["file-types/image.js"],"names":[],"mappings":"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","file":"file-types/image.js","sourcesContent":["import _ from 'underscore';\nimport gm from 'gm';\nimport phash from 'phash-image';\n\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('image/gif', 'gif', 'png');\ndefineMimeTypeSuffixes('image/jpeg', ['jpeg', 'jpg']);\ndefineMimeTypeSuffixes('image/png', 'png');\n\nexport function match(mimeType) {\n  return Files.isImageType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath) {\n  let isGIF = ('image/gif' === file.mimeType);\n  let suffix = isGIF ? '[0]' : '';\n  let info = await Files.getImageSize(file.path + suffix);\n  await new Promise((resolve, reject) => {\n    let stream = gm(file.path + suffix);\n    if (isGIF) {\n      stream = stream.setFormat('png');\n    }\n    stream.resize(200, 200).quality(100).write(thumbPath, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  let thumbInfo = await Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  let result = {\n    dimensions: {\n      width: info.width,\n      height: info.height\n    },\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n  if (config('system.phash.enabled')) {\n    let hash = await phash(thumbPath, true);\n    result.ihash = hash.toString();\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  return fileInfo;\n}\n"],"sourceRoot":"/source/"}