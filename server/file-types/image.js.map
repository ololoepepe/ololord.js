{"version":3,"sources":["file-types/image.js"],"names":[],"mappings":"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","file":"file-types/image.js","sourcesContent":["import _ from 'underscore';\nimport phash from 'phash-image';\nimport promisify from 'promisify-node';\n\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nconst ImageMagick = promisify('imagemagick');\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('image/gif', 'gif');\ndefineMimeTypeSuffixes('image/jpeg', ['jpeg', 'jpg']);\ndefineMimeTypeSuffixes('image/png', 'png');\n\nexport function match(mimeType) {\n  return Files.isImageType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath) {\n  let suffix = ('image/gif' === file.mimeType) ? '[0]' : '';\n  let info = await ImageMagick.identify(file.path + suffix);\n  let args = [file.path + suffix];\n  if (info.width > 200 || info.height > 200) {\n    args.push('-resize', '200x200');\n  }\n  let prefix = ('image/gif' === file.mimeType) ? 'png:' : '';\n  args.push(prefix + thumbPath);\n  await ImageMagick.convert(args);\n  let thumbInfo = await ImageMagick.identify(thumbPath);\n  let result = {\n    dimensions: {\n      width: info.width,\n      height: info.height\n    },\n    thumbDimensions: {\n      thumbInfo: info.width,\n      thumbInfo: info.height\n    }\n  };\n  if (config('system.phash.enabled')) {\n    let hash = await phash(thumbPath, true);\n    result.ihash = hash.toString();\n  }\n  return result;\n}\n\nexport async function rerenderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  return fileInfo;\n}\n"],"sourceRoot":"/source/"}