{"version":3,"sources":["file-types/image.js"],"names":["file","thumbPath","isGIF","mimeType","suffix","Files","getImageSize","path","info","Promise","resolve","reject","stream","setFormat","resize","quality","write","err","thumbInfo","Error","Tools","translate","result","dimensions","width","height","thumbDimensions","hash","ihash","toString","createThumbnail","fileInfo","sizeText","renderPostFileInfo","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","MIME_TYPES_FOR_SUFFIXES","Map","DEFAULT_SUFFIXES_FOR_MIME_TYPES","THUMB_SUFFIXES_FOR_MIME_TYPE","defineMimeTypeSuffixes","extensions","thumbSuffix","isArray","forEach","extension","set","isImageType","get"],"mappings":"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","file":"image.js","sourcesContent":["import _ from 'underscore';\nimport gm from 'gm';\nimport phash from 'phash-image';\n\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('image/gif', 'gif', 'png');\ndefineMimeTypeSuffixes('image/jpeg', ['jpeg', 'jpg']);\ndefineMimeTypeSuffixes('image/png', 'png');\n\nexport function match(mimeType) {\n  return Files.isImageType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath) {\n  let isGIF = ('image/gif' === file.mimeType);\n  let suffix = isGIF ? '[0]' : '';\n  let info = await Files.getImageSize(file.path + suffix);\n  await new Promise((resolve, reject) => {\n    let stream = gm(file.path + suffix);\n    if (isGIF) {\n      stream = stream.setFormat('png');\n    }\n    stream.resize(200, 200).quality(100).write(thumbPath, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n  let thumbInfo = await Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  let result = {\n    dimensions: {\n      width: info.width,\n      height: info.height\n    },\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n  if (config('system.phash.enabled')) {\n    let hash = await phash(thumbPath, true);\n    result.ihash = hash.toString();\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  return fileInfo;\n}\n"]}