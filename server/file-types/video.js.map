{"version":3,"sources":["file-types/video.js"],"names":["file","thumbPath","path","Promise","resolve","reject","ffprobe","err","metadata","getDimensions","width","height","result","dimensions","duration","format","bitrate","bit_rate","extraData","durationToString","Math","floor","pngThumbPath","frames","on","save","error","stack","Files","generateRandomImage","hash","mimeType","thumbDimensions","getImageSize","thumbInfo","Error","Tools","translate","resizeImage","createThumbnail","fileInfo","sizeText","sizeTooltip","renderPostFileInfo","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","MIME_TYPES_FOR_SUFFIXES","Map","DEFAULT_SUFFIXES_FOR_MIME_TYPES","THUMB_SUFFIXES_FOR_MIME_TYPE","stream","streams","find","isNaN","option","test","w","h","hours","pad","minutes","seconds","defineMimeTypeSuffixes","extensions","thumbSuffix","isArray","forEach","extension","set","isVideoType","suffix","get"],"mappings":"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","file":"video.js","sourcesContent":["import _ from 'underscore';\nimport ffmpeg from 'fluent-ffmpeg';\n\nimport * as Files from '../core/files';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction getDimensions(metadata) {\n  let stream = _(metadata.streams).find(({ width, height }) => {\n    return (!isNaN(+width) && !isNaN(+height));\n  });\n  if (!stream) {\n    return {};\n  }\n  return {\n    width: Tools.option(stream.width, 'number', 0, { test: (w) => { return w > 0; } }),\n    height: Tools.option(stream.height, 'number', 0, { test: (h) => { return h > 0; } })\n  };\n}\n\nfunction durationToString(duration) {\n  duration = Math.floor(+duration);\n  let hours = Tools.pad(Math.floor(duration / 3600), 2, '0');\n  duration %= 3600;\n  let minutes = Tools.pad(Math.floor(duration / 60), 2, '0');\n  let seconds = Tools.pad(duration % 60, 2, '0');\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('video/mp4', 'mp4', 'png');\ndefineMimeTypeSuffixes('video/webm', 'webm', 'png');\n\nexport function match(mimeType) {\n  return Files.isVideoType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  let metadata = await new Promise((resolve, reject) => {\n    ffmpeg.ffprobe(path, (err, metadata) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(metadata);\n    });\n  });\n  let { width, height } = getDimensions(metadata);\n  let result = {};\n  if (width && height) {\n    result.dimensions = {\n      width: width,\n      height: height\n    };\n  }\n  let duration = metadata.format.duration;\n  let bitrate = +metadata.format.bit_rate;\n  result.extraData = {\n    duration: (+duration ? durationToString(duration) : duration),\n    bitrate: (bitrate ? Math.floor(bitrate / 1024) : 0)\n  };\n  try {\n    let pngThumbPath = thumbPath + '.png';\n    await new Promise((resolve, reject) => {\n      ffmpeg(path).frames(1).on('error', reject).on('end', resolve).save(pngThumbPath);\n    });\n    file.thumbPath = pngThumbPath;\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  if (thumbPath === file.thumbPath) {\n    await Files.generateRandomImage(file.hash, file.mimeType, thumbPath);\n    result.thumbDimensions = {\n      width: 200,\n      height: 200\n    };\n  } else {\n    let thumbInfo = await Files.getImageSize(file.thumbPath);\n    if (!thumbInfo) {\n      throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n    }\n    result.thumbDimensions = {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    };\n    if (result.thumbDimensions.width > 200 || result.thumbDimensions.height > 200) {\n      await Files.resizeImage(file.thumbPath, 200, 200);\n      let thumbInfo = await Files.getImageSize(file.thumbPath);\n      if (!thumbInfo) {\n        throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n      }\n      result.thumbDimensions = {\n        width: thumbInfo.width,\n        height: thumbInfo.height\n      };\n    }\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  let { duration, bitrate } = fileInfo.extraData || {};\n  if (duration) {\n    fileInfo.sizeText += `, ${duration}`;\n  }\n  if (bitrate) {\n    fileInfo.sizeTooltip = `${bitrate} ${Tools.translate('kbps')}`;\n  }\n}\n"]}