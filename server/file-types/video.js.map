{"version":3,"sources":["file-types/video.js"],"names":[],"mappings":"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","file":"file-types/video.js","sourcesContent":["import _ from 'underscore';\nimport ffmpeg from 'fluent-ffmpeg';\nimport promisify from 'promisify-node';\n\nimport * as Files from '../core/files';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction durationToString(duration) {\n  duration = Math.floor(+duration);\n  let hours = Tools.pad(Math.floor(duration / 3600), 2, '0');\n  duration %= 3600;\n  let minutes = Tools.pad(Math.floor(duration / 60), 2, '0');\n  let seconds = Tools.pad(duration % 60, 2, '0');\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('video/mp4', 'mp4', 'png');\ndefineMimeTypeSuffixes('video/webm', 'webm', 'png');\n\nexport function match(mimeType) {\n  return Files.isVideoType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  let metadata = await new Promise((resolve, reject) => {\n    ffmpeg.ffprobe(path, (err, metadata) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(metadata);\n    });\n  });\n  let width = Tools.option(metadata.streams[0].width, 'number', 0, { test: (w) => { return w > 0; } });\n  let height = Tools.option(metadata.streams[0].height, 'number', 0, { test: (h) => { return h > 0; } });\n  let result = {};\n  if (width && height) {\n    result.dimensions = {\n      width: width,\n      height: height\n    };\n  }\n  let duration = metadata.format.duration;\n  let bitrate = +metadata.format.bit_rate;\n  result.extraData = {\n    duration: (+duration ? durationToString(duration) : duration),\n    bitrate: (bitrate ? Math.floor(bitrate / 1024) : 0)\n  };\n  try {\n    let pngThumbPath = thumbPath + '.png';\n    await new Promise((resolve, reject) => {\n      ffmpeg(path).frames(1).on('error', reject).on('end', resolve).save(pngThumbPath);\n    });\n    file.thumbPath = pngThumbPath;\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  if (thumbPath === file.thumbPath) {\n    await Files.generateRandomImage(file.hash, file.mimeType, thumbPath);\n    result.thumbDimensions = {\n      width: 200,\n      height: 200\n    };\n  } else {\n    let thumbInfo = await Files.getImageSize(file.thumbPath);\n    if (!thumbInfo) {\n      throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n    }\n    result.thumbDimensions = {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    };\n    if (result.thumbDimensions.width > 200 || result.thumbDimensions.height > 200) {\n      await Files.resizeImage(file.thumbPath, 200, 200);\n      let thumbInfo = await Files.getImageSize(file.thumbPath);\n      if (!thumbInfo) {\n        throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n      }\n      result.thumbDimensions = {\n        width: thumbInfo.width,\n        height: thumbInfo.height\n      };\n    }\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  let { duration, bitrate } = fileInfo.extraData || {};\n  if (duration) {\n    fileInfo.sizeText += `, ${duration}`;\n  }\n  if (bitrate) {\n    fileInfo.sizeTooltip = `${bitrate} ${Tools.translate('kbps')}`;\n  }\n}\n"],"sourceRoot":"/source/"}