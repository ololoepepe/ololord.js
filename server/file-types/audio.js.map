{"version":3,"sources":["file-types/audio.js"],"names":["file","thumbPath","path","Promise","resolve","reject","ffprobe","err","metadata","duration","format","bitrate","bit_rate","extraData","durationToString","Math","floor","musicMetadata","createReadStream","error","stack","album","artist","length","title","year","picture","write","data","Files","generateRandomImage","hash","mimeType","getImageSize","thumbInfo","width","height","resizeImage","Error","Tools","translate","thumbDimensions","createThumbnail","fileInfo","sizeText","sizeTooltip","renderPostFileInfo","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","MIME_TYPES_FOR_SUFFIXES","Map","DEFAULT_SUFFIXES_FOR_MIME_TYPES","THUMB_SUFFIXES_FOR_MIME_TYPE","defineMimeTypeSuffixes","extensions","thumbSuffix","isArray","forEach","extension","set","AUDIO_TAGS","hours","pad","minutes","seconds","isAudioType","suffix","get"],"mappings":"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","file":"audio.js","sourcesContent":["import _ from 'underscore';\nimport ffmpeg from 'fluent-ffmpeg';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\nimport promisify from 'promisify-node';\n\nimport * as Files from '../core/files';\nimport * as Tools from '../helpers/tools';\nimport Logger from '../helpers/logger';\n\nconst musicMetadata = promisify('musicmetadata');\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('application/ogg', 'ogg', 'png');\ndefineMimeTypeSuffixes('audio/mpeg', ['mpeg', 'mp1', 'm1a', 'mp3', 'm2a', 'mpa', 'mpg'], 'png');\ndefineMimeTypeSuffixes('audio/ogg', 'ogg', 'png');\ndefineMimeTypeSuffixes('audio/wav', 'wav', 'png');\n\nexport const AUDIO_TAGS = ['album', 'artist', 'title', 'year'];\n\nfunction durationToString(duration) {\n  duration = Math.floor(+duration);\n  let hours = Tools.pad(Math.floor(duration / 3600), 2, '0');\n  duration %= 3600;\n  let minutes = Tools.pad(Math.floor(duration / 60), 2, '0');\n  let seconds = Tools.pad(duration % 60, 2, '0');\n  return `${hours}:${minutes}:${seconds}`;\n}\n\nexport function match(mimeType) {\n  return Files.isAudioType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  let metadata = await new Promise((resolve, reject) => {\n    ffmpeg.ffprobe(path, (err, metadata) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(metadata);\n    });\n  });\n  let duration = metadata.format.duration;\n  let bitrate = +metadata.format.bit_rate;\n  let extraData = {\n    duration: (+duration ? durationToString(duration) : duration),\n    bitrate: (bitrate ? Math.floor(bitrate / 1024) : 0)\n  };\n  try {\n    metadata = await musicMetadata(FSSync.createReadStream(path));\n  } catch (err) {\n    Logger.error(err.stack || err);\n    metadata = {};\n  }\n  extraData.album = metadata.album || '';\n  extraData.artist = (metadata.artist && metadata.artist.length > 0) ? metadata.artist[0] : '';\n  extraData.title = metadata.title || '';\n  extraData.year = metadata.year || '';\n  if (metadata.picture && metadata.picture.length > 0) {\n    await FS.write(thumbPath, metadata.picture[0].data);\n  } else {\n    await Files.generateRandomImage(file.hash, file.mimeType, thumbPath);\n  }\n  let thumbInfo = await Files.getImageSize(thumbPath);\n  if (thumbInfo && (thumbInfo.width > 200 || thumbInfo.height > 200)) {\n    await Files.resizeImage(thumbPath, 200, 200);\n    thumbInfo = await Files.getImageSize(thumbPath);\n  }\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  return {\n    extraData: extraData,\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  let { duration, bitrate, album, artist, title, year } = fileInfo.extraData || {};\n  if (duration) {\n    fileInfo.sizeText += `, ${duration}`;\n  }\n  if (bitrate) {\n    fileInfo.sizeText += `, ${bitrate} ${Tools.translate('kbps')}`;\n  }\n  fileInfo.sizeTooltip = artist ? artist : Tools.translate('Unknown artist');\n  fileInfo.sizeTooltip += ' - ';\n  fileInfo.sizeTooltip += title ? title : Tools.translate('Unknown title');\n  fileInfo.sizeTooltip += ' [';\n  fileInfo.sizeTooltip += album ? album : Tools.translate('Unknown album');\n  fileInfo.sizeTooltip += ']';\n  if (year) {\n    fileInfo.sizeTooltip += ` (${year})`;\n  }\n}\n"]}