{"version":3,"sources":["storage/mongodb-client-factory.js"],"names":[],"mappings":";;;;;;;;kBA0Le,YAAW;AACxB,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,IAAI,aAAJ,EAAT;AACD;AACD,SAAO,MAAP;AACD,C;;AA/LD;;;;AACA;;;;AACA;;AAEA;;;;AACA;;IAAY,K;;;;;;;;;;AAEZ,IAAM,aAAgB,SAAhB,gCAAN;AACA,IAAM,UAAU,0BAAE,CAAC,UAAD,EAAgB,UAAhB,cAAqC,GAArC,CAAyC,UAAC,IAAD,EAAU;AACnE,SAAO,aAAO,WAAP,CAAmB,IAAnB,EAAyB,GAAzB,CAA6B;AAAA,WAAY,IAAZ,SAAoB,KAApB;AAAA,GAA7B,EAA0D,MAA1D,CAAiE,UAAC,KAAD,EAAW;AACjF,WAAQ,MAAM,KAAN,CAAY,GAAZ,EAAiB,KAAjB,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,MAAkC,MAAnC,IAA8C,aAAO,QAAP,CAAgB,KAAhB,EAAuB,MAAvB,EAArD;AACD,GAFM,CAAP;AAGD,CAJiB,CAAF,EAIZ,OAJY,GAIF,GAJE,CAIE,UAAC,IAAD,EAAU;AAC1B,MAAI;AACF,QAAI,OAAO,QAAQ,IAAR,CAAX;AACA,WAAO;AACL,sBAAgB,KAAK,cAAL,IAAuB,KAAK,KAAL,CAAW,GAAX,EAAgB,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6B,IAA7B,CAAkC,GAAlC,CADlC;AAEL,eAAS,KAAK;AAFT,KAAP;AAID,GAND,CAME,OAAO,GAAP,EAAY;AACZ,YAAQ,GAAR,CAAY,GAAZ;AACD;AACF,CAde,EAcb,MAda,CAcN;AAAA,SAAS,CAAC,CAAC,KAAX;AAAA,CAdM,EAcY,MAdZ,CAcmB,UAAC,GAAD,EAAM,KAAN,EAAgB;AACjD,MAAI,UAAU,IAAI,MAAM,cAAV,CAAd;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,cAAU,EAAV;AACD;AACD,4BAAE,MAAM,OAAR,EAAiB,IAAjB,CAAsB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACrC,YAAQ,IAAR,IAAgB,KAAhB;AACD,GAFD;AAGA,MAAI,MAAM,cAAV,IAA4B,OAA5B;AACA,SAAO,GAAP;AACD,CAxBe,EAwBb,EAxBa,CAAhB;;AA0BA,IAAI,SAAS,IAAb;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,OAA3B,EAAoC;AAClC,QAAM,OAAO,sBAAO,oBAAP,CAAb;AACA,YAAU,WAAW,EAAE,iBAAiB,uDAAnB,EAArB;AACA,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,yBAAY,OAAZ,CAAoB,GAApB,EAAyB,OAAzB,EAAkC,UAAC,GAAD,EAAM,EAAN,EAAa;AAC7C,UAAI,GAAJ,EAAS;AACP,eAAO,GAAP;AACA;AACD;AACD,cAAQ,EAAR;AACD,KAND;AAOD,GARM,CAAP;AASD;;IAEK,a;AACJ,2BAAc;;;AAAA;AAEb;;;;;;;;0CAEgB,I;AAAA,c;;;;;;;;uBACT,KAAK,gBAAL,E;;;;uBACO,oBAAK,GAAL,CAAS,OAAT,EAAiB,IAAjB,qBAAsB,KAAK,GAA3B,SAAmC,IAAnC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGA,I;AAAA,c;;;;;;;;uBACP,KAAK,gBAAL,E;;;;uBACO,kBAAK,GAAL,CAAS,KAAT,EAAe,IAAf,mBAAoB,KAAK,GAAzB,SAAiC,IAAjC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGO,I;AAAA,c;;;;;;;;uBACd,KAAK,gBAAL,E;;;;uBACO,yBAAK,GAAL,CAAS,YAAT,EAAsB,IAAtB,0BAA2B,KAAK,GAAhC,SAAwC,IAAxC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGA,I;AAAA,c;;;;;;;;uBACP,KAAK,gBAAL,E;;;;uBACO,kBAAK,GAAL,CAAS,KAAT,EAAe,IAAf,mBAAoB,KAAK,GAAzB,SAAiC,IAAjC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGK,I;AAAA,c;;;;;;;;uBACZ,KAAK,gBAAL,E;;;;uBACO,uBAAK,GAAL,CAAS,UAAT,EAAoB,IAApB,wBAAyB,KAAK,GAA9B,SAAsC,IAAtC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGM,I;AAAA,c;;;;;;;;uBACb,KAAK,gBAAL,E;;;;uBACO,wBAAK,GAAL,CAAS,WAAT,EAAqB,IAArB,yBAA0B,KAAK,GAA/B,SAAuC,IAAvC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGE,I;AAAA,c;;;;;;;;uBACT,KAAK,gBAAL,E;;;;uBACO,oBAAK,GAAL,CAAS,OAAT,EAAiB,IAAjB,qBAAsB,KAAK,GAA3B,SAAmC,IAAnC,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGW,I;AAAA,c;;;;;;;;uBAClB,KAAK,gBAAL,E;;;;uBACO,6BAAK,GAAL,CAAS,gBAAT,EAA0B,IAA1B,8BAA+B,KAAK,GAApC,SAA4C,IAA5C,E;;;;;;;;;;;;;;;;;;;;;;;;;2CAGM,I;AAAA,c;;;;;;;;uBACb,KAAK,gBAAL,E;;;;uBACO,wBAAK,GAAL,CAAS,WAAT,EAAqB,IAArB,yBAA0B,KAAK,GAA/B,SAAuC,IAAvC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGH,I;AAAA,c;;;;;;;;uBACJ,KAAK,gBAAL,E;;;;uBACO,eAAK,GAAL,CAAS,EAAT,EAAY,IAAZ,gBAAiB,KAAK,GAAtB,SAA8B,IAA9B,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGS,I;AAAA,c;;;;;;;;uBAChB,KAAK,gBAAL,E;;;;uBACO,2BAAK,GAAL,CAAS,cAAT,EAAwB,IAAxB,4BAA6B,KAAK,GAAlC,SAA0C,IAA1C,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGO,I;AAAA,c;;;;;;;;uBACd,KAAK,gBAAL,E;;;;uBACO,yBAAK,GAAL,CAAS,YAAT,EAAsB,IAAtB,0BAA2B,KAAK,GAAhC,SAAwC,IAAxC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGgB,I;AAAA,c;;;;;;;;uBACvB,KAAK,gBAAL,E;;;;uBACO,8BAAK,GAAL,CAAS,qBAAT,EAA+B,IAA/B,+BAAoC,KAAK,GAAzC,SAAiD,IAAjD,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGW,I;AAAA,c;;;;;;;;uBAClB,KAAK,gBAAL,E;;;;uBACO,6BAAK,GAAL,CAAS,gBAAT,EAA0B,IAA1B,8BAA+B,KAAK,GAApC,SAA4C,IAA5C,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGU,I;AAAA,c;;;;;;;;uBACjB,KAAK,gBAAL,E;;;;uBACO,4BAAK,GAAL,CAAS,eAAT,EAAyB,IAAzB,6BAA8B,KAAK,GAAnC,SAA2C,IAA3C,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGC,I;AAAA,c;;;;;;;;uBACR,KAAK,gBAAL,E;;;;uBACO,mBAAK,GAAL,CAAS,MAAT,EAAgB,IAAhB,oBAAqB,KAAK,GAA1B,SAAkC,IAAlC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGD,I;AAAA,c;;;;;;;;uBACN,KAAK,gBAAL,E;;;;uBACO,iBAAK,GAAL,CAAS,IAAT,EAAc,IAAd,kBAAmB,KAAK,GAAxB,SAAgC,IAAhC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGK,I;AAAA,c;;;;;;;;uBACZ,KAAK,gBAAL,E;;;;uBACO,uBAAK,GAAL,CAAS,UAAT,EAAoB,IAApB,wBAAyB,KAAK,GAA9B,SAAsC,IAAtC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGW,I;AAAA,c;;;;;;;;uBAClB,KAAK,gBAAL,E;;;;uBACO,6BAAK,GAAL,CAAS,gBAAT,EAA0B,IAA1B,8BAA+B,KAAK,GAApC,SAA4C,IAA5C,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGA,I;AAAA,c;;;;;;;;uBACP,KAAK,gBAAL,E;;;;uBACO,kBAAK,GAAL,CAAS,KAAT,EAAe,IAAf,mBAAoB,KAAK,GAAzB,SAAiC,IAAjC,E;;;;;;;;;;;;;;;;;;;;;;;;;4CAGA,I;AAAA,c;;;;;;;;uBACP,KAAK,gBAAL,E;;;;uBACO,kBAAK,GAAL,CAAS,KAAT,EAAe,IAAf,mBAAoB,KAAK,GAAzB,SAAiC,IAAjC,E;;;;;;;;;;;;;;;;;;;;;;;yEAGiC,E;;YAA1B,Y,QAAA,Y;YAAc,O,QAAA,O;YAE9B,E;;;;;;uBADE,KAAK,gBAAL,E;;;AACF,kB,GAAK,KAAK,G;;uBACR,MAAM,MAAN,CAAa,OAAb;AAAA,sEAAsB,mBAAe,OAAf,EAAwB,cAAxB;AAAA,wBACtB,UADsB;AAAA;AAAA;AAAA;AAAA;AACtB,sCADsB,GACT,GAAG,UAAH,CAAc,cAAd,CADS;;AAAA,iCAEtB,OAFsB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAGlB,WAAW,WAAX,EAHkB;;AAAA;AAAA,+DAKnB,MAAM,MAAN,CAAa,OAAb;AAAA,kFAAsB,0BAAwC,IAAxC;AAAA,oCAAiB,KAAjB,SAAiB,KAAjB;AAAA,0DAAwB,OAAxB;AAAA,oCAAwB,OAAxB,iCAAkC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACvB,gBAAgB,CAAC,OADM;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEnB,WAAW,SAAX,CAAqB,IAArB,CAFmB;;AAAA;AAI3B,gDAAQ,IAAR,GAAe,IAAf;AAJ2B;AAAA,+CAKd,WAAW,WAAX,CAAuB,KAAvB,EAA8B,OAA9B,CALc;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAtB;;AAAA;AAAA;AAAA;AAAA,gCALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAtB;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;;;;;;;;;;;;;;;;;;oBAgBD,KAAK,G;;;;;AACR,wBAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,sCAAhB,CAAZ;;uBACiB,c;;;AAAjB,qBAAK,G","file":"storage/mongodb-client-factory.js","sourcesContent":["import _ from 'underscore';\nimport FSSync from 'fs';\nimport { MongoClient } from 'mongodb';\n\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nconst INDEX_PATH = `${__dirname}/../../misc/mongodb/indexes`;\nconst INDEXES = _([INDEX_PATH, `${INDEX_PATH}/custom`].map((path) => {\n  return FSSync.readdirSync(path).map(entry => `${path}/${entry}`).filter((entry) => {\n    return (entry.split('.').slice(-1)[0] === 'json') && FSSync.statSync(entry).isFile();\n  });\n})).flatten().map((file) => {\n  try {\n    let json = require(file);\n    return {\n      collectionName: json.collectionName || file.split('.').slice(0, -1).join('.'),\n      indexes: json.indexes\n    };\n  } catch (err) {\n    console.log(err);\n  }\n}).filter(index => !!index).reduce((acc, index) => {\n  let indexes = acc[index.collectionName];\n  if (!indexes) {\n    indexes = {};\n  }\n  _(index.indexes).each((index, name) => {\n    indexes[name] = index;\n  });\n  acc[index.collectionName] = indexes;\n  return acc;\n}, {});\n\nlet client = null;\n\nfunction createClient(url, options) {\n  url = url || config('system.mongodb.url');\n  options = options || { uri_decode_auth: config(`system.mongodb.uri_decode_auth`) };\n  return new Promise((resolve, reject) => {\n    MongoClient.connect(url, options, (err, db) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(db);\n    });\n  });\n}\n\nclass MongoDBClient {\n  constructor() {\n    //\n  }\n\n  async addUser(...args) {\n    await this.waitForConnected();\n    return await this._db.addUser.call(this._db, ...args);\n  }\n\n  async admin(...args) {\n    await this.waitForConnected();\n    return await this._db.admin.call(this._db, ...args);\n  }\n\n  async authenticate(...args) {\n    await this.waitForConnected();\n    return await this._db.authenticate.call(this._db, ...args);\n  }\n\n  async close(...args) {\n    await this.waitForConnected();\n    return await this._db.close.call(this._db, ...args);\n  }\n\n  async collection(...args) {\n    await this.waitForConnected();\n    return await this._db.collection.call(this._db, ...args);\n  }\n\n  async collections(...args) {\n    await this.waitForConnected();\n    return await this._db.collections.call(this._db, ...args);\n  }\n\n  async command(...args) {\n    await this.waitForConnected();\n    return await this._db.command.call(this._db, ...args);\n  }\n\n  async createCollection(...args) {\n    await this.waitForConnected();\n    return await this._db.createCollection.call(this._db, ...args);\n  }\n\n  async createIndex(...args) {\n    await this.waitForConnected();\n    return await this._db.createIndex.call(this._db, ...args);\n  }\n\n  async db(...args) {\n    await this.waitForConnected();\n    return await this._db.db.call(this._db, ...args);\n  }\n\n  async dropCollection(...args) {\n    await this.waitForConnected();\n    return await this._db.dropCollection.call(this._db, ...args);\n  }\n\n  async dropDatabase(...args) {\n    await this.waitForConnected();\n    return await this._db.dropDatabase.call(this._db, ...args);\n  }\n\n  async executeDbAdminCommand(...args) {\n    await this.waitForConnected();\n    return await this._db.executeDbAdminCommand.call(this._db, ...args);\n  }\n\n  async indexInformation(...args) {\n    await this.waitForConnected();\n    return await this._db.indexInformation.call(this._db, ...args);\n  }\n\n  async listCollections(...args) {\n    await this.waitForConnected();\n    return await this._db.listCollections.call(this._db, ...args);\n  }\n\n  async logout(...args) {\n    await this.waitForConnected();\n    return await this._db.logout.call(this._db, ...args);\n  }\n\n  async open(...args) {\n    await this.waitForConnected();\n    return await this._db.open.call(this._db, ...args);\n  }\n\n  async removeUser(...args) {\n    await this.waitForConnected();\n    return await this._db.removeUser.call(this._db, ...args);\n  }\n\n  async renameCollection(...args) {\n    await this.waitForConnected();\n    return await this._db.renameCollection.call(this._db, ...args);\n  }\n\n  async stats(...args) {\n    await this.waitForConnected();\n    return await this._db.stats.call(this._db, ...args);\n  }\n\n  async unref(...args) {\n    await this.waitForConnected();\n    return await this._db.unref.call(this._db, ...args);\n  }\n\n  async createIndexes({ dropExisting, dropAll } = {}) {\n    await this.waitForConnected();\n    let db = this._db;\n    await Tools.series(INDEXES, async function(indexes, collectionName) {\n      let collection = db.collection(collectionName);\n      if (dropAll) {\n        await collection.dropIndexes();\n      }\n      return Tools.series(indexes, async function({ index, options = {} }, name) {\n        if (dropExisting && !dropAll) {\n          await collection.dropIndex(name);\n        }\n        options.name = name;\n        return await collection.createIndex(index, options);\n      });\n    });\n  }\n\n  async waitForConnected() {\n    if (!this._db) {\n      console.log(Tools.translate('Connecting to MongoDB, please, wait…'));\n      this._db = await createClient();\n    }\n  }\n}\n\nexport default function() {\n  if (!client) {\n    client = new MongoDBClient();\n  }\n  return client;\n}\n"],"sourceRoot":"/source/"}