{"version":3,"sources":["storage/sql-adapter.js"],"names":["Tools","SQLAdapter","client","_wrapper","key","expectedType","create","type","t","Error","run","get","result","query","split","join","all","results","map","name","transaction","commit","rollback","warn","translate","_checkType","value","data","isNaN","id","ids","q","reduce","acc","res","items","self","series","chunk","count","option","test","c","lb","ub"],"mappings":"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","file":"sql-adapter.js","sourcesContent":["import SQLiteDatabaseWrapper from './sqlite-database-wrapper';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nexport default class SQLAdapter {\n  constructor(client) {\n    this._wrapper = new SQLiteDatabaseWrapper(client, this);\n  }\n\n  async _checkType(key, expectedType, create) {\n    let t = await this.type(key);\n    if (create) {\n      if (expectedType !== t && 'none' !== t) {\n        throw new Error('Operation against a key holding the wrong kind of value');\n      }\n      if ('none' === t) {\n        await this._wrapper.run(`INSERT INTO _ololord_metadata (name, type) VALUES (?, ?)`, key, expectedType);\n        switch (expectedType) {\n        case 'hash':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (id TEXT PRIMARY KEY NOT NULL, value TEXT)`);\n          break;\n        case 'list':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT)`);\n          break;\n        case 'set':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT PRIMARY KEY NOT NULL)`);\n          break;\n        case 'zset':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT PRIMARY KEY, score INTEGER)`);\n          break;\n        default:\n          break;\n        }\n      }\n    } else {\n      if ('none' === t) {\n        return null;\n      } else if (expectedType !== t) {\n        throw new Error('Operation against a key holding the wrong kind of value');\n      }\n    }\n    return true;\n  }\n\n  async type(key) {\n    let result = await this._wrapper.get(`SELECT type FROM _ololord_metadata WHERE name = ?`, key);\n    return result ? result.type : 'none';\n  }\n\n  async exists(key) {\n    let t = await this.type(key);\n    return 'none' !== t;\n  }\n\n  async keys(query) {\n    //TODO: improve replacing, handle unsupported symbols\n    query = query.split('*').join('%').split('?').join('_');\n    let results = await this._wrapper.all(`SELECT name FROM _ololord_metadata WHERE name LIKE ?`, query);\n    return (results || []).map(result => result.name);\n  }\n\n  async del(key) {\n    await this._wrapper.transaction(async function(commit, rollback) {\n      let t = await this.type(key);\n      if ('none' === t) {\n        commit(0);\n      } else {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        if ('string' === t) {\n          await this._wrapper.run(`DELETE FROM _ololord_keys WHERE key = ?`, key);\n        } else {\n          await this._wrapper.run(`DROP TABLE \"${key}\"`);\n        }\n        commit(1);\n      }\n    });\n  }\n\n  async expire(key) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async get(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'string');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM _ololord_keys WHERE key = ?`, key);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async set(key, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'string', true);\n      await this._wrapper.run(`UPDATE _ololord_keys SET value = ? WHERE key = ?`, data, key);\n      await this._wrapper.run(`INSERT OR IGNORE INTO _ololord_keys (key, value) VALUES (?, ?)`, key, data);\n      commit();\n    });\n  }\n\n  async incrby(key, value) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'string', true);\n      let result = await this._wrapper.get(`SELECT value FROM _ololord_keys WHERE key = ?`, key);\n      result = result || {};\n      if (result.value && isNaN(+result.value)) {\n        throw new Error('value is not an integer');\n      }\n      if (result.value) {\n        result.value = +result.value + +value;\n      } else {\n        result.value = +value;\n      }\n      await this._wrapper.run(`UPDATE _ololord_keys SET value = ? WHERE key = ?`, result.value, key);\n      await this._wrapper.run(`INSERT OR IGNORE INTO _ololord_keys (key, value) VALUES (?, ?)`, key, result.value);\n      commit(result.value);\n    });\n  }\n\n  async hget(key, id) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async hmget(key, ...ids) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      let q = `SELECT id, value FROM \"${key}\" WHERE id IN (${ids.map(_1 => '?').join(', ')})`;\n      let results = await this._wrapper.all(q, ...ids);\n      results = (results || []).reduce((acc, res) => {\n        acc[res.id] = res.value;\n        return acc;\n      }, {});\n      commit(ids.map((id) => {\n        let res = results[id];\n        return (typeof res !== 'undefined') ? res : null;\n      }));\n    });\n  }\n\n  async hgetall(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      let results = await this._wrapper.all(`SELECT id, value FROM \"${key}\"`);\n      commit((results || []).reduce((acc, res) => {\n        acc[res.id] = (typeof res.value !== 'undefined') ? res.value : null;\n        return acc;\n      }, {}));\n    });\n  }\n\n  async hexists(key, id) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      commit((typeof result.id !== 'undefined') ? 1 : 0);\n    });\n  }\n\n  async hset(key, id, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let result = await this._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n      await this._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, data, id);\n      await this._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, id, data);\n      result = result || {};\n      commit(result.id ? 0 : 1);\n    });\n  }\n\n  async hmset(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let self = this;\n      await Tools.series(Tools.chunk(items, 2), async function(chunk) {\n        await self._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, chunk[1], chunk[0]);\n        await self._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, chunk[0], chunk[1]);\n      });\n      commit();\n    });\n  }\n\n  async hincrby(key, id, value) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let result = await this._wrapper.get(`SELECT id, value FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      if (result.id && isNaN(+result.value)) {\n        throw new Error('hash value is not an integer');\n      }\n      if (result.id) {\n        result.value = +result.value + +value;\n      } else {\n        result.value = +value;\n      }\n      await this._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, result.value, id);\n      await this._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, id, result.value);\n      commit(result.value);\n    });\n  }\n\n  async hdel(key, ...ids) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      let self = this;\n      let count = 0;\n      await Tools.series(ids, async function(id) {\n        let result = await self._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n        await self._wrapper.run(`DELETE FROM \"${key}\" WHERE id = ?`, id);\n        result = result || {};\n        if (result.id) {\n          ++count;\n        }\n      });\n      result = await this._wrapper.get(`SELECT count(id) FROM \"${key}\"`);\n      result = result || {};\n      if (Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        await this._wrapper.run(`DROP TABLE \"${key}\"`);\n      }\n      commit(count);\n    });\n  }\n\n  async hkeys(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback([]);\n      }\n      let results = await this._wrapper.all(`SELECT id FROM \"${key}\"`);\n      commit((results || []).map(res => res.id));\n    });\n  }\n\n  async hlen(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT count(id) FROM \"${key}\"`);\n      result = result || {};\n      commit(Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async srandmember(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM \"${key}\" LIMIT 1`);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async smembers(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback([]);\n      }\n      let results = await this._wrapper.all(`SELECT value FROM \"${key}\"`);\n      commit(results.map((res) => { return (typeof res.value !== 'undefined') ? res.value : null; }));\n    });\n  }\n\n  async sismember(key, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      let results = await this._wrapper.all(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n      commit(Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async sadd(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'set', true);\n      let self = this;\n      let count = 0;\n      await Tools.series(items, async function(data) {\n        let result = await self._wrapper.get(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n        result = result || {};\n        if (Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n          await self._wrapper.run(`INSERT INTO \"${key}\" (value) VALUES (?)`, data);\n          ++count;\n        }\n      });\n      commit(count);\n    });\n  }\n\n  async srem(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      let self = this;\n      let count = 0;\n      await Tools.series(ids, async function(data) {\n        let result = await self._wrapper.get(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n        await self._wrapper.run(`DELETE FROM \"${key}\" WHERE value = ?`, data);\n        result = result || {};\n        if (Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }) >= 0) {\n          ++count;\n        }\n      });\n      result = await this._wrapper.get(`SELECT count(value) FROM \"${key}\"`);\n      result = result || {};\n      if (Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        await this._wrapper.run(`DROP TABLE \"${key}\"`);\n      }\n      commit(count);\n    });\n  }\n\n  async scard(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT count(value) FROM \"${key}\"`);\n      result = result || {};\n      commit(Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async zrange(key, lb, ub) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zrangebyscroe(key, lb, ub) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zadd(key, ...items) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zrem(key, ...items) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zcard(key) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n}\n"]}