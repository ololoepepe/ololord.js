{"version":3,"sources":["storage/sql-adapter.js"],"names":[],"mappings":"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","file":"storage/sql-adapter.js","sourcesContent":["import SQLiteDatabaseWrapper from './sqlite-database-wrapper';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nexport default class SQLAdapter {\n  constructor(client) {\n    this._wrapper = new SQLiteDatabaseWrapper(client, this);\n  }\n\n  async _checkType(key, expectedType, create) {\n    let t = await this.type(key);\n    if (create) {\n      if (expectedType !== t && 'none' !== t) {\n        throw new Error('Operation against a key holding the wrong kind of value');\n      }\n      if ('none' === t) {\n        await this._wrapper.run(`INSERT INTO _ololord_metadata (name, type) VALUES (?, ?)`, key, expectedType);\n        switch (expectedType) {\n        case 'hash':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (id TEXT PRIMARY KEY NOT NULL, value TEXT)`);\n          break;\n        case 'list':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT)`);\n          break;\n        case 'set':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT PRIMARY KEY NOT NULL)`);\n          break;\n        case 'zset':\n          await this._wrapper.run(`CREATE TABLE IF NOT EXISTS \"${key}\" (value TEXT PRIMARY KEY, score INTEGER)`);\n          break;\n        default:\n          break;\n        }\n      }\n    } else {\n      if ('none' === t) {\n        return null;\n      } else if (expectedType !== t) {\n        throw new Error('Operation against a key holding the wrong kind of value');\n      }\n    }\n    return true;\n  }\n\n  async type(key) {\n    let result = await this._wrapper.get(`SELECT type FROM _ololord_metadata WHERE name = ?`, key);\n    return result ? result.type : 'none';\n  }\n\n  async exists(key) {\n    let t = await this.type(key);\n    return 'none' !== type;\n  }\n\n  async keys(query) {\n    //TODO: improve replacing, handle unsupported symbols\n    query = query.split('*').join('%').split('?').join('_');\n    let results = await this._wrapper.all(`SELECT name FROM _ololord_metadata WHERE name LIKE ?`, query);\n    return (results || []).map(result => result.name);\n  }\n\n  async delete(key) {\n    await this._wrapper.transaction(async function(commit, rollback) {\n      let t = await this.type(key);\n      if ('none' === t) {\n        commit(0);\n      } else {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        if ('string' === t) {\n          await this._wrapper.run(`DELETE FROM _ololord_keys WHERE key = ?`, key);\n        } else {\n          await this._wrapper.run(`DROP TABLE \"${key}\"`);\n        }\n        commit(1);\n      }\n    });\n  }\n\n  async expire(key) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async get(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'string');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM _ololord_keys WHERE key = ?`, key);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async set(key, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'string', true);\n      await this._wrapper.run(`UPDATE _ololord_keys SET value = ? WHERE key = ?`, data, key);\n      await this._wrapper.run(`INSERT OR IGNORE INTO _ololord_keys (key, value) VALUES (?, ?)`, key, data);\n      commit();\n    });\n  }\n\n  async incrby(key, value) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'string', true);\n      let result = await this._wrapper.get(`SELECT value FROM _ololord_keys WHERE key = ?`, key);\n      result = result || {};\n      if (result.value && isNaN(+result.value)) {\n        throw new Error('value is not an integer');\n      }\n      if (result.value) {\n        result.value = +result.value + +value;\n      } else {\n        result.value = +value;\n      }\n      await this._wrapper.run(`UPDATE _ololord_keys SET value = ? WHERE key = ?`, result.value, key);\n      await this._wrapper.run(`INSERT OR IGNORE INTO _ololord_keys (key, value) VALUES (?, ?)`, key, result.value);\n      commit(result.value);\n    });\n  }\n\n  async hget(key, id) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async hmget(key, ...ids) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      let q = `SELECT id, value FROM \"${key}\" WHERE id IN (${ids.map(_1 => '?').join(', ')})`;\n      let results = await this._wrapper.all(q, ...ids);\n      results = (results || []).reduce((acc, res) => {\n        acc[res.id] = res.value;\n        return acc;\n      }, {});\n      commit(ids.map((id) => {\n        let res = results[id];\n        return (typeof res !== 'undefined') ? res : null;\n      }));\n    });\n  }\n\n  async hgetall(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(result);\n      }\n      let results = await this._wrapper.all(`SELECT id, value FROM \"${key}\"`);\n      commit((results || []).reduce((acc, res) => {\n        acc[res.id] = (typeof res.value !== 'undefined') ? res.value : null;\n        return acc;\n      }, {}));\n    });\n  }\n\n  async hexists(key, id) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      commit((typeof result.id !== 'undefined') ? 1 : 0);\n    });\n  }\n\n  async hset(key, id, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let result = await this._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n      await this._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, data, id);\n      await this._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, id, data);\n      result = result || {};\n      commit(result.id ? 0 : 1);\n    });\n  }\n\n  async hmset(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let self = this;\n      await Tools.series(Tools.chunk(items, 2), async function(chunk) {\n        await self._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, chunk[1], chunk[0]);\n        await self._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, chunk[0], chunk[1]);\n      });\n      commit();\n    });\n  }\n\n  async hincrby(key, id, value) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'hash', true);\n      let result = await this._wrapper.get(`SELECT id, value FROM \"${key}\" WHERE id = ?`, id);\n      result = result || {};\n      if (result.id && isNaN(+result.value)) {\n        throw new Error('hash value is not an integer');\n      }\n      if (result.id) {\n        result.value = +result.value + +value;\n      } else {\n        result.value = +value;\n      }\n      await this._wrapper.run(`UPDATE \"${key}\" SET value = ? WHERE id = ?`, result.value, id);\n      await this._wrapper.run(`INSERT OR IGNORE INTO \"${key}\" (id, value) VALUES (?, ?)`, id, result.value);\n      commit(result.value);\n    });\n  }\n\n  async hdel(key, ...ids) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      let self = this;\n      let count = 0;\n      await Tools.series(ids, async function(id) {\n        let result = await self._wrapper.get(`SELECT id FROM \"${key}\" WHERE id = ?`, id);\n        await self._wrapper.run(`DELETE FROM \"${key}\" WHERE id = ?`, id);\n        result = result || {};\n        if (result.id) {\n          ++count;\n        }\n      });\n      result = await this._wrapper.get(`SELECT count(id) FROM \"${key}\"`);\n      result = result || {};\n      if (Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        await this._wrapper.run(`DROP TABLE \"${key}\"`);\n      }\n      commit(count);\n    });\n  }\n\n  async hkeys(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback([]);\n      }\n      let results = await this._wrapper.all(`SELECT id FROM \"${key}\"`);\n      commit((results || []).map(res => res.id));\n    });\n  }\n\n  async hlen(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'hash');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT count(id) FROM \"${key}\"`);\n      result = result || {};\n      commit(Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async srandmember(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(result);\n      }\n      result = await this._wrapper.get(`SELECT value FROM \"${key}\" LIMIT 1`);\n      result = result || {};\n      commit((typeof result.value !== 'undefined') ? result.value : null);\n    });\n  }\n\n  async smembers(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback([]);\n      }\n      let results = await this._wrapper.all(`SELECT value FROM \"${key}\"`);\n      commit(results.map((res) => { return (typeof res.value !== 'undefined') ? res.value : null; }));\n    });\n  }\n\n  async sismember(key, data) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      let results = await this._wrapper.all(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n      commit(Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async sadd(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      await this._checkType(key, 'set', true);\n      let self = this;\n      let count = 0;\n      await Tools.series(items, async function(data) {\n        let result = await self._wrapper.get(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n        result = result || {};\n        if (Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n          await self._wrapper.run(`INSERT INTO \"${key}\" (value) VALUES (?)`, data);\n          ++count;\n        }\n      });\n      commit(count);\n    });\n  }\n\n  async srem(key, ...items) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      let self = this;\n      let count = 0;\n      await Tools.series(ids, async function(data) {\n        let result = await self._wrapper.get(`SELECT count(value) FROM \"${key}\" WHERE value = ?`, data);\n        await self._wrapper.run(`DELETE FROM \"${key}\" WHERE value = ?`, data);\n        result = result || {};\n        if (Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }) >= 0) {\n          ++count;\n        }\n      });\n      result = await this._wrapper.get(`SELECT count(value) FROM \"${key}\"`);\n      result = result || {};\n      if (Tools.option(result['count(id)'], 'number', { test: (c) => { return c > 0; } }) <= 0) {\n        await this._wrapper.run(`DELETE FROM _ololord_metadata WHERE name LIKE ?`, key);\n        await this._wrapper.run(`DROP TABLE \"${key}\"`);\n      }\n      commit(count);\n    });\n  }\n\n  async scard(key) {\n    return await this._wrapper.transaction(async function(commit, rollback) {\n      let result = await this._checkType(key, 'set');\n      if (!result) {\n        return rollback(0);\n      }\n      result = await this._wrapper.get(`SELECT count(value) FROM \"${key}\"`);\n      result = result || {};\n      commit(Tools.option(result['count(value)'], 'number', { test: (c) => { return c > 0; } }));\n    });\n  }\n\n  async zrange(key, lb, ub) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zrangebyscroe(key, lb, ub) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zadd(key, ...items) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zrem(key, ...items) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n\n  async zcard(key) {\n    Logger.warn(Tools.translate('\"$[1]\" is not implemented for SQL tables. Table: \"$[2]\"', '', '', key));\n  }\n}\n"],"sourceRoot":"/source/"}