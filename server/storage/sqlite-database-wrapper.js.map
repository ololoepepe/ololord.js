{"version":3,"sources":["storage/sqlite-database-wrapper.js"],"names":["METADATA_SCHEMA","KEYS_SCHEMA","SQLiteDatabaseWrapper","client","adapter","_client","_adapter","_initialized","_transactionQueue","_currentTransaction","manualTransaction","_runRaw","statement","params","Promise","resolve","reject","run","err","_awaitClient","get","row","all","rows","length","next","shift","state","commit","then","_checkTransactionQueue","catch","rollback","promise","push","f","t","_transaction","result","committed","call","res"],"mappings":"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","file":"sqlite-database-wrapper.js","sourcesContent":["const METADATA_SCHEMA =\n  'CREATE TABLE IF NOT EXISTS _ololord_metadata (name TEXT PRIMARY KEY NOT NULL, type TEXT NOT NULL)';\nconst KEYS_SCHEMA = 'CREATE TABLE IF NOT EXISTS _ololord_keys (key TEXT PRIMARY KEY NOT NULL, value TEXT)';\n\nexport default class SQLiteDatabaseWrapper {\n  constructor(client, adapter) {\n    this._client = client;\n    this._adapter = adapter;\n    this._initialized = false;\n    this._transactionQueue = [];\n    this._currentTransaction = false;\n  }\n\n  async _awaitClient() {\n    if (this._initialized) {\n      return;\n    }\n    this._client = await this._client;\n    if (!this._client.manualTransaction) {\n      await this._runRaw('BEGIN TRANSACTION');\n    }\n    await this._runRaw(METADATA_SCHEMA);\n    await this._runRaw(KEYS_SCHEMA);\n    if (!this._client.manualTransaction) {\n      await this._runRaw('COMMIT TRANSACTION');\n    }\n    this._initialized = true;\n  }\n\n  async _runRaw(statement, ...params) {\n    return new Promise((resolve, reject) => {\n      this._client.run(statement, params, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async run(...args) {\n    await this._awaitClient();\n    return await this._runRaw(...args);\n  }\n\n  async get(statement, ...params) {\n    await this._awaitClient();\n    return new Promise((resolve, reject) => {\n      this._client.get(statement, params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  async all(statement, ...params) {\n    await this._awaitClient();\n    return new Promise((resolve, reject) => {\n      this._client.all(statement, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  async _checkTransactionQueue() {\n    if (this._transactionQueue.length <= 0) {\n      this._currentTransaction = false;\n      return;\n    }\n    let next = this._transactionQueue.shift();\n    this._currentTransaction = true;\n    await this._awaitClient();\n    try {\n      if (!this._client.manualTransaction) {\n        await this._runRaw('BEGIN TRANSACTION');\n      }\n      let state;\n      next.resolve({\n        state: state,\n        commit: () => {\n          return new Promise((resolve, reject) => {\n            Promise.resolve().then(() => {\n              if (!this._client.manualTransaction) {\n                return this._runRaw('COMMIT TRANSACTION');\n              }\n            }).then(() => {\n              state = true;\n              resolve();\n              this._checkTransactionQueue();\n            }).catch((err) => {\n              reject(err);\n              this._checkTransactionQueue();\n            });\n          });\n        },\n        rollback: () => {\n          return new Promise((resolve, reject) => {\n            Promise.resolve().then(() => {\n              if (!this._client.manualTransaction) {\n                return this._runRaw(`ROLLBACK TRANSACTION`);\n              }\n            }).then(() => {\n              state = false;\n              resolve();\n              this._checkTransactionQueue();\n            }).catch((err) => {\n              reject(err);\n              this._checkTransactionQueue();\n            });\n          });\n        }\n      });\n    } catch (err) {\n      next.reject(err);\n    }\n  }\n\n  async _transaction() {\n    let promise = new Promise((resolve, reject) => {\n      this._transactionQueue.push({\n        resolve: resolve,\n        reject: reject,\n      });\n    });\n    if (!this._currentTransaction) {\n      this._checkTransactionQueue();\n    }\n    return promise;\n  }\n\n  async transaction(f) {\n    let t;\n    try {\n      t = await this._transaction();\n      let result;\n      let committed = false;\n      await f.call(this._adapter, (res) => {\n        committed = true;\n        result = res;\n      }, (res) => {\n        committed = false;\n        result = res;\n      });\n      if (committed) {\n        await t.commit();\n      } else {\n        await t.rollback();\n      }\n      return result;\n    } catch (err) {\n      if (t && typeof t.state === 'undefined') {\n        try {\n          await t.rollback();\n        } catch (err) {\n          throw err;\n        }\n      }\n      throw err;\n    }\n  }\n}\n"]}