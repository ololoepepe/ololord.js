{"version":3,"sources":["storage/channel.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEqB,O;AACnB,mBAAY,MAAZ,EAAoB,IAApB,EAAqD;AAAA,qEAAJ,EAAI;;AAAA,QAAzB,KAAyB,QAAzB,KAAyB;AAAA,QAAlB,SAAkB,QAAlB,SAAkB;;AAAA;;AACnD,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,oBAAU,YAAV,CAAuB,KAAvB,CAAb;AACA,SAAK,SAAL,GAAiB,oBAAU,iBAAV,CAA4B,SAA5B,CAAjB;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,MAAL,CAAY,EAAZ,CAAe,SAAf;AAAA,0DAA0B,kBAAe,OAAf,EAAwB,OAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACpB,YAAY,KAAK,IADG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIxB,0BAAU,KAAK,KAAL,CAAW,OAAX,CAAV;AAJwB;AAAA;AAAA,sBAMlB,IANkB;AAAA;AAAA;AAAA;AAAA;AAMlB,8BANkB,GAMX,IANW;AAAA;AAAA,iCAOhB,MAAM,MAAN,CAAa,MAAK,QAAlB;AAAA,gFAA4B,iBAAe,OAAf;AAAA,kCAI5B,MAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC5B,IAD4B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAIb,QAAQ,OAAR,CAJa;;AAAA;AAI5B,4CAJ4B;;AAKhC,0CAAI,MAAJ,EAAY;AACV,+CAAO,KAAP;AACD;;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA5B;;AAAA;AAAA;AAAA;AAAA,8BAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAiBtB,iCAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAjBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1B;;AAAA;AAAA;AAAA;AAAA;AAoBD;;;;;4EAEa,I;;;;;;uBACC,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,IAAzB,EAA+B,KAAK,SAAL,CAAe,IAAf,CAA/B,C;;;;;;;;;;;;;;;;;;;;;;4EAGC,O;YACV,e;;;;;AAAA,+B,GAAmB,KAAK,QAAL,CAAc,MAAd,IAAwB,C;;sBAC3C,OAAO,OAAP,KAAmB,U;;;;;;;;AAGvB,qBAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;;qBACI,e;;;;;;uBACW,KAAK,MAAL,CAAY,SAAZ,CAAsB,KAAK,IAA3B,C;;;;;;;;;;;;;;;;;;;;;;4EAIC,O;YAIV,K;;;;;sBAHF,OAAO,OAAP,KAAmB,W;;;;;AACrB,qBAAK,QAAL,GAAgB,EAAhB;;;;;sBACS,OAAO,OAAP,KAAmB,U;;;;;AACxB,qB,GAAQ,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,C;;sBACR,QAAQ,C;;;;;;;;AAGZ,qBAAK,QAAL,CAAc,MAAd,CAAqB,KAArB,EAA4B,CAA5B;;;sBAEE,KAAK,QAAL,CAAc,MAAd,IAAwB,C;;;;;;uBACb,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,IAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;kBAvDE,O","file":"storage/channel.js","sourcesContent":["import CommonKey from './common-key';\nimport Logger from '../helpers/logger';\n\nexport default class Channel {\n  constructor(client, name, { parse, stringify } = {}) {\n    this.client = client;\n    this.name = name;\n    this.parse = CommonKey.selectParser(parse);\n    this.stringify = CommonKey.selectStringifier(stringify);\n    this.handlers = [];\n    this.client.on('message', async function(channel, message) {\n      if (channel !== this.name) {\n        return;\n      }\n      message = this.parse(message);\n      try {\n        let skip = true;\n        await Tools.series(this.handlers, async function(handler) {\n          if (skip) {\n            return;\n          }\n          let result = await handler(message);\n          if (result) {\n            skip = false;\n          }\n        });\n      } catch (err) {\n        Logger.error(err.stack || err);\n      }\n    });\n  }\n\n  async publish(data) {\n    return await this.client.publish(this.name, this.stringify(data));\n  }\n\n  async subscribe(handler) {\n    let shouldSubscribe = (this.handlers.length <= 0);\n    if (typeof handler !== 'function') {\n      return;\n    }\n    this.handlers.push(handler);\n    if (shouldSubscribe) {\n      return await this.client.subscribe(this.name);\n    }\n  }\n\n  async unsubscribe(handler) {\n    if (typeof handler === 'undefined') {\n      this.handlers = [];\n    } else if (typeof handler === 'function') {\n      let index = this.handlers.indexOf(handler);\n      if (index < 0) {\n        return;\n      }\n      this.handlers.splice(index, 1);\n    }\n    if (this.handlers.length <= 0) {\n      return await this.client.unsubscribe(this.name);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}