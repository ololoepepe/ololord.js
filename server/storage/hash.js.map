{"version":3,"sources":["storage/hash.js"],"names":["Hash","args","id","subkey","client","hget","fullKey","data","parse","ids","isArray","length","hmget","call","map","hgetall","mapObject","hexists","exists","hset","stringify","items","value","key","flatten","hmset","item","index","n","hincrby","hdel","hkeys","hlen"],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;IAEqBA,I;;;AACnB,kBAAqB;AAAA;;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAAA,kIACVA,IADU;AAEpB;;;;;6EAEYC,E,EAAIC,M;;;;;;;uBACE,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,KAAKC,OAAL,CAAaH,MAAb,CAAjB,EAAuCD,EAAvC,C;;;AAAbK,oB;iDACG,KAAKC,KAAL,CAAWD,IAAX,C;;;;;;;;;;;;;;;;;;;8EAGKE,G,EAAKN,M;;;;;;;;sBACb,CAAC,0BAAEM,GAAF,EAAOC,OAAP,EAAD,IAAqBD,IAAIE,MAAJ,IAAc,C;;;;;kDAC9B,E;;;;uBAEQ,sBAAKP,MAAL,CAAYQ,KAAZ,EAAkBC,IAAlB,uBAAuB,KAAKT,MAA5B,EAAoC,KAAKE,OAAL,CAAaH,MAAb,CAApC,4BAA6DM,GAA7D,G;;;AAAbF,oB;kDACGA,KAAKO,GAAL,CAAS,KAAKN,KAAd,C;;;;;;;;;;;;;;;;;;;8EAGIL,M;;;;;;;uBACM,KAAKC,MAAL,CAAYW,OAAZ,CAAoB,KAAKT,OAAL,CAAaH,MAAb,CAApB,C;;;AAAbI,oB;kDACG,0BAAEA,IAAF,EAAQS,SAAR,CAAkB,KAAKR,KAAvB,C;;;;;;;;;;;;;;;;;;;8EAGON,E,EAAIC,M;;;;;;;uBACC,KAAKC,MAAL,CAAYa,OAAZ,CAAoB,KAAKX,OAAL,CAAaH,MAAb,CAApB,EAA0CD,EAA1C,C;;;AAAfgB,sB;kDACG,CAAC,CAACA,M;;;;;;;;;;;;;;;;;;;8EAGEhB,E,EAAIK,I,EAAMJ,M;;;;;;uBACR,KAAKC,MAAL,CAAYe,IAAZ,CAAiB,KAAKb,OAAL,CAAaH,MAAb,CAAjB,EAAuCD,EAAvC,EAA2C,KAAKkB,SAAL,CAAeb,IAAf,CAA3C,C;;;;;;;;;;;;;;;;;;;;;;8EAGDc,K,EAAOlB,M;;;;;;;;sBACf,QAAOkB,KAAP,yCAAOA,KAAP,OAAiB,Q;;;;;kDACZ,C;;;AAET,oBAAI,CAAC,0BAAEA,KAAF,EAASX,OAAT,EAAL,EAAyB;AACvBW,0BAAQ,0BAAEA,KAAF,EAASP,GAAT,CAAa,UAACQ,KAAD,EAAQC,GAAR,EAAgB;AAAE,2BAAO,CAACA,GAAD,EAAMD,KAAN,CAAP;AAAsB,mBAArD,CAAR;AACAD,0BAAQ,0BAAEA,KAAF,EAASG,OAAT,EAAR;AACD;;sBACGH,MAAMV,MAAN,IAAgB,C;;;;;kDACX,C;;;;uBAEI,sBAAKP,MAAL,CAAYqB,KAAZ,EAAkBZ,IAAlB,uBAAuB,KAAKT,MAA5B,EAAoC,KAAKE,OAAL,CAAaH,MAAb,CAApC,4BAA6DkB,MAAMP,GAAN,CAAU,UAACY,IAAD,EAAOC,KAAP,EAAiB;AACnG,yBAAQA,QAAQ,CAAT,GAAc,OAAKP,SAAL,CAAeM,IAAf,CAAd,GAAqCA,IAA5C;AACD,iBAFyE,CAA7D,G;;;;;;;;;;;;;;;;;;;;;;8EAKGxB,E,EAAI0B,C,EAAGzB,M;;;;;;uBACV,KAAKC,MAAL,CAAYyB,OAAZ,CAAoB,KAAKvB,OAAL,CAAaH,MAAb,CAApB,EAA0CD,EAA1C,EAA8C0B,CAA9C,C;;;;;;;;;;;;;;;;;;;;;;8EAGC1B,E,EAAIC,M;;;;;;uBACL,KAAKC,MAAL,CAAY0B,IAAZ,CAAiB,KAAKxB,OAAL,CAAaH,MAAb,CAAjB,EAAuCD,EAAvC,C;;;;;;;;;;;;;;;;;;;;;;+EAGEO,G,EAAKN,M;;;;;;;AACpB,oBAAI,CAAC,0BAAEM,GAAF,EAAOC,OAAP,EAAL,EAAuB;AACrBD,wBAAM,CAACA,GAAD,CAAN;AACD;;sBACGA,IAAIE,MAAJ,IAAc,C;;;;;kDACT,C;;;;uBAEI,gBAAKP,MAAL,EAAY0B,IAAZ,iBAAiB,KAAKxB,OAAL,CAAaH,MAAb,CAAjB,4BAA0CM,GAA1C,G;;;;;;;;;;;;;;;;;;;;;;gFAGJN,M;;;;;;uBACI,KAAKC,MAAL,CAAY2B,KAAZ,CAAkB,KAAKzB,OAAL,CAAaH,MAAb,CAAlB,C;;;;;;;;;;;;;;;;;;;;;;gFAGHA,M;;;;;;uBACG,KAAKC,MAAL,CAAY4B,IAAZ,CAAiB,KAAK1B,OAAL,CAAaH,MAAb,CAAjB,C;;;;;;;;;;;;;;;;;;;;;;;;kBAvEIH,I","file":"hash.js","sourcesContent":["import _ from 'underscore';\n\nimport CommonKey from './common-key';\n\nexport default class Hash extends CommonKey {\n  constructor(...args) {\n    super(...args);\n  }\n\n  async getOne(id, subkey) {\n    let data = await this.client.hget(this.fullKey(subkey), id);\n    return this.parse(data);\n  }\n\n  async getSome(ids, subkey) {\n    if (!_(ids).isArray() || ids.length <= 0) {\n      return [];\n    }\n    let data = await this.client.hmget.call(this.client, this.fullKey(subkey), ...ids);\n    return data.map(this.parse);\n  }\n\n  async getAll(subkey) {\n    let data = await this.client.hgetall(this.fullKey(subkey));\n    return _(data).mapObject(this.parse);\n  }\n\n  async existsOne(id, subkey) {\n    let exists = await this.client.hexists(this.fullKey(subkey), id);\n    return !!exists;\n  }\n\n  async setOne(id, data, subkey) {\n    return await this.client.hset(this.fullKey(subkey), id, this.stringify(data));\n  }\n\n  async setSome(items, subkey) {\n    if (typeof items !== 'object') {\n      return 0;\n    }\n    if (!_(items).isArray()) {\n      items = _(items).map((value, key) => { return [key, value]; });\n      items = _(items).flatten();\n    }\n    if (items.length <= 0) {\n      return 0;\n    }\n    return await this.client.hmset.call(this.client, this.fullKey(subkey), ...items.map((item, index) => {\n      return (index % 2) ? this.stringify(item) : item;\n    }));\n  }\n\n  async incrementBy(id, n, subkey) {\n    return await this.client.hincrby(this.fullKey(subkey), id, n);\n  }\n\n  async deleteOne(id, subkey) {\n    return await this.client.hdel(this.fullKey(subkey), id);\n  }\n\n  async deleteSome(ids, subkey) {\n    if (!_(ids).isArray()) {\n      ids = [ids];\n    }\n    if (ids.length <= 0) {\n      return 0;\n    }\n    return await this.client.hdel(this.fullKey(subkey), ...ids);\n  }\n\n  async keys(subkey) {\n    return await this.client.hkeys(this.fullKey(subkey));\n  }\n\n  async count(subkey) {\n    return await this.client.hlen(this.fullKey(subkey));\n  }\n}\n"]}