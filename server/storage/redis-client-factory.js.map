{"version":3,"sources":["storage/redis-client-factory.js"],"names":[],"mappings":";;;;;;;;kBAiEe,UAAS,EAAT,EAAa;AAC1B,MAAI,OAAO,QAAO,EAAP,yCAAO,EAAP,OAAc,QAAd,IAA0B,OAAO,EAAP,KAAc,SAA/C,CAAJ,EAA+D;AAC7D,WAAO,cAAP;AACD;AACD,MAAI,CAAC,EAAL,EAAS;AACP,QAAI,CAAC,aAAL,EAAoB;AAClB,sBAAgB,cAAhB;AACD;AACD,WAAO,aAAP;AACD;AACD,MAAI,SAAS,QAAQ,GAAR,CAAY,EAAZ,CAAb;AACA,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,cAAT;AACA,YAAQ,GAAR,CAAY,EAAZ,EAAgB,MAAhB;AACD;AACD,SAAO,MAAP;AACD,C;;AAjFD;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAI,gBAAgB,IAApB;AACA,IAAI,UAAU,IAAI,GAAJ,EAAd;AACA,IAAI,UAAU,IAAI,GAAJ,EAAd;;AAEA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,eAAO,WAAP,CAAmB,IAAnB,EAAyB,OAAzB,CAAiC,UAAC,KAAD,EAAW;AAC1C,QAAI,YAAe,IAAf,SAAuB,KAA3B;AACA,QAAI,OAAO,aAAO,QAAP,CAAgB,SAAhB,CAAX;AACA,QAAI,KAAK,MAAL,EAAJ,EAAmB;AACjB,UAAI,QAAQ,MAAM,KAAN,CAAY,wBAAZ,CAAZ;AACA,UAAI,KAAJ,EAAW;AACT,gBAAQ,GAAR,CAAY,MAAM,CAAN,CAAZ,EAAsB;AACpB,wBAAc,MAAM,CAAN,KAAY,CADN;AAEpB,eAAK,aAAO,YAAP,CAAoB,SAApB,EAA+B,MAA/B;AAFe,SAAtB;AAID;AACF,KARD,MAQO,IAAI,KAAK,WAAL,EAAJ,EAAwB;AAC7B,kBAAY,SAAZ;AACD;AACF,GAdD;AAeD;;AAED,YAAe,SAAf;;AAEA,SAAS,aAAT,GAAyB;AACvB,SAAO;AACL,UAAM,sBAAO,mBAAP,CADD;AAEL,UAAM,sBAAO,mBAAP,CAFD;AAGL,YAAQ,sBAAO,qBAAP,CAHH;AAIL,cAAU,sBAAO,uBAAP,CAJL;AAKL,QAAI,sBAAO,iBAAP;AALC,GAAP;AAOD;;AAED,SAAS,YAAT,GAAwB;AACtB,MAAI,aAAa,sBAAO,oBAAP,CAAjB;AACA,MAAI,eAAJ;AACA,MAAI,qBAAE,OAAF,CAAU,UAAV,KAAyB,WAAW,MAAX,GAAoB,CAAjD,EAAoD;AAClD,aAAS,IAAI,kBAAM,OAAV,CAAkB,UAAlB,EAA8B;AACrC,4BAAsB,sBAAO,mCAAP,EAA4C,UAAC,KAAD,EAAW;AACzE,eAAO,KAAK,GAAL,CAAS,MAAM,QAAQ,CAAvB,EAA0B,IAA1B,CAAP;AACH,OAFqB,CADe;AAIrC,wBAAkB,sBAAO,+BAAP,CAJmB;AAKrC,kBAAY,sBAAO,yBAAP,CALyB;AAMrC,uBAAiB,sBAAO,8BAAP,CANoB;AAOrC,4BAAsB,sBAAO,mCAAP,CAPe;AAQrC,+BAAyB,sBAAO,sCAAP,CARY;AASrC,4BAAsB,sBAAO,mCAAP,CATe;AAUrC,oBAAc;AAVuB,KAA9B,CAAT;AAYD,GAbD,MAaO;AACL,aAAS,sBAAU,eAAV,CAAT;AACD;AACD,UAAQ,OAAR,CAAgB,UAAC,MAAD,EAAS,IAAT,EAAkB;AAChC,WAAO,aAAP,CAAqB,IAArB,EAA2B,MAA3B;AACD,GAFD;AAGA,SAAO,MAAP;AACD","file":"storage/redis-client-factory.js","sourcesContent":["import _ from 'underscore';\nimport FSSync from 'fs';\nimport Redis from 'ioredis';\n\nimport config from '../helpers/config';\n\nlet defaultClient = null;\nlet clients = new Map();\nlet scripts = new Map();\n\nfunction loadScripts(path) {\n  FSSync.readdirSync(path).forEach((entry) => {\n    let entryPath = `${path}/${entry}`\n    let stat = FSSync.statSync(entryPath);\n    if (stat.isFile()) {\n      let match = entry.match(/^(.+?)\\.((\\d+)\\.)?lua$/);\n      if (match) {\n        scripts.set(match[1], {\n          numberOfKeys: match[3] || 0,\n          lua: FSSync.readFileSync(entryPath, 'utf8')\n        });\n      }\n    } else if (stat.isDirectory()) {\n      loadScripts(entryPath);\n    }\n  });\n}\n\nloadScripts(`${__dirname}/../../misc/lua`);\n\nfunction createOptions() {\n  return {\n    host: config('system.redis.host'),\n    port: config('system.redis.port'),\n    family: config('system.redis.family'),\n    password: config('system.redis.password'),\n    db: config('system.redis.db')\n  }\n};\n\nfunction createClient() {\n  let redisNodes = config('system.redis.nodes');\n  let client;\n  if (_.isArray(redisNodes) && redisNodes.length > 0) {\n    client = new Redis.Cluster(redisNodes, {\n      clusterRetryStrategy: config('system.redis.clusterRetryStrategy', (times) => {\n          return Math.min(100 + times * 2, 2000);\n      }),\n      enableReadyCheck: config('system.redis.enableReadyCheck'),\n      scaleReads: config('system.redis.scaleReads'),\n      maxRedirections: config('system.redis.maxRedirections'),\n      retryDelayOnFailover: config('system.redis.retryDelayOnFailover'),\n      retryDelayOnClusterDown: config('system.redis.retryDelayOnClusterDown'),\n      retryDelayOnTryAgain: config('system.redis.retryDelayOnTryAgain'),\n      redisOptions: createOptions()\n    });\n  } else {\n    client = new Redis(createOptions());\n  }\n  scripts.forEach((script, name) => {\n    client.defineCommand(name, script);\n  });\n  return client;\n}\n\nexport default function(id) {\n  if (id && (typeof id === 'object' || typeof id === 'boolean')) {\n    return createClient();\n  }\n  if (!id) {\n    if (!defaultClient) {\n      defaultClient = createClient();\n    }\n    return defaultClient;\n  }\n  let client = clients.get(id);\n  if (!client) {\n    client = createClient();\n    clients.set(id, client);\n  }\n  return client;\n}\n"],"sourceRoot":"/source/"}