{"version":3,"sources":["storage/common-key.js"],"names":["CommonKey","parse","data","JSON","stringify","bind","client","key","Promise","selectParser","selectStringifier","subkey","separator","exists","fullKey","query","keys","del","ttl","expire"],"mappings":";;;;;;;;AAAA;;;;;;;;;;IAEqBA,S;;;iCACCC,K,EAAO;AACzB,UAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,eAAO,UAACC,IAAD,EAAU;AACf,cAAI,OAAOA,IAAP,KAAgB,MAAhB,IAA0B,OAAOA,IAAP,KAAgB,WAA9C,EAA2D;AACzD,mBAAOA,IAAP;AACD;AACD,iBAAOD,MAAMC,IAAN,CAAP;AACD,SALD;AAMD,OAPD,MAOO,IAAID,SAAS,OAAOA,KAAP,KAAiB,WAA9B,EAA2C;AAChD,eAAO,UAACC,IAAD,EAAU;AACf,cAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,mBAAOA,IAAP;AACD;AACD,iBAAOC,KAAKF,KAAL,CAAWC,IAAX,CAAP;AACD,SALD;AAMD,OAPM,MAOA;AACL,eAAO;AAAA,iBAAQA,IAAR;AAAA,SAAP;AACD;AACF;;;sCAEwBE,S,EAAW;AAClC,UAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,eAAO,UAACF,IAAD,EAAU;AACf,cAAI,OAAOA,IAAP,KAAgB,MAAhB,IAA0B,OAAOA,IAAP,KAAgB,WAA9C,EAA2D;AACzD,mBAAOA,IAAP;AACD;AACD,iBAAOE,UAAUF,IAAV,CAAP;AACD,SALD;AAMD,OAPD,MAOO,IAAIE,aAAa,OAAOA,SAAP,KAAqB,WAAtC,EAAmD;AACxD,eAAOD,KAAKC,SAAL,CAAeC,IAAf,CAAoBF,IAApB,CAAP;AACD,OAFM,MAEA;AACL,eAAO;AAAA,iBAAQD,IAAR;AAAA,SAAP;AACD;AACF;;;AAED,qBAAYI,MAAZ,EAAoBC,GAApB,EAAoD;AAAA,mFAAJ,EAAI;AAAA,QAAzBN,KAAyB,QAAzBA,KAAyB;AAAA,QAAlBG,SAAkB,QAAlBA,SAAkB;;AAAA;;AAClD,SAAKE,MAAL,GAAeA,kBAAkBE,OAAnB,GAA8B,yBAAeF,MAAf,CAA9B,GAAuDA,MAArE;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKN,KAAL,GAAaD,UAAUS,YAAV,CAAuBR,KAAvB,CAAb;AACA,SAAKG,SAAL,GAAiBJ,UAAUU,iBAAV,CAA4BN,SAA5B,CAAjB;AACD;;;;4BAEOO,M,EAAQC,S,EAAW;AACzB,aAAO,KAAKL,GAAL,IAAYI,eAAYC,aAAa,GAAzB,IAA+BD,MAA/B,GAA0C,EAAtD,CAAP;AACD;;;;6EAEYA,M;;;;;;;uBACQ,KAAKL,MAAL,CAAYO,MAAZ,CAAmB,KAAKC,OAAL,CAAaH,MAAb,CAAnB,C;;;AAAfE,sB;iDACG,CAAC,CAACA,M;;;;;;;;;;;;;;;;;;;8EAGAE,K,EAAOJ,M;;;;;AAChBI,wBAAS,OAAOA,KAAP,KAAiB,WAAlB,SAAqCA,KAArC,GAA+C,IAAvD;;uBACa,KAAKT,MAAL,CAAYU,IAAZ,CAAiB,KAAKF,OAAL,CAAaH,MAAb,IAAuBI,KAAxC,C;;;;;;;;;;;;;;;;;;;;;;8EAGFJ,M;;;;;;uBACE,KAAKL,MAAL,CAAYW,GAAZ,CAAgB,KAAKH,OAAL,CAAaH,MAAb,CAAhB,C;;;;;;;;;;;;;;;;;;;;;;8EAGFO,G,EAAKP,M;;;;;;uBACH,KAAKL,MAAL,CAAYa,MAAZ,CAAmB,KAAKL,OAAL,CAAaH,MAAb,CAAnB,EAAyCO,GAAzC,C;;;;;;;;;;;;;;;;;;;;;;8EAGLP,M;;;;;;uBACK,KAAKL,MAAL,CAAYY,GAAZ,CAAgB,KAAKJ,OAAL,CAAaH,MAAb,CAAhB,C;;;;;;;;;;;;;;;;;;;;;;;;kBAlEIX,S","file":"common-key.js","sourcesContent":["import SQLAdapter from './sql-adapter';\n\nexport default class CommonKey {\n  static selectParser(parse) {\n    if (typeof parse === 'function') {\n      return (data) => {\n        if (typeof data === 'null' || typeof data === 'undefined') {\n          return data;\n        }\n        return parse(data);\n      };\n    } else if (parse || typeof parse === 'undefined') {\n      return (data) => {\n        if (typeof data !== 'string') {\n          return data;\n        }\n        return JSON.parse(data);\n      };\n    } else {\n      return data => data;\n    }\n  }\n\n  static selectStringifier(stringify) {\n    if (typeof stringify === 'function') {\n      return (data) => {\n        if (typeof data === 'null' || typeof data === 'undefined') {\n          return data;\n        }\n        return stringify(data);\n      };\n    } else if (stringify || typeof stringify === 'undefined') {\n      return JSON.stringify.bind(JSON);\n    } else {\n      return data => data;\n    }\n  }\n\n  constructor(client, key, { parse, stringify } = {}) {\n    this.client = (client instanceof Promise) ? new SQLAdapter(client) : client;\n    this.key = key;\n    this.parse = CommonKey.selectParser(parse);\n    this.stringify = CommonKey.selectStringifier(stringify);\n  }\n\n  fullKey(subkey, separator) {\n    return this.key + (subkey ? `${separator || ':'}${subkey}` : '');\n  }\n\n  async exists(subkey) {\n    let exists = await this.client.exists(this.fullKey(subkey));\n    return !!exists;\n  }\n\n  async find(query, subkey) {\n    query = (typeof query !== 'undefined') ? `:${query}` : ':*';\n    return await this.client.keys(this.fullKey(subkey) + query);\n  }\n\n  async delete(subkey) {\n    return await this.client.del(this.fullKey(subkey));\n  }\n\n  async expire(ttl, subkey) {\n    return await this.client.expire(this.fullKey(subkey), ttl);\n  }\n\n  async ttl(subkey) {\n    return await this.client.ttl(this.fullKey(subkey));\n  }\n}\n"]}