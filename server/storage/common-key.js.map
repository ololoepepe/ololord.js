{"version":3,"sources":["storage/common-key.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;IAEqB,S;;;iCACC,K,EAAO;AACzB,UAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,eAAO,UAAC,IAAD,EAAU;AACf,cAAI,OAAO,IAAP,KAAgB,MAAhB,IAA0B,OAAO,IAAP,KAAgB,WAA9C,EAA2D;AACzD,mBAAO,IAAP;AACD;AACD,iBAAO,MAAM,IAAN,CAAP;AACD,SALD;AAMD,OAPD,MAOO,IAAI,SAAS,OAAO,KAAP,KAAiB,WAA9B,EAA2C;AAChD,eAAO,UAAC,IAAD,EAAU;AACf,cAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,mBAAO,IAAP;AACD;AACD,iBAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACD,SALD;AAMD,OAPM,MAOA;AACL,eAAO;AAAA,iBAAQ,IAAR;AAAA,SAAP;AACD;AACF;;;sCAEwB,S,EAAW;AAClC,UAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AACnC,eAAO,UAAC,IAAD,EAAU;AACf,cAAI,OAAO,IAAP,KAAgB,MAAhB,IAA0B,OAAO,IAAP,KAAgB,WAA9C,EAA2D;AACzD,mBAAO,IAAP;AACD;AACD,iBAAO,UAAU,IAAV,CAAP;AACD,SALD;AAMD,OAPD,MAOO,IAAI,aAAa,OAAO,SAAP,KAAqB,WAAtC,EAAmD;AACxD,eAAO,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAP;AACD,OAFM,MAEA;AACL,eAAO;AAAA,iBAAQ,IAAR;AAAA,SAAP;AACD;AACF;;;AAED,qBAAY,MAAZ,EAAoB,GAApB,EAAoD;AAAA,qEAAJ,EAAI;;AAAA,QAAzB,KAAyB,QAAzB,KAAyB;AAAA,QAAlB,SAAkB,QAAlB,SAAkB;;AAAA;;AAClD,SAAK,MAAL,GAAe,kBAAkB,OAAnB,GAA8B,yBAAe,MAAf,CAA9B,GAAuD,MAArE;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,KAAL,GAAa,UAAU,YAAV,CAAuB,KAAvB,CAAb;AACA,SAAK,SAAL,GAAiB,UAAU,iBAAV,CAA4B,SAA5B,CAAjB;AACD;;;;4BAEO,M,EAAQ,S,EAAW;AACzB,aAAO,KAAK,GAAL,IAAY,eAAY,aAAa,GAAzB,IAA+B,MAA/B,GAA0C,EAAtD,CAAP;AACD;;;;2EAEY,M;YACP,M;;;;;;uBAAe,KAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,OAAL,CAAa,MAAb,CAAnB,C;;;AAAf,sB;iDACG,CAAC,CAAC,M;;;;;;;;;;;;;;;;;;;4EAGA,K,EAAO,M;;;;;AAChB,wBAAS,OAAO,KAAP,KAAiB,WAAlB,SAAqC,KAArC,GAA+C,IAAvD;;uBACa,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,MAAb,IAAuB,KAAxC,C;;;;;;;;;;;;;;;;;;;;;;4EAGF,M;;;;;;uBACE,KAAK,MAAL,CAAY,GAAZ,CAAgB,KAAK,OAAL,CAAa,MAAb,CAAhB,C;;;;;;;;;;;;;;;;;;;;;;4EAGF,G,EAAK,M;;;;;;uBACH,KAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,OAAL,CAAa,MAAb,CAAnB,EAAyC,GAAzC,C;;;;;;;;;;;;;;;;;;;;;;;;kBA9DI,S","file":"storage/common-key.js","sourcesContent":["import SQLAdapter from './sql-adapter';\n\nexport default class CommonKey {\n  static selectParser(parse) {\n    if (typeof parse === 'function') {\n      return (data) => {\n        if (typeof data === 'null' || typeof data === 'undefined') {\n          return data;\n        }\n        return parse(data);\n      };\n    } else if (parse || typeof parse === 'undefined') {\n      return (data) => {\n        if (typeof data !== 'string') {\n          return data;\n        }\n        return JSON.parse(data);\n      };\n    } else {\n      return data => data;\n    }\n  }\n\n  static selectStringifier(stringify) {\n    if (typeof stringify === 'function') {\n      return (data) => {\n        if (typeof data === 'null' || typeof data === 'undefined') {\n          return data;\n        }\n        return stringify(data);\n      };\n    } else if (stringify || typeof stringify === 'undefined') {\n      return JSON.stringify.bind(JSON);\n    } else {\n      return data => data;\n    }\n  }\n\n  constructor(client, key, { parse, stringify } = {}) {\n    this.client = (client instanceof Promise) ? new SQLAdapter(client) : client;\n    this.key = key;\n    this.parse = CommonKey.selectParser(parse);\n    this.stringify = CommonKey.selectStringifier(stringify);\n  }\n\n  fullKey(subkey, separator) {\n    return this.key + (subkey ? `${separator || ':'}${subkey}` : '');\n  }\n\n  async exists(subkey) {\n    let exists = await this.client.exists(this.fullKey(subkey));\n    return !!exists;\n  }\n\n  async find(query, subkey) {\n    query = (typeof query !== 'undefined') ? `:${query}` : ':*';\n    return await this.client.keys(this.fullKey(subkey) + query);\n  }\n\n  async delete(subkey) {\n    return await this.client.del(this.fullKey(subkey));\n  }\n\n  async expire(ttl, subkey) {\n    return await this.client.expire(this.fullKey(subkey), ttl);\n  }\n}\n"],"sourceRoot":"/source/"}