{"version":3,"sources":["storage/sql-client-factory.js"],"names":["name","client","clients","get","createClient","set","Map","Promise","resolve","reject","db","Database","__dirname","err","transaction","run","manualTransaction","commit","rollback"],"mappings":";;;;;;kBAoDe,UAASA,IAAT,EAAe;AAC5B,MAAI,CAACA,IAAL,EAAW;AACTA,WAAO,MAAP;AACD;AACD,MAAIC,SAASC,QAAQC,GAAR,CAAYH,IAAZ,CAAb;AACA,MAAI,CAACC,MAAL,EAAa;AACXA,aAASG,aAAaJ,IAAb,CAAT;AACAE,YAAQG,GAAR,CAAYL,IAAZ,EAAkBC,MAAlB;AACD;AACD,SAAOA,MAAP;AACD,C;;AA9DD;;;;;;AAEA,IAAIC,UAAU,IAAII,GAAJ,EAAd;;AAEA,SAASF,YAAT,CAAsBJ,IAAtB,EAA4B;AAC1B,SAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,KAAK,IAAI,iBAAQC,QAAZ,CAAwBC,SAAxB,sBAAkDZ,IAAlD,cAAiE,UAACa,GAAD,EAAS;AACjF,UAAIA,GAAJ,EAAS;AACPJ,eAAOI,GAAP;AACA;AACD;AACDH,SAAGI,WAAH,GAAiB,YAAM;AACrB,eAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,aAAGK,GAAH,CAAO,mBAAP,EAA4B,EAA5B,EAAgC,UAACF,GAAD,EAAS;AACvC,gBAAIA,GAAJ,EAAS;AACPJ,qBAAOI,GAAP;AACD,aAFD,MAEO;AACLH,iBAAGM,iBAAH,GAAuB,IAAvB;AACAR;AACD;AACF,WAPD;AAQD,SATM,CAAP;AAUD,OAXD;AAYAE,SAAGO,MAAH,GAAY,YAAM;AAChB,eAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,aAAGK,GAAH,CAAO,oBAAP,EAA6B,EAA7B,EAAiC,UAACF,GAAD,EAAS;AACxCH,eAAGM,iBAAH,GAAuB,KAAvB;AACA,gBAAIH,GAAJ,EAAS;AACPJ,qBAAOI,GAAP;AACD,aAFD,MAEO;AACLL;AACD;AACF,WAPD;AAQD,SATM,CAAP;AAUD,OAXD;AAYAE,SAAGQ,QAAH,GAAc,YAAM;AAClB,eAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,aAAGK,GAAH,CAAO,sBAAP,EAA+B,EAA/B,EAAmC,UAACF,GAAD,EAAS;AAC1CH,eAAGM,iBAAH,GAAuB,KAAvB;AACA,gBAAIH,GAAJ,EAAS;AACPJ,qBAAOI,GAAP;AACD,aAFD,MAEO;AACLL;AACD;AACF,WAPD;AAQD,SATM,CAAP;AAUD,OAXD;AAYAA,cAAQE,EAAR;AACD,KA1CQ,CAAT;AA2CD,GA5CM,CAAP;AA6CD","file":"sql-client-factory.js","sourcesContent":["import SQLite3 from 'sqlite3';\n\nlet clients = new Map();\n\nfunction createClient(name) {\n  return new Promise((resolve, reject) => {\n    let db = new SQLite3.Database(`${__dirname}/../../sqlite/${name}.sqlite`, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      db.transaction = () => {\n        return new Promise((resolve, reject) => {\n          db.run('BEGIN TRANSACTION', [], (err) => {\n            if (err) {\n              reject(err);\n            } else {\n              db.manualTransaction = true;\n              resolve();\n            }\n          });\n        });\n      };\n      db.commit = () => {\n        return new Promise((resolve, reject) => {\n          db.run('COMMIT TRANSACTION', [], (err) => {\n            db.manualTransaction = false;\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n      };\n      db.rollback = () => {\n        return new Promise((resolve, reject) => {\n          db.run('ROLLBACK TRANSACTION', [], (err) => {\n            db.manualTransaction = false;\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        });\n      };\n      resolve(db);\n    });\n  });\n}\n\nexport default function(name) {\n  if (!name) {\n    name = 'main';\n  }\n  let client = clients.get(name);\n  if (!client) {\n    client = createClient(name);\n    clients.set(name, client);\n  }\n  return client;\n}\n"]}