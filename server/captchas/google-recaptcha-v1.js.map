{"version":3,"sources":["captchas/google-recaptcha-v1.js"],"names":["Tools","GoogleRecaptchaV1","translate","noop","defineSetting","SECOND","ip","recaptcha_challenge_field","recaptcha_response_field","challenge","response","Error","query","privateKey","encodeURIComponent","request","url","timeout","reply","status","body","read","data","result","toString","indexOf"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;IAAYA,K;;;;;;;;;;;;;;IAESC,iB;;;AACnB,+BAAc;AAAA;;AAAA,sIACN,qBADM,EACiBD,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,qBAArB,CADjB;;AAEZ,UAAKC,aAAL,CAAmB,SAAnB,EAA8B,KAAKJ,MAAMK,MAAzC;AAFY;AAGb;;;;;;YAEoBC,E,SAAAA,E;YAAQC,yB,SAAAA,yB;YAA2BC,wB,SAAAA,wB;;;;;;AAClDC,yB,GAAYF,yB;AACZG,wB,GAAWF,wB;;oBACVC,S;;;;;sBACG,IAAIE,KAAJ,CAAUX,MAAME,SAAN,CAAgB,4BAAhB,CAAV,C;;;oBAEHQ,Q;;;;;sBACG,IAAIC,KAAJ,CAAUX,MAAME,SAAN,CAAgB,kBAAhB,CAAV,C;;;AAEJU,qB,GAAQ,gBAAc,KAAKC,UAAnB,kBAA0CP,EAA1C,mBAA0DQ,mBAAmBL,SAAnB,CAA1D,mBACKK,mBAAmBJ,QAAnB,CADL,C;;uBAEM,eAAKK,OAAL,CAAa;AAC7BC,wEAAoDJ,KADvB;AAE7BK,2BAAS,KAAKA;AAFe,iBAAb,C;;;AAAdC,qB;;sBAIA,QAAQA,MAAMC,M;;;;;sBACV,IAAIR,KAAJ,CAAUX,MAAME,SAAN,CAAgB,yBAAhB,CAAV,C;;;;uBAESgB,MAAME,IAAN,CAAWC,IAAX,CAAgB,MAAhB,C;;;AAAbC,oB;AACAC,sB,GAASD,KAAKE,QAAL,E;;sBACTD,OAAOE,OAAP,CAAe,MAAf,IAAyB,C;;;;;sBACrB,IAAId,KAAJ,CAAUX,MAAME,SAAN,CAAgB,iBAAhB,CAAV,C;;;;;;;;;;;;;;;;;;;;;kBA3BSD,iB","file":"google-recaptcha-v1.js","sourcesContent":["import HTTP from 'q-io/http';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nexport default class GoogleRecaptchaV1 extends Captcha {\n  constructor() {\n    super('google-recaptcha-v1', Tools.translate.noop('Google reCAPTCHA v1'));\n    this.defineSetting('timeout', 15 * Tools.SECOND);\n  }\n\n  async checkCaptcha({ ip }, { recaptcha_challenge_field, recaptcha_response_field }) {\n    let challenge = recaptcha_challenge_field;\n    let response = recaptcha_response_field;\n    if (!challenge) {\n      throw new Error(Tools.translate('Captcha challenge is empty'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let query = `privatekey=${this.privateKey}&remoteip=${ip}&challenge=${encodeURIComponent(challenge)}`\n      + `&response=${encodeURIComponent(response)}`;\n    let reply = await HTTP.request({\n      url: `https://www.google.com/recaptcha/api/verify?${query}`,\n      timeout: this.timeout\n    });\n    if (200 !== reply.status) {\n      throw new Error(Tools.translate('Failed to check captcha'));\n    }\n    let data = await reply.body.read('utf8');\n    let result = data.toString();\n    if (result.indexOf('true') < 0) {\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n  }\n}\n"]}