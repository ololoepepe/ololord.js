{"version":3,"sources":["captchas/google-recaptcha-v1.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;IAAY,K;;;;;;;;;;;;;;IAES,iB;;;AACnB,+BAAc;AAAA;;AAAA,qGACN,qBADM,EACiB,MAAM,SAAN,CAAgB,IAAhB,CAAqB,qBAArB,CADjB;;AAEZ,UAAK,aAAL,CAAmB,SAAnB,EAA8B,KAAK,MAAM,MAAzC;AAFY;AAGb;;;;;;YAEoB,E,QAAA,E;YAAQ,yB,SAAA,yB;YAA2B,wB,SAAA,wB;YAClD,S,EACA,Q,EAOA,K,EAEA,K,EAOA,I,EACA,M;;;;;AAlBA,yB,GAAY,yB;AACZ,wB,GAAW,wB;;oBACV,S;;;;;sBACG,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,4BAAhB,CAAV,C;;;oBAEH,Q;;;;;sBACG,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,kBAAhB,CAAV,C;;;AAEJ,qB,GAAQ,gBAAc,KAAK,UAAnB,kBAA0C,EAA1C,mBAA0D,mBAAmB,SAAnB,CAA1D,mBACK,mBAAmB,QAAnB,CADL,C;;uBAEM,eAAK,OAAL,CAAa;AAC7B,wEAAoD,KADvB;AAE7B,2BAAS,KAAK;AAFe,iBAAb,C;;;AAAd,qB;;sBAIA,QAAQ,MAAM,M;;;;;sBACV,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,yBAAhB,CAAV,C;;;;uBAES,MAAM,IAAN,CAAW,IAAX,CAAgB,MAAhB,C;;;AAAb,oB;AACA,sB,GAAS,KAAK,QAAL,E;;sBACT,OAAO,OAAP,CAAe,MAAf,IAAyB,C;;;;;sBACrB,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,iBAAhB,CAAV,C;;;;;;;;;;;;;;;;;;;;;kBA3BS,iB","file":"captchas/google-recaptcha-v1.js","sourcesContent":["import HTTP from 'q-io/http';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nexport default class GoogleRecaptchaV1 extends Captcha {\n  constructor() {\n    super('google-recaptcha-v1', Tools.translate.noop('Google reCAPTCHA v1'));\n    this.defineSetting('timeout', 15 * Tools.SECOND);\n  }\n\n  async checkCaptcha({ ip }, { recaptcha_challenge_field, recaptcha_response_field }) {\n    let challenge = recaptcha_challenge_field;\n    let response = recaptcha_response_field;\n    if (!challenge) {\n      throw new Error(Tools.translate('Captcha challenge is empty'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let query = `privatekey=${this.privateKey}&remoteip=${ip}&challenge=${encodeURIComponent(challenge)}`\n      + `&response=${encodeURIComponent(response)}`;\n    let reply = await HTTP.request({\n      url: `https://www.google.com/recaptcha/api/verify?${query}`,\n      timeout: this.timeout\n    });\n    if (200 !== reply.status) {\n      throw new Error(Tools.translate('Failed to check captcha'));\n    }\n    let data = await reply.body.read('utf8');\n    let result = data.toString();\n    if (result.indexOf('true') < 0) {\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n  }\n}\n"],"sourceRoot":"/source/"}