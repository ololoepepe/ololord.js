{"version":3,"sources":["captchas/google-recaptcha.js"],"names":["Tools","ERROR_CODE_TRANSLATIONS","translate","noop","GoogleRecaptcha","defineSetting","SECOND","fields","ip","captcha","Error","query","privateKey","request","url","timeout","reply","status","body","read","data","result","JSON","parse","toString","success","each","translation","errorCode","errorCodes","indexOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;IAAYA,K;;;;;;;;;;;;;;AAEZ,IAAMC,0BAA0B;AAC9B,0BAAwBD,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,yCAArB,CADM;AAE9B,0BAAwBH,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,sDAArB,CAFM;AAG9B,4BAA0BH,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,2CAArB,CAHI;AAI9B,4BAA0BH,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,wDAArB;AAJI,CAAhC;;IAOqBC,e;;;AACnB,6BAAc;AAAA;;AAAA,kIACN,kBADM,EACcJ,MAAME,SAAN,CAAgBC,IAAhB,CAAqB,kBAArB,CADd;;AAEZ,UAAKE,aAAL,CAAmB,SAAnB,EAA8B,KAAKL,MAAMM,MAAzC;AAFY;AAGb;;;;;mFAE0BC,M;YAANC,E,SAAAA,E;;;;;;AACfC,uB,GAAUF,OAAO,sBAAP,C;;oBACTE,O;;;;;sBACG,IAAIC,KAAJ,CAAUV,MAAME,SAAN,CAAgB,kBAAhB,CAAV,C;;;AAEJS,qB,eAAkB,KAAKC,U,kBAAuBH,O,kBAAoBD,E;;uBACpD,eAAKK,OAAL,CAAa;AAC7BC,4EAAwDH,KAD3B;AAE7BI,2BAAS,KAAKA;AAFe,iBAAb,C;;;AAAdC,qB;;sBAIA,QAAQA,MAAMC,M;;;;;sBACV,IAAIP,KAAJ,CAAUV,MAAME,SAAN,CAAgB,yBAAhB,CAAV,C;;;;uBAESc,MAAME,IAAN,CAAWC,IAAX,CAAgB,MAAhB,C;;;AAAbC,oB;AACAC,sB,GAASC,KAAKC,KAAL,CAAWH,KAAKI,QAAL,EAAX,C;;oBACRH,OAAOI,O;;;;;AACV,0CAAExB,uBAAF,EAA2ByB,IAA3B,CAAgC,UAACC,WAAD,EAAcC,SAAd,EAA4B;AAC1D,sBAAIC,WAAWC,OAAX,CAAmBF,SAAnB,KAAiC,CAArC,EAAwC;AACtC,0BAAM,IAAIlB,KAAJ,CAAUV,MAAME,SAAN,CAAgByB,WAAhB,CAAV,CAAN;AACD;AACF,iBAJD;sBAKM,IAAIjB,KAAJ,CAAUV,MAAME,SAAN,CAAgB,iBAAhB,CAAV,C;;;;;;;;;;;;;;;;;;;;;kBA3BSE,e","file":"google-recaptcha.js","sourcesContent":["import _ from 'underscore';\nimport HTTP from 'q-io/http';\n\nimport Captcha from './captcha';\nimport * as Tools from '../helpers/tools';\n\nconst ERROR_CODE_TRANSLATIONS = {\n  'missing-input-secret': Tools.translate.noop('The secret captcha parameter is missing'),\n  'invalid-input-secret': Tools.translate.noop('The secret captcha parameter is invalid or malformed'),\n  'missing-input-response': Tools.translate.noop('The captcha response parameter is missing'),\n  'invalid-input-response': Tools.translate.noop('The captcha response parameter is invalid or malformed')\n};\n\nexport default class GoogleRecaptcha extends Captcha {\n  constructor() {\n    super('google-recaptcha', Tools.translate.noop('Google reCAPTCHA'));\n    this.defineSetting('timeout', 15 * Tools.SECOND);\n  }\n\n  async checkCaptcha({ ip }, fields) {\n    let captcha = fields['g-recaptcha-response'];\n    if (!captcha) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let query = `secret=${this.privateKey}&response=${captcha}&remoteip=${ip}`;\n    let reply = await HTTP.request({\n      url: `https://www.google.com/recaptcha/api/siteverify?${query}`,\n      timeout: this.timeout\n    });\n    if (200 !== reply.status) {\n      throw new Error(Tools.translate('Failed to check captcha'));\n    }\n    let data = await reply.body.read('utf8');\n    let result = JSON.parse(data.toString());\n    if (!result.success) {\n      _(ERROR_CODE_TRANSLATIONS).each((translation, errorCode) => {\n        if (errorCodes.indexOf(errorCode) >= 0) {\n          throw new Error(Tools.translate(translation));\n        }\n      });\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n  }\n}\n"]}