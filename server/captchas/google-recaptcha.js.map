{"version":3,"sources":["captchas/google-recaptcha.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;IAAY,K;;;;;;;;;;;;;;AAEZ,IAAM,0BAA0B;AAC9B,0BAAwB,MAAM,SAAN,CAAgB,IAAhB,CAAqB,yCAArB,CADM;AAE9B,0BAAwB,MAAM,SAAN,CAAgB,IAAhB,CAAqB,sDAArB,CAFM;AAG9B,4BAA0B,MAAM,SAAN,CAAgB,IAAhB,CAAqB,2CAArB,CAHI;AAI9B,4BAA0B,MAAM,SAAN,CAAgB,IAAhB,CAAqB,wDAArB;AAJI,CAAhC;;IAOqB,e;;;AACnB,6BAAc;AAAA;;AAAA,mGACN,kBADM,EACc,MAAM,SAAN,CAAgB,IAAhB,CAAqB,kBAArB,CADd;;AAEZ,UAAK,aAAL,CAAmB,SAAnB,EAA8B,KAAK,MAAM,MAAzC;AAFY;AAGb;;;;;iFAE0B,M;YAAN,E,QAAA,E;YACf,O,EAIA,K,EACA,K,EAOA,I,EACA,M;;;;;AAbA,uB,GAAU,OAAO,sBAAP,C;;oBACT,O;;;;;sBACG,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,kBAAhB,CAAV,C;;;AAEJ,qB,eAAkB,KAAK,U,kBAAuB,O,kBAAoB,E;;uBACpD,eAAK,OAAL,CAAa;AAC7B,4EAAwD,KAD3B;AAE7B,2BAAS,KAAK;AAFe,iBAAb,C;;;AAAd,qB;;sBAIA,QAAQ,MAAM,M;;;;;sBACV,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,yBAAhB,CAAV,C;;;;uBAES,MAAM,IAAN,CAAW,IAAX,CAAgB,MAAhB,C;;;AAAb,oB;AACA,sB,GAAS,KAAK,KAAL,CAAW,KAAK,QAAL,EAAX,C;;oBACR,OAAO,O;;;;;AACV,0CAAE,uBAAF,EAA2B,IAA3B,CAAgC,UAAC,WAAD,EAAc,SAAd,EAA4B;AAC1D,sBAAI,WAAW,OAAX,CAAmB,SAAnB,KAAiC,CAArC,EAAwC;AACtC,0BAAM,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,WAAhB,CAAV,CAAN;AACD;AACF,iBAJD;sBAKM,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,iBAAhB,CAAV,C;;;;;;;;;;;;;;;;;;;;;kBA3BS,e","file":"captchas/google-recaptcha.js","sourcesContent":["import _ from 'underscore';\nimport HTTP from 'q-io/http';\n\nimport Captcha from './captcha';\nimport * as Tools from '../helpers/tools';\n\nconst ERROR_CODE_TRANSLATIONS = {\n  'missing-input-secret': Tools.translate.noop('The secret captcha parameter is missing'),\n  'invalid-input-secret': Tools.translate.noop('The secret captcha parameter is invalid or malformed'),\n  'missing-input-response': Tools.translate.noop('The captcha response parameter is missing'),\n  'invalid-input-response': Tools.translate.noop('The captcha response parameter is invalid or malformed')\n};\n\nexport default class GoogleRecaptcha extends Captcha {\n  constructor() {\n    super('google-recaptcha', Tools.translate.noop('Google reCAPTCHA'));\n    this.defineSetting('timeout', 15 * Tools.SECOND);\n  }\n\n  async checkCaptcha({ ip }, fields) {\n    let captcha = fields['g-recaptcha-response'];\n    if (!captcha) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let query = `secret=${this.privateKey}&response=${captcha}&remoteip=${ip}`;\n    let reply = await HTTP.request({\n      url: `https://www.google.com/recaptcha/api/siteverify?${query}`,\n      timeout: this.timeout\n    });\n    if (200 !== reply.status) {\n      throw new Error(Tools.translate('Failed to check captcha'));\n    }\n    let data = await reply.body.read('utf8');\n    let result = JSON.parse(data.toString());\n    if (!result.success) {\n      _(ERROR_CODE_TRANSLATIONS).each((translation, errorCode) => {\n        if (errorCodes.indexOf(errorCode) >= 0) {\n          throw new Error(Tools.translate(translation));\n        }\n      });\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n  }\n}\n"],"sourceRoot":"/source/"}