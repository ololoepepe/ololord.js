{"version":3,"sources":["captchas/captcha.js"],"names":[],"mappings":"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","file":"captchas/captcha.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as UsersModel from '../models/users';\n\nlet captchas = {};\n\nexport default class Captcha {\n  static captcha(id) {\n    return captchas[id];\n  }\n\n  static addCaptcha(captcha) {\n    captchas[captcha.id] = captcha;\n  }\n\n  static captchaIDs() {\n    return _(captchas).toArray().sort((c1, c2) => { return c1.id.localeCompare(c2.id); }).map(captcha => captcha.id);\n  }\n\n  static async checkCaptcha(req, fields = {}) {\n    let { boardName, captchaEngine } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    if (!board.captchaEnabled) {\n      return;\n    }\n    let quota = await UsersModel.getUserCaptchaQuota(boardName, req.hashpass || req.ip);\n    if (board.captchaQuota > 0 && +quota > 0) {\n      return await UsersModel.useCaptcha(boardName, req.hashpass || req.ip);\n    }\n    let supportedCaptchaEngines = board.supportedCaptchaEngines;\n    if (supportedCaptchaEngines.length < 1) {\n      throw new Error(Tools.translate('Internal error: no captcha engine'));\n    }\n    let ceid = captchaEngine || null;\n    if (!ceid || !_(supportedCaptchaEngines).contains(ceid)) {\n      if (_(supportedCaptchaEngines).contains(Tools.NODE_CAPTCHA_ID)) {\n        ceid = Tools.NODE_CAPTCHA_ID;\n      } else {\n        ceid = supportedCaptchaEngines[0].id;\n      }\n    }\n    let captcha = Captcha.captcha(ceid);\n    if (!captcha) {\n      throw new Error(Tools.translate('Invalid captcha engine'));\n    }\n    await captcha.checkCaptcha(req.hashpass || req.ip, fields);\n    return await UsersModel.setUserCaptchaQuota(boardName, req.hashpass || req.ip, board.captchaQuota);\n  }\n\n  static initialize() {\n    captchas = {};\n    Tools.loadPlugins([__dirname, `${__dirname}/custom`], (fileName, _1, _2, path) => {\n      return ('captcha.js' !== fileName) || (path.split('/') === 'custom');\n    }).map((plugin) => {\n      return (typeof plugin === 'function') ? new plugin() : plugin;\n    }).forEach((captcha) => {\n      Captcha.addCaptcha(captcha);\n    });\n  }\n\n  constructor(id, title) {\n    this.defineProperty('id', id);\n    this.defineProperty('title', () => { return Tools.translate(title); });\n    this.defineSetting('privateKey');\n    this.defineSetting('publicKey');\n  }\n\n  defineSetting(name, def) {\n    Object.defineProperty(this, name, {\n      get: () => {\n        return config(`captcha.${this.id}.${name}`, (typeof def === 'function') ? def() : def);\n      },\n      configurable: true\n    });\n  }\n\n  defineProperty(name, value) {\n    if (typeof value === 'function') {\n      Object.defineProperty(this, name, {\n        get: value,\n        configurable: true\n      });\n    } else {\n      Object.defineProperty(this, name, {\n        value: value,\n        configurable: true\n      });\n    }\n  }\n\n  info() {\n    let model = {\n      id: this.id,\n      title: this.title,\n      publicKey: this.publicKey\n    };\n    this.customInfoFields().forEach((field) => {\n      model[field] = this[field];\n    });\n    return model;\n  }\n\n  customInfoFields() {\n    return [];\n  }\n\n  apiRoutes() {\n    return [];\n  }\n\n  actionRoutes() {\n    return [];\n  }\n}\n"],"sourceRoot":"/source/"}