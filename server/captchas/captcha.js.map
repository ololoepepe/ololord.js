{"version":3,"sources":["captchas/captcha.js"],"names":["Tools","UsersModel","captchas","Captcha","id","captcha","toArray","sort","c1","c2","localeCompare","map","req","fields","boardName","captchaEngine","board","Error","translate","captchaEnabled","getUserCaptchaQuota","hashpass","ip","quota","captchaQuota","useCaptcha","supportedCaptchaEngines","length","ceid","contains","NODE_CAPTCHA_ID","checkCaptcha","setUserCaptchaQuota","loadPlugins","__dirname","fileName","_1","_2","path","split","plugin","forEach","addCaptcha","title","defineProperty","defineSetting","name","def","Object","get","configurable","value","model","publicKey","customInfoFields","field"],"mappings":"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","file":"captcha.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as UsersModel from '../models/users';\n\nlet captchas = {};\n\nexport default class Captcha {\n  static captcha(id) {\n    return captchas[id];\n  }\n\n  static addCaptcha(captcha) {\n    captchas[captcha.id] = captcha;\n  }\n\n  static captchaIDs() {\n    return _(captchas).toArray().sort((c1, c2) => { return c1.id.localeCompare(c2.id); }).map(captcha => captcha.id);\n  }\n\n  static async checkCaptcha(req, fields = {}) {\n    let { boardName, captchaEngine } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    if (!board.captchaEnabled) {\n      return;\n    }\n    let quota = await UsersModel.getUserCaptchaQuota(boardName, req.hashpass || req.ip);\n    if (board.captchaQuota > 0 && +quota > 0) {\n      return await UsersModel.useCaptcha(boardName, req.hashpass || req.ip);\n    }\n    let supportedCaptchaEngines = board.supportedCaptchaEngines;\n    if (supportedCaptchaEngines.length < 1) {\n      throw new Error(Tools.translate('Internal error: no captcha engine'));\n    }\n    let ceid = captchaEngine || null;\n    if (!ceid || !_(supportedCaptchaEngines).contains(ceid)) {\n      if (_(supportedCaptchaEngines).contains(Tools.NODE_CAPTCHA_ID)) {\n        ceid = Tools.NODE_CAPTCHA_ID;\n      } else {\n        ceid = supportedCaptchaEngines[0].id;\n      }\n    }\n    let captcha = Captcha.captcha(ceid);\n    if (!captcha) {\n      throw new Error(Tools.translate('Invalid captcha engine'));\n    }\n    await captcha.checkCaptcha(req.hashpass || req.ip, fields);\n    return await UsersModel.setUserCaptchaQuota(boardName, req.hashpass || req.ip, board.captchaQuota);\n  }\n\n  static initialize() {\n    captchas = {};\n    Tools.loadPlugins([__dirname, `${__dirname}/custom`], (fileName, _1, _2, path) => {\n      return ('captcha.js' !== fileName) || (path.split('/') === 'custom');\n    }).map((plugin) => {\n      return (typeof plugin === 'function') ? new plugin() : plugin;\n    }).forEach((captcha) => {\n      Captcha.addCaptcha(captcha);\n    });\n  }\n\n  constructor(id, title) {\n    this.defineProperty('id', id);\n    this.defineProperty('title', () => { return Tools.translate(title); });\n    this.defineSetting('privateKey');\n    this.defineSetting('publicKey');\n  }\n\n  defineSetting(name, def) {\n    Object.defineProperty(this, name, {\n      get: () => {\n        return config(`captcha.${this.id}.${name}`, (typeof def === 'function') ? def() : def);\n      },\n      configurable: true\n    });\n  }\n\n  defineProperty(name, value) {\n    if (typeof value === 'function') {\n      Object.defineProperty(this, name, {\n        get: value,\n        configurable: true\n      });\n    } else {\n      Object.defineProperty(this, name, {\n        value: value,\n        configurable: true\n      });\n    }\n  }\n\n  info() {\n    let model = {\n      id: this.id,\n      title: this.title,\n      publicKey: this.publicKey\n    };\n    this.customInfoFields().forEach((field) => {\n      model[field] = this[field];\n    });\n    return model;\n  }\n\n  customInfoFields() {\n    return [];\n  }\n\n  apiRoutes() {\n    return [];\n  }\n\n  actionRoutes() {\n    return [];\n  }\n}\n"]}