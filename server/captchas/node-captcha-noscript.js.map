{"version":3,"sources":["captchas/node-captcha-noscript.js"],"names":["req","res","next","challenge","challenges","ip","sendFile","fileName","root","CAPTCHA_PATH","self","fileMode","size","height","width","color","background","lineWidth","noise","noiseColor","complexity","spacing","response","data","now","write","set","timer","setTimeout","remove","catch","err","error","delete","ttl","end","getNodeCaptchaImage","Tools","__dirname","NodeCaptchaNoscript","list","fileNames","series","filter","split","name","suffix","test","stack","translate","noop","Map","defineSetting","defineProperty","Math","round","MINUTE","nodeCaptchaResponse","get","Error","clearTimeout","method","path","handler","bind"],"mappings":"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","file":"node-captcha-noscript.js","sourcesContent":["import _ from 'underscore';\nimport captcha from 'node-captcha';\nimport FS from 'q-io/fs';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst CAPTCHA_PATH = `${__dirname}/../../tmp/node-captcha-noscript`;\n\nasync function getNodeCaptchaImage(req, res, next) {\n  let challenge = this.challenges[req.ip];\n  if (challenge) {\n    res.sendFile(challenge.fileName, { root: CAPTCHA_PATH });\n    return;\n  }\n  let self = this;\n  captcha({\n    fileMode: 2,\n    size: this.size,\n    height: this.height,\n    width: this.width,\n    color: this.color,\n    background: this.background,\n    lineWidth: this.lineWidth,\n    noise: this.noise,\n    noiseColor: this.noiseColor,\n    complexity: this.complexity,\n    spacing: this.spacing\n  }, async function(response, data) {\n    try {\n      let fileName = `${_.now()}.png`;\n      await FS.write(`${CAPTCHA_PATH}/${fileName}`, data);\n      self.challenges.set(req.ip, {\n        ip: req.ip,\n        fileName: fileName,\n        response: response,\n        timer: setTimeout(() => {\n          FS.remove(`${CAPTCHA_PATH}/${fileName}`).catch((err) => {\n            Logger.error(err);\n          });\n          self.challenges.delete(challenge);\n        }, self.ttl)\n      });\n      res.end(data);\n    } catch (err) {\n      next(err);\n    }\n  });\n}\n\nexport default class NodeCaptchaNoscript extends Captcha {\n  static async removeOldCaptchImages() {\n    try {\n      let fileNames = await FS.list(CAPTCHA_PATH);\n      await Tools.series(fileNames.filter((fileName) => {\n        let [name, suffix] = fileName.split('.');\n        return 'png' === suffix && /^[0-9]+$/.test(name);\n      }), async function(fileName) {\n        return await FS.remove(`${CAPTCHA_PATH}/${fileName}`);\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  constructor() {\n    super('node-captcha-noscript', Tools.translate.noop('Node captcha (no script)'));\n    this.challenges = new Map();\n    this.defineSetting('size', 6);\n    this.defineSetting('height', 60);\n    this.defineSetting('color', 'rgb(0,0,0)');\n    this.defineSetting('background', 'rgb(255,255,255)');\n    this.defineSetting('lineWidth', 4);\n    this.defineSetting('noise', true);\n    this.defineSetting('complexity', 1);\n    this.defineSetting('spacing', 4);\n    this.defineProperty('width', () => {\n      return config('captcha.node-captcha.width', Math.round((this.size * this.height) / 1.8));\n    });\n    this.defineProperty('noiseColor', () => {\n      return config('captcha.node-captcha.noiseColor', this.color);\n    });\n    this.defineSetting('ttl', 5 * Tools.MINUTE);\n  }\n\n  async checkCaptcha({ ip }, { nodeCaptchaResponse }) {\n    let challenge = this.challenges.get(ip);\n    let response = nodeCaptchaResponse;\n    if (!challenge) {\n      throw new Error(Tools.translate('No captcha for this IP'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    clearTimeout(challenge.timer);\n    FS.remove(`${CAPTCHA_PATH}/${challenge.fileName}`).catch((err) => {\n      Logger.error(err);\n    });\n    this.challenges.delete(ip);\n    if (response !== challenge.response) {\n      throw new Error(Tools.translate('Captcha is solved incorrectly'));\n    }\n  }\n\n  apiRoutes() {\n    return [{\n      method: 'get',\n      path: '/nodeCaptchaImage.png',\n      handler: getNodeCaptchaImage.bind(this)\n    }];\n  }\n}\n"]}