{"version":3,"sources":["captchas/node-captcha.js"],"names":["_1","res","fileMode","saveDir","CAPTCHA_PATH","size","height","width","color","background","lineWidth","noise","noiseColor","complexity","spacing","response","fileName","challengeID","v4","challenges","set","id","timer","setTimeout","remove","catch","err","error","delete","ttl","json","challenge","getNodeCaptchaImage","Tools","__dirname","NodeCaptcha","list","fileNames","series","filter","split","name","suffix","test","stack","NODE_CAPTCHA_ID","translate","noop","Map","defineSetting","defineProperty","Math","round","MINUTE","nodeCaptchaChallenge","nodeCaptchaResponse","Error","get","clearTimeout","method","path","handler","bind"],"mappings":"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","file":"node-captcha.js","sourcesContent":["import captcha from 'node-captcha';\nimport FS from 'q-io/fs';\nimport UUID from 'uuid';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst CAPTCHA_PATH = `${__dirname}/../../public/node-captcha`;\n\nasync function getNodeCaptchaImage(_1, res) {\n  captcha({\n    fileMode: 1,\n    saveDir: CAPTCHA_PATH,\n    size: this.size,\n    height: this.height,\n    width: this.width,\n    color: this.color,\n    background: this.background,\n    lineWidth: this.lineWidth,\n    noise: this.noise,\n    noiseColor: this.noiseColor,\n    complexity: this.complexity,\n    spacing: this.spacing\n  }, (response, fileName) => {\n    let challengeID = UUID.v4();\n    this.challenges.set(challengeID, {\n      id: challengeID,\n      fileName: fileName,\n      response: response,\n      timer: setTimeout(() => {\n        FS.remove(`${CAPTCHA_PATH}/${fileName}`).catch((err) => {\n          Logger.error(err);\n        });\n        this.challenges.delete(challengeID);\n      }, this.ttl)\n    });\n    res.json({\n      challenge: challengeID,\n      fileName: fileName,\n      ttl: this.ttl\n    });\n  });\n}\n\nexport default class NodeCaptcha extends Captcha {\n  static async removeOldCaptchImages() {\n    try {\n      let fileNames = await FS.list(CAPTCHA_PATH);\n      await Tools.series(fileNames.filter((fileName) => {\n        let [name, suffix] = fileName.split('.');\n        return 'png' === suffix && /^[0-9]+$/.test(name);\n      }), async function(fileName) {\n        return await FS.remove(`${CAPTCHA_PATH}/${fileName}`);\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  constructor() {\n    super(Tools.NODE_CAPTCHA_ID, Tools.translate.noop('Node captcha'));\n    this.challenges = new Map();\n    this.defineSetting('size', 6);\n    this.defineSetting('height', 60);\n    this.defineSetting('color', 'rgb(0,0,0)');\n    this.defineSetting('background', 'rgb(255,255,255)');\n    this.defineSetting('lineWidth', 4);\n    this.defineSetting('noise', true);\n    this.defineSetting('complexity', 1);\n    this.defineSetting('spacing', 4);\n    this.defineProperty('width', () => {\n      return config('captcha.node-captcha.width', Math.round((this.size * this.height) / 1.8));\n    });\n    this.defineProperty('noiseColor', () => {\n      return config('captcha.node-captcha.noiseColor', this.color);\n    });\n    this.defineSetting('ttl', 5 * Tools.MINUTE);\n  }\n\n  customInfoFields() {\n    return ['size', 'height', 'width', 'ttl'];\n  }\n\n  async checkCaptcha(_1, { nodeCaptchaChallenge, nodeCaptchaResponse }) {\n    let challengeID = nodeCaptchaChallenge;\n    let response = nodeCaptchaResponse;\n    if (!challengeID) {\n      throw new Error(Tools.translate('Captcha challenge is empty'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let challenge = this.challenges.get(challengeID);\n    if (!challenge) {\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n    clearTimeout(challenge.timer);\n    FS.remove(`${CAPTCHA_PATH}/${challenge.fileName}`).catch((err) => {\n      Logger.error(err);\n    });\n    this.challenges.delete(challengeID);\n    if (response !== challenge.response) {\n      throw new Error(Tools.translate('Captcha is solved incorrectly'));\n    }\n  }\n\n  apiRoutes() {\n    return [{\n      method: 'get',\n      path: '/nodeCaptchaImage.json',\n      handler: getNodeCaptchaImage.bind(this)\n    }];\n  }\n}\n"]}