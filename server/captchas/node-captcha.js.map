{"version":3,"sources":["captchas/node-captcha.js"],"names":[],"mappings":"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","file":"captchas/node-captcha.js","sourcesContent":["import captcha from 'node-captcha';\nimport FS from 'q-io/fs';\nimport UUID from 'uuid';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst CAPTCHA_PATH = `${__dirname}/../../public/node-captcha`;\n\nasync function getNodeCaptchaImage(_1, res) {\n  captcha({\n    fileMode: 1,\n    saveDir: CAPTCHA_PATH,\n    size: this.size,\n    height: this.height,\n    width: this.width,\n    color: this.color,\n    background: this.background,\n    lineWidth: this.lineWidth,\n    noise: this.noise,\n    noiseColor: this.noiseColor,\n    complexity: this.complexity,\n    spacing: this.spacing\n  }, (response, fileName) => {\n    let challengeID = UUID.v4();\n    this.challenges.set(challengeID, {\n      id: challengeID,\n      fileName: fileName,\n      response: response,\n      timer: setTimeout(() => {\n        FS.remove(`${CAPTCHA_PATH}/${fileName}`).catch((err) => {\n          Logger.error(err);\n        });\n        this.challenges.delete(challengeID);\n      }, this.ttl)\n    });\n    res.json({\n      challenge: challengeID,\n      fileName: fileName,\n      ttl: this.ttl\n    });\n  });\n}\n\nexport default class NodeCaptcha extends Captcha {\n  static async removeOldCaptchImages() {\n    try {\n      let fileNames = await FS.list(CAPTCHA_PATH);\n      await Tools.series(fileNames.filter((fileName) => {\n        let [name, suffix] = fileName.split('.');\n        return 'png' === suffix && /^[0-9]+$/.test(name);\n      }), async function(fileName) {\n        return await FS.remove(`${CAPTCHA_PATH}/${fileName}`);\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  constructor() {\n    super(Tools.NODE_CAPTCHA_ID, Tools.translate.noop('Node captcha'));\n    this.challenges = new Map();\n    this.defineSetting('size', 6);\n    this.defineSetting('height', 60);\n    this.defineSetting('color', 'rgb(0,0,0)');\n    this.defineSetting('background', 'rgb(255,255,255)');\n    this.defineSetting('lineWidth', 4);\n    this.defineSetting('noise', true);\n    this.defineSetting('complexity', 1);\n    this.defineSetting('spacing', 4);\n    this.defineProperty('width', () => {\n      return config('captcha.node-captcha.width', Math.round((this.size * this.height) / 1.8));\n    });\n    this.defineProperty('noiseColor', () => {\n      return config('captcha.node-captcha.noiseColor', this.color);\n    });\n    this.defineSetting('ttl', 5 * Tools.MINUTE);\n  }\n\n  customInfoFields() {\n    return ['size', 'height', 'width', 'ttl'];\n  }\n\n  async checkCaptcha(_1, { nodeCaptchaChallenge, nodeCaptchaResponse }) {\n    let challengeID = nodeCaptchaChallenge;\n    let response = nodeCaptchaResponse;\n    if (!challengeID) {\n      throw new Error(Tools.translate('Captcha challenge is empty'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    let challenge = this.challenges.get(challengeID);\n    if (!challenge) {\n      throw new Error(Tools.translate('Invalid captcha'));\n    }\n    clearTimeout(challenge.timer);\n    FS.remove(`${CAPTCHA_PATH}/${challenge.fileName}`).catch((err) => {\n      Logger.error(err);\n    });\n    this.challenges.delete(challengeID);\n    if (response !== challenge.response) {\n      throw new Error(Tools.translate('Captcha is solved incorrectly'));\n    }\n  }\n\n  apiRoutes() {\n    return [{\n      method: 'get',\n      path: '/nodeCaptchaImage.json',\n      handler: getNodeCaptchaImage.bind(this)\n    }];\n  }\n}\n"],"sourceRoot":"/source/"}