{"version":3,"sources":["server.js"],"names":[],"mappings":";;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAY,Q;;AACZ;;;;AACA;;;;AACA;;IAAY,G;;AACZ;;;;AACA;;IAAY,a;;AACZ;;;;AACA;;IAAY,K;;AACZ;;IAAY,W;;AACZ;;IAAY,U;;AACZ;;IAAY,e;;AACZ;;IAAY,U;;;;;;;;AAEZ,SAAS,YAAT,GAAwB;AACtB;AAAA,wDAAe,kBAAe,MAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb,sBAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,sBAAhB,EAAwC,EAAxC,EAA4C,QAAQ,GAApD,CAAZ;AADa;AAAA;AAAA,oBAMP,OANO,EAOP,MAPO,EAQP,EARO,EAuCP,aAvCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGL,sBAAY,UAAZ,EAHK;;AAAA;AAAA;AAAA,+BAIL,YAAY,UAAZ,EAJK;;AAAA;AAAA;AAAA,+BAKL,SAAS,eAAT,EALK;;AAAA;AAMP,+BANO,GAMG,IAAI,OAAJ,EANH;AAOP,8BAPO,GAOE,eAAK,YAAL,uBAPF;AAQP,0BARO,GAQF,8BAAoB,MAApB,CARE;;AASX,2BAAG,EAAH,CAAM,iBAAN;AAAA,8EAAyB,iBAAe,GAAf,EAAoB,IAApB;AAAA,gCACnB,IADmB,QAEjB,OAFiB,EAER,UAFQ,EAEI,UAFJ,EAEgB,YAFhB,EAE8B,QAF9B,EAWjB,EAXiB;;AAAA;AAAA;AAAA;AAAA;AACnB,wCADmB,GACZ,IAAI,IAAJ,IAAY,EADA;AAAA;AAAA,2CAEiD,WAAW,cAAX,CAA0B;AAChG,4CAAM,IAD0F;AAEhG,iDAAW,KAAK,SAFgF;AAGhG,kDAAY,KAAK,UAH+E;AAIhG,kDAAY,KAAK,UAJ+E;AAKhG,4CAAM,KAAK;AALqF,qCAA1B,CAFjD;;AAAA;AAAA;AAEjB,2CAFiB,QAEjB,OAFiB;AAER,8CAFQ,QAER,UAFQ;AAEI,8CAFJ,QAEI,UAFJ;AAEgB,gDAFhB,QAEgB,YAFhB;AAE8B,4CAF9B,QAE8B,QAF9B;;AASvB,wCAAI,eAAe,YAAnB,EAAiC;AAC/B,8CAAQ,IAAR,GAAe,IAAf;AACI,wCAF2B,GAEtB,SAAS,QAAT,GAAoB,IAApB,GAA2B,SAAS,EAFd;;AAG/B,0CAAI,IAAJ,CAAS,iBAAT,EAA4B;AAC1B,8CAAM,gBADoB;AAE1B,iDAAS;AACP,mDAAS,OADF;AAEP,qDAAW,KAAK,SAFT;AAGP,sDAAY,KAAK,UAHV;AAIP,sDAAY;AAJL,yCAFiB;AAQ1B,6CAAK,EARqB;AAS1B,oDAAY,SAAS;AATK,uCAA5B;AAWD;AACD,4CAAQ,IAAR,GAAe,KAAf;AAxBuB,qEAyBhB;AACL,+CAAS,OADJ;AAEL,kDAAY;AAFP,qCAzBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAzB;;AAAA;AAAA;AAAA;AAAA;AA8BI,qCAvCO,GAuCS,IAAI,GAAJ,EAvCT;;AAwCX,2BAAG,EAAH,CAAM,0BAAN,EAAkC,UAAC,GAAD,EAAM,IAAN,EAAe;AAAA,sCACb,IAAI,IAAJ,IAAY,EADC;;AAAA,8BACzC,SADyC,SACzC,SADyC;AAAA,8BAC9B,YAD8B,SAC9B,YAD8B;;AAE/C,8BAAI,MAAS,SAAT,SAAsB,YAA1B;AACA,8BAAI,cAAc,GAAd,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,0CAAc,GAAd,CAAkB,GAAlB,EAAuB,GAAvB,CAA2B,IAA3B;AACD,2BAFD,MAEO;AACL,gCAAI,IAAI,IAAI,GAAJ,EAAR;AACA,8BAAE,GAAF,CAAM,IAAN;AACA,0CAAc,GAAd,CAAkB,GAAlB,EAAuB,CAAvB;AACD;AACF,yBAVD;AAWA,2BAAG,EAAH,CAAM,8BAAN,EAAsC,UAAC,GAAD,EAAM,IAAN,EAAe;AAAA,sCACjB,IAAI,IAAJ,IAAY,EADK;;AAAA,8BAC7C,SAD6C,SAC7C,SAD6C;AAAA,8BAClC,YADkC,SAClC,YADkC;;AAEnD,8BAAI,MAAS,SAAT,SAAsB,YAA1B;AACA,8BAAI,IAAI,cAAc,GAAd,CAAkB,GAAlB,CAAR;AACA,8BAAI,CAAC,CAAL,EAAQ;AACN;AACD;AACD,4BAAE,MAAF,CAAS,IAAT;AACA,8BAAI,EAAE,IAAF,GAAS,CAAb,EAAgB;AACd,0CAAc,MAAd,CAAqB,GAArB;AACD;AACF,yBAXD;AAYA,+BAAO,MAAP,CAAc,sBAAO,aAAP,CAAd,EAAqC,YAAM;AACzC,kCAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,gCAAhB,EAAkD,EAAlD,EAAsD,QAAQ,GAA9D,EAAmE,sBAAO,aAAP,CAAnE,CAAZ;AACA,8BAAI,EAAJ,CAAO,MAAP,EAAe,UAAC,MAAD,EAAY;AAAE,oCAAQ,IAAR,CAAa,MAAb;AAAuB,2BAApD;AACA,8BAAI,EAAJ,CAAO,MAAP,EAAe,YAAM;AACnB,mCAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,qCAAO,KAAP,CAAa,YAAM;AACjB,wCAAQ,OAAR,CAAgB,UAAC,MAAD,EAAY;AAC1B,0CAAQ,MAAR,CAAe,MAAf;AACA,yCAAO,OAAP;AACD,iCAHD;AAIA,8CAAc,KAAd;AACA,wCAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,eAAhB,EAAiC,EAAjC,EAAqC,QAAQ,GAA7C,CAAZ;AACA;AACD,+BARD;AASD,6BAVM,CAAP;AAWD,2BAZD;AAaA,8BAAI,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpB,mCAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,qCAAO,MAAP,CAAc,sBAAO,aAAP,CAAd,EAAqC,YAAM;AACzC,wCAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,gCAAhB,EAAkD,EAAlD,EAAsD,QAAQ,GAA9D,EAAmE,sBAAO,aAAP,CAAnE,CAAZ;AACA;AACD,+BAHD;AAID,6BALM,CAAP;AAMD,2BAPD;AAQA,8BAAI,EAAJ,CAAO,iBAAP,EAA0B,YAA6C;AAAA,8FAAP,EAAO;;AAAA,gCAA1C,IAA0C,SAA1C,IAA0C;AAAA,gCAApC,OAAoC,SAApC,OAAoC;AAAA,gCAA3B,GAA2B,SAA3B,GAA2B;AAAA,gCAAtB,UAAsB,SAAtB,UAAsB;;AACrE,+BAAG,WAAH,CAAe,IAAf,EAAqB,OAArB,EAA8B,GAA9B,EAAmC,UAAnC;AACD,2BAFD;AAGA,8BAAI,EAAJ,CAAO,QAAP;AAAA,gFAAiB,kBAAe,IAAf;AAAA,kCACX,CADW;AAAA;AAAA;AAAA;AAAA;AACX,uCADW,GACP,qBAAmB,KAAK,IAAxB,CADO;;AAAA,4CAEX,OAAO,CAAP,KAAa,UAFF;AAAA;AAAA;AAAA;;AAAA,4CAGP,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,yBAAhB,CAAV,CAHO;;AAAA;AAAA;AAAA,6CAKF,EAAE,IAAF,kBAAwB,KAAK,GAA7B,EAAkC,KAAK,IAAvC,CALE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAjB;;AAAA;AAAA;AAAA;AAAA;AAOA,8BAAI,EAAJ,CAAO,cAAP,EAAuB,YAAM;AAC3B,4CAAM,UAAN;AACD,2BAFD;AAGA,8BAAI,EAAJ,CAAO,iBAAP,4CAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACX,SAAS,eAAT,EADW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA1B;AAGA,8BAAI,EAAJ,CAAO,qBAAP,EAA8B,UAAC,IAAD,EAAU;AACtC,sDAAE,IAAF,EAAQ,IAAR,CAAa,UAAC,EAAD,EAAK,GAAL,EAAa;AACxB,kCAAI,IAAI,cAAc,GAAd,CAAkB,GAAlB,CAAR;AACA,kCAAI,CAAC,CAAL,EAAQ;AACN;AACD;AACD,gCAAE,OAAF,CAAU,UAAC,IAAD,EAAU;AAClB,qCAAK,WAAL,CAAiB,SAAjB;AACD,+BAFD;AAGD,6BARD;AASD,2BAVD;AAWA,8BAAI,EAAJ,CAAO,kBAAP,EAA2B,YAAM;AAC9B,mCAAO,cAAc,MAAd,EAAP;AACF,2BAFD;AAGA,8BAAI,IAAJ,CAAS,OAAT,EAAkB,KAAlB,CAAwB,UAAC,GAAD,EAAS;AAC/B,6CAAO,KAAP,CAAa,GAAb;AACD,2BAFD;AAGD,yBAzDD;AA0DA,+BAAO,EAAP,CAAU,YAAV,EAAwB,UAAC,MAAD,EAAY;AAClC,kCAAQ,GAAR,CAAY,MAAZ;AACA,iCAAO,EAAP,CAAU,OAAV,EAAmB,YAAM;AACvB,oCAAQ,MAAR,CAAe,MAAf;AACD,2BAFD;AAGD,yBALD;;AAzHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAgIX,sBAAQ,GAAR;AACA,+BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAjIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,OAmIG;AACD,WAAO,sBAAO,oBAAP,CADN;AAED,aAAS;AAFR,GAnIH;AAuID;;AAED,SAAS,gBAAT,GAA4B;AAC1B,MAAI,WAAW,qBAAE,GAAF,GAAQ,QAAR,EAAf;AACA,MAAI,YAAY,iBAAiB,YAAjC,EAA+C;AAC7C,qBAAiB,YAAjB,GAAgC,QAAhC;AACA,WAAO,QAAP;AACD;AACD,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,yDAAW;AAAA,UACL,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACY,UADZ;;AAAA;AACL,sBADK;;AAET,sBAAQ,QAAR;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX,IAGG,CAHH;AAID,GALM,CAAP;AAMD;;AAED,SAAS,OAAT,CAAiB,YAAjB,EAA+B;;AAE7B,MAAI,CAAC,QAAQ,KAAb,EAAoB;AAClB,YAAQ,KAAR,GAAgB,CAAhB;AACD;AACD,IAAE,QAAQ,KAAV;AACA,MAAI,sBAAO,oBAAP,MAAiC,QAAQ,KAA7C,EAAoD;AAClD,eAAW,4BAAX;AACA,QAAI,sBAAO,2BAAP,CAAJ,EAAyC;AACvC,kBAAY,gBAAgB,kBAAhB,CAAmC,IAAnC,CAAwC,eAAxC,CAAZ,EACE,sBAAO,uBAAP,IAAkC,MAAM,MAD1C;AAED;AACD,QAAI,sBAAO,oBAAP,CAAJ,EAAkC;AAChC,kBAAY,gBAAgB,SAAhB,CAA0B,IAA1B,iBAAZ,EAA6D,sBAAO,gBAAP,IAA2B,MAAM,MAA9F;AACD;AACD;AACD;AACF;;AAED,SAAS,YAAT,CAAsB,YAAtB,EAAoC;AAClC,UAAQ,GAAR,CAAY,MAAM,SAAN,CAAgB,iCAAhB,CAAZ;AACA;AACA,MAAI,EAAJ,CAAO,OAAP,EAAgB,QAAQ,IAAR,CAAa,IAAb,EAAmB,YAAnB,CAAhB;AACA,MAAI,EAAJ,CAAO,UAAP,EAAmB,gBAAnB;AACA,MAAI,EAAJ,CAAO,iBAAP,EAA0B,UAAC,IAAD,EAAU;AAClC,WAAO,IAAI,IAAJ,CAAS,iBAAT,EAA4B,IAA5B,CAAP;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,QAAP,EAAiB,UAAC,IAAD,EAAU;AACzB,WAAO,IAAI,MAAJ,CAAW,KAAK,SAAhB,EAA2B,KAAK,YAAhC,EAA8C,KAAK,UAAnD,EAA+D,KAAK,MAApE,CAAP;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,eAAP,EAAwB,UAAC,IAAD,EAAU;;AAChC,WAAO,IAAI,aAAJ,CAAkB,IAAlB,CAAP;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,MAAP,EAAe,YAAM;AACnB,WAAO,IAAI,IAAJ,CAAS,MAAT,CAAP;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpB,WAAO,IAAI,IAAJ,CAAS,OAAT,CAAP;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,cAAP,EAAuB,YAAM;AAC3B,oBAAM,UAAN;AACA,WAAO,IAAI,IAAJ,CAAS,cAAT,CAAP;AACD,GAHD;AAIA,MAAI,EAAJ,CAAO,iBAAP,4CAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClB,SAAS,gBAAT,EADkB;;AAAA;AAAA;AAAA,mBAElB,SAAS,eAAT,EAFkB;;AAAA;AAAA,8CAGjB,IAAI,IAAJ,CAAS,iBAAT,CAHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;AAKA,MAAI,cAAc,EAAlB;AACA,cAAY,YAAM;AAChB,QAAI,0BAAE,WAAF,EAAe,OAAf,EAAJ,EAA8B;AAC5B;AACD;AACD,QAAI,IAAJ,CAAS,qBAAT,EAAgC,WAAhC,EAA6C,KAA7C,CAAmD,UAAC,GAAD,EAAS;AAC1D,uBAAO,KAAP,CAAa,IAAI,KAAJ,IAAa,GAA1B;AACD,KAFD;AAGA,kBAAc,EAAd;AACD,GARD,EAQG,MAAM,MART;AASA,MAAI,EAAJ,CAAO,qBAAP,EAA8B,UAAC,GAAD,EAAS;AACrC,gBAAY,GAAZ,IAAmB,CAAnB;AACD,GAFD;AAGA,MAAI,EAAJ,CAAO,eAAP,EAAwB,UAAC,eAAD,EAAqB;AAC3C,QAAI,eAAJ,EAAqB;AACnB,aAAO,SAAS,QAAT,EAAP;AACD,KAFD,MAEO;;AAEN;AACF,GAND;AAOD;;AAED,gBAAM,UAAN;AACA,kBAAQ,UAAR;AACA,sBAAY,UAAZ;;AAEA,IAAI,kBAAQ,QAAZ,EAAsB;AACpB,4CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAES,sBAAY,qBAAZ,EAFT;;AAAA;AAAA;AAAA,mBAGS,8BAAoB,qBAApB,EAHT;;AAAA;AAAA;AAAA,mBAIS,SAAS,gBAAT,EAJT;;AAAA;AAAA;AAAA,mBAKS,SAAS,eAAT,EALT;;AAAA;AAAA,kBAMO,kBAAQ,QAAR,IAAoB,sBAAO,+BAAP,CAN3B;AAAA;AAAA;AAAA;;AAAA,kBAOS,kBAAQ,OAAR,IAAmB,sBAAO,wBAAP,CAP5B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQa,SAAS,QAAT,EARb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAUa,SAAS,QAAT,CAAkB,CAAC,IAAD,EAAO,YAAP,CAAlB,CAVb;;AAAA;AAAA;AAAA,mBAaS,gBAAgB,kBAAhB,EAbT;;AAAA;AAAA;AAAA,mBAcS,SAAS,gCAAT,EAdT;;AAAA;AAAA;AAAA,mBAeS,SAAS,4BAAT,EAfT;;AAAA;AAAA;AAAA,mBAgBS,SAAS,sBAAT,EAhBT;;AAAA;AAiBG;AAjBH;AAAA;;AAAA;AAAA;AAAA;;AAmBG,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;AACA,oBAAQ,IAAR,CAAa,CAAb;;AApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAuBD,CAxBD,MAwBO;AACL;AACD","file":"server.js","sourcesContent":["\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport _ from 'underscore';\nimport Cluster from 'cluster';\nimport expressCluster from 'express-cluster';\nimport HTTP from 'http';\n\nimport Board from './boards/board';\nimport Captcha from './captchas/captcha';\nimport NodeCaptcha from './captchas/node-captcha';\nimport NodeCaptchaNoscript from './captchas/node-captcha-noscript';\nimport commands from './commands';\nimport controllers from './controllers';\nimport BoardController from './controllers/board';\nimport geolocation from './core/geolocation';\nimport * as Renderer from './core/renderer';\nimport WebSocketServer from './core/websocket-server';\nimport config from './helpers/config';\nimport * as IPC from './helpers/ipc';\nimport Logger from './helpers/logger';\nimport * as OnlineCounter from './helpers/online-counter';\nimport Program from './helpers/program';\nimport * as Tools from './helpers/tools';\nimport * as BoardsModel from './models/boards';\nimport * as ChatsModel from './models/chats';\nimport * as StatisticsModel from './models/statistics';\nimport * as UsersModel from './models/users';\n\nfunction spawnCluster() {\n  expressCluster(async function(worker) {\n    console.log(Tools.translate('[$[1]] Initializingâ€¦', '', process.pid));\n    try {\n      await geolocation.initialize();\n      await BoardsModel.initialize();\n      await Renderer.reloadTemplates();\n      let sockets = new WeakSet();\n      let server = HTTP.createServer(controllers);\n      let ws = new WebSocketServer(server);\n      ws.on('sendChatMessage', async function(msg, conn) {\n        let data = msg.data || {};\n        let { message, chatNumber, senderHash, receiverHash, receiver } = await ChatsModel.addChatMessage({\n          user: conn,\n          boardName: data.boardName,\n          postNumber: data.postNumber,\n          chatNumber: data.chatNumber,\n          text: data.text\n        });\n        if (senderHash !== receiverHash) {\n          message.type = 'in';\n          let ip = receiver.hashpass ? null : receiver.ip;\n          IPC.send('sendChatMessage', {\n            type: 'newChatMessage',\n            message: {\n              message: message,\n              boardName: data.boardName,\n              postNumber: data.postNumber,\n              chatNumber: chatNumber\n            },\n            ips: ip,\n            hashpasses: receiver.hashpass\n          });\n        }\n        message.type = 'out';\n        return {\n          message: message,\n          chatNumber: chatNumber\n        };\n      });\n      let subscriptions = new Map();\n      ws.on('subscribeToThreadUpdates', (msg, conn) => {\n        let { boardName, threadNumber } = msg.data || {};\n        let key = `${boardName}/${threadNumber}`;\n        if (subscriptions.has(key)) {\n          subscriptions.get(key).add(conn);\n        } else {\n          let s = new Set();\n          s.add(conn);\n          subscriptions.set(key, s);\n        }\n      });\n      ws.on('unsubscribeFromThreadUpdates', (msg, conn) => {\n        let { boardName, threadNumber } = msg.data || {};\n        let key = `${boardName}/${threadNumber}`;\n        let s = subscriptions.get(key);\n        if (!s) {\n          return;\n        }\n        s.delete(conn);\n        if (s.size < 1) {\n          subscriptions.delete(key);\n        }\n      });\n      server.listen(config('server.port'), () => {\n        console.log(Tools.translate('[$[1]] Listening on port $[2]â€¦', '', process.pid, config('server.port')));\n        IPC.on('exit', (status) => { process.exit(status); });\n        IPC.on('stop', () => {\n          return new Promise((resolve, reject) => {\n            server.close(() => {\n              sockets.forEach((socket) => {\n                sockets.delete(socket);\n                socket.destroy();\n              });\n              OnlineCounter.clear();\n              console.log(Tools.translate('[$[1]] Closed', '', process.pid));\n              resolve();\n            });\n          });\n        });\n        IPC.on('start', () => {\n          return new Promise((resolve, reject) => {\n            server.listen(config('server.port'), () => {\n              console.log(Tools.translate('[$[1]] Listening on port $[2]â€¦', '', process.pid, config('server.port')));\n              resolve();\n            });\n          });\n        });\n        IPC.on('sendChatMessage', ({ type, message, ips, hashpasses } = {}) => {\n          ws.sendMessage(type, message, ips, hashpasses);\n        });\n        IPC.on('render', async function(data) {\n          let f = BoardController[`${data.type}`];\n          if (typeof f !== 'function') {\n            throw new Error(Tools.translate('Invalid render function'));\n          }\n          return await f.call(BoardController, data.key, data.data);\n        });\n        IPC.on('reloadBoards', () => {\n          Board.initialize();\n        });\n        IPC.on('reloadTemplates', async function() {\n          return await Renderer.reloadTemplates();\n        });\n        IPC.on('notifyAboutNewPosts', (keys) => {\n          _(keys).each((_1, key) => {\n            let s = subscriptions.get(key);\n            if (!s) {\n              return;\n            }\n            s.forEach((conn) => {\n              conn.sendMessage('newPost');\n            });\n          });\n        });\n        IPC.on('getConnectionIPs', () => {\n           return OnlineCounter.unique();\n        });\n        IPC.send('ready').catch((err) => {\n          Logger.error(err);\n        });\n      });\n      server.on('connection', (socket) => {\n        sockets.add(socket);\n        socket.on('close', () => {\n          sockets.delete(socket);\n        });\n      });\n    } catch (err) {\n      console.log(err);\n      Logger.error(err.stack || err);\n    }\n  }, {\n    count: config('system.workerCount'),\n    respawn: true\n  });\n}\n\nfunction generateFileName() {\n  let fileName = _.now().toString();\n  if (fileName != generateFileName.lastFileName) {\n    generateFileName.lastFileName = fileName;\n    return fileName;\n  }\n  return new Promise((resolve) => {\n    setTimeout(async function() {\n      let fileName = await fileName();\n      resolve(fileName);\n    }, 1);\n  });\n}\n\nfunction onReady(initCallback) {\n  //TODO: May throw error\n  if (!onReady.ready) {\n    onReady.ready = 0;\n  }\n  ++onReady.ready;\n  if (config('system.workerCount') === onReady.ready) {\n    UsersModel.initializeUserBansMonitoring();\n    if (config('server.statistics.enabled')) {\n      setInterval(StatisticsModel.generateStatistics.bind(StatisticsModel),\n        config('server.statistics.ttl') * Tools.MINUTE);\n    }\n    if (config('server.rss.enabled')) {\n      setInterval(BoardController.renderRSS.bind(BoardController), config('server.rss.ttl') * Tools.MINUTE);\n    }\n    commands();\n  }\n}\n\nfunction spawnWorkers(initCallback) {\n  console.log(Tools.translate('Spawning workers, please, waitâ€¦'));\n  spawnCluster();\n  IPC.on('ready', onReady.bind(null, initCallback));\n  IPC.on('fileName', generateFileName);\n  IPC.on('sendChatMessage', (data) => {\n    return IPC.send('sendChatMessage', data);\n  });\n  IPC.on('render', (data) => {\n    return IPC.render(data.boardName, data.threadNumber, data.postNumber, data.action);\n  });\n  IPC.on('renderArchive', (data) => { //TODO\n    return IPC.renderArchive(data);\n  });\n  IPC.on('stop', () => {\n    return IPC.send('stop');\n  });\n  IPC.on('start', () => {\n    return IPC.send('start');\n  });\n  IPC.on('reloadBoards', () => {\n    Board.initialize();\n    return IPC.send('reloadBoards');\n  });\n  IPC.on('reloadTemplates', async function() {\n    await Renderer.compileTemplates();\n    await Renderer.reloadTemplates();\n    return IPC.send('reloadTemplates');\n  });\n  let hasNewPosts = {};\n  setInterval(() => {\n    if (_(hasNewPosts).isEmpty()) {\n      return;\n    }\n    IPC.send('notifyAboutNewPosts', hasNewPosts).catch((err) => {\n      Logger.error(err.stack || err);\n    });\n    hasNewPosts = {};\n  }, Tools.SECOND);\n  IPC.on('notifyAboutNewPosts', (key) => {\n    hasNewPosts[key] = 1;\n  });\n  IPC.on('rerenderCache', (rerenderArchive) => {\n    if (rerenderArchive) {\n      return Renderer.rerender();\n    } else {\n      //return Renderer.rerender(Tools.ARCHIVE_PATHS_REGEXP, true);\n    }\n  });\n}\n\nBoard.initialize();\nCaptcha.initialize();\ncontrollers.initialize();\n\nif (Cluster.isMaster) {\n  (async function() {\n    try {\n      await NodeCaptcha.removeOldCaptchImages();\n      await NodeCaptchaNoscript.removeOldCaptchImages();\n      await Renderer.compileTemplates();\n      await Renderer.reloadTemplates();\n      if (Program.rerender || config('system.rerenderCacheOnStartup')) {\n        if (Program.archive || config('system.rerenderArchive')) { //TODO\n          await Renderer.rerender();\n        } else {\n          await Renderer.rerender(['**', '!/*/arch/*']);\n        }\n      }\n      await StatisticsModel.generateStatistics();\n      await Renderer.generateTemplatingJavaScriptFile();\n      await Renderer.generateCustomJavaScriptFile();\n      await Renderer.generateCustomCSSFiles();\n      spawnWorkers();\n    } catch (err) {\n      Logger.error(err.stack || err);\n      process.exit(1);\n    }\n  })();\n} else {\n  spawnCluster();\n}\n"],"sourceRoot":"/source/"}