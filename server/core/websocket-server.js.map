{"version":3,"sources":["core/websocket-server.js"],"names":["IPC","OnlineCounter","Tools","ChatsModel","SOCKJS_URL","LOG_BEFORE","LOG_VERBOSITY","sendMessage","type","data","write","JSON","stringify","createSockJSServer","createServer","sockjs_url","log","severity","message","error","getTrueIP","conn","trueIp","correctAddress","remoteAddress","ip","headers","WebSocketServer","server","ddosProtection","maxWeight","logFunction","_1","weight","translate","preferIPv4","connectionLimit","maxMessageLength","wsserver","connectionCount","Map","connectionsIP","connectionsHashpass","handlers","on","_handleConnection","bind","installHandlers","prefix","_initSendChatMessage","_initThreadSubscriptions","info","end","alive","count","get","set","ws","request","_handleMessage","_handleClose","length","parse","err","id","loggedData","_handleInitMessage","_handleOtherMessage","handler","stack","has","add","Set","hashpass","delete","size","msg","addChatMessage","user","boardName","postNumber","chatNumber","text","receiver","send","ips","hashpasses","_subscriptions","threadNumber","key","s","isArray","filter","forEach","keys","each"],"mappings":"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","file":"websocket-server.js","sourcesContent":["import _ from 'underscore';\nimport DDDoS from 'dddos';\nimport SockJS from 'sockjs';\n\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as OnlineCounter from '../helpers/online-counter';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\n\nconst SOCKJS_URL = '//cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js';\nconst LOG_BEFORE = config('system.log.middleware.before');\nconst LOG_VERBOSITY = config('system.log.middleware.verbosity');\n\nfunction sendMessage(type, data) {\n  if (!this) {\n    return;\n  }\n  this.write(JSON.stringify({\n    type: type,\n    data: data\n  }));\n}\n\nfunction createSockJSServer() {\n  return SockJS.createServer({\n    sockjs_url: SOCKJS_URL,\n    log: (severity, message) => {\n      switch (severity) {\n      case 'error':\n        Logger.error(message);\n        break;\n      case 'debug':\n      case 'info':\n      default:\n        break;\n      }\n    }\n  });\n}\n\nfunction getTrueIP(conn) {\n  let trueIp = Tools.correctAddress(conn.remoteAddress);\n  if (!trueIp) {\n    return;\n  }\n  if (config('system.detectRealIp')) {\n    let ip = conn.headers['x-forwarded-for'];\n    if (!ip) {\n      ip = conn.headers['x-client-ip'];\n    }\n    if (ip) {\n      return Tools.correctAddress(ip);\n    }\n  }\n  if (config('system.useXRealIp')) {\n    return Tools.correctAddress(conn.headers['x-real-ip']);\n  }\n  return trueIp;\n}\n\nexport default class WebSocketServer {\n  constructor(server) {\n    if (config('server.ddosProtection.enabled')) {\n      this.ddosProtection = new DDDoS({\n        maxWeight: config('server.ddosProtection.ws.maxMessageRate'),\n        logFunction: (ip, _1, weight, maxWeight) => {\n          Logger.error(Tools.translate('DDoS detected (too many WebSocket requests):'),\n            Tools.preferIPv4(ip), weight, maxWeight);\n        }\n      });\n    }\n    this.connectionLimit = config('server.ddosProtection.ws.connectionLimit');\n    this.maxMessageLength = config('server.ddosProtection.ws.maxMessageLength');\n    this.server = server;\n    this.wsserver = createSockJSServer();\n    this.connectionCount = new Map();\n    this.connectionsIP = new Map();\n    this.connectionsHashpass = new Map();\n    this.handlers = new Map();\n    this.wsserver.on('connection', this._handleConnection.bind(this));\n    this.wsserver.installHandlers(this.server, { prefix: '/ws' });\n    this._initSendChatMessage();\n    this._initThreadSubscriptions();\n  }\n\n  _handleConnection(conn) {\n    if ('all' === LOG_BEFORE) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n    }\n    let trueIp = getTrueIP(conn);\n    if (!trueIp) {\n      return conn.end();\n    }\n    conn.ip = trueIp;\n    OnlineCounter.alive(conn.ip);\n    if ('ddos' === LOG_BEFORE) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n    }\n    switch (LOG_BEFORE) {\n    case 'static':\n    case 'middleware':\n    case 'request':\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n      break;\n    default:\n      break;\n    }\n    if (this.ddosProtection) {\n      let count = (this.connectionCount.get(conn.ip) || 0) + 1;\n      if (count > this.connectionLimit) {\n        Logger.error(Tools.translate('DDoS detected (too many WebSocket connections):'),\n          Tools.preferIPv4(conn.ip), count, this.connectionLimit);\n        return conn.end();\n      }\n      this.connectionCount.set(conn.ip, count);\n    }\n    conn.ws = this;\n    conn.sendMessage = sendMessage;\n    conn.on('data', (message) => {\n      if (this.ddosProtection) {\n        this.ddosProtection.request(conn.ip, '', () => {\n          conn.end();\n        }, () => {\n          this._handleMessage(conn, message);\n        });\n      } else {\n        this._handleMessage(conn, message);\n      }\n    });\n    conn.on('close', this._handleClose.bind(this, conn));\n  }\n\n  _handleMessage(conn, message) {\n    OnlineCounter.alive(conn.ip);\n    if ('ip' === LOG_VERBOSITY) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'));\n    }\n    if (this.ddosProtection && message.length > this.maxMessageLength) {\n      Logger.error(Tools.translate('DDoS detected (too long WebSocket message):'),\n        Tools.preferIPv4(conn.ip), message.length, this.maxMessageLength);\n      return conn.end();\n    }\n    try {\n      message = JSON.parse(message);\n    } catch (err) {\n      Logger.error('Failed to parse WebSocket message:', Tools.preferIPv4(conn.ip));\n      message = {};\n    }\n    if ('path' === LOG_VERBOSITY) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'),\n        `${Tools.translate('Type:')} ${message.type}`, `${Tools.translate('ID:')} ${message.id}`);\n    } else if ('query' === LOG_VERBOSITY || 'all' === LOG_VERBOSITY) {\n      let loggedData = ('init' === message.type) ? {} : message.data; //NOTE: This is for the sake of security.\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'),\n        `${Tools.translate('Type:')} ${message.type}`, `${Tools.translate('ID:')} ${message.id}`, loggedData);\n    }\n    switch (message.type) {\n    case 'init':\n      this._handleInitMessage(conn, message);\n      break;\n    default:\n      this._handleOtherMessage(conn, message);\n      break;\n    }\n  }\n\n  async _handleOtherMessage(conn, message) {\n    let handler = this.handlers.get(message.type);\n    if (!handler) {\n      Logger.error(Tools.translate('Unknown WebSocket message type:'), Tools.preferIPv4(conn.ip), message.type);\n      return;\n    }\n    try {\n      let data = await handler(message, conn);\n      conn.write(JSON.stringify({\n        id: message.id,\n        type: message.type,\n        data: data\n      }));\n    } catch (err) {\n      Logger.error('WebSocket:', Tools.preferIPv4(conn.ip), message.type, err.stack || err);\n      try {\n        conn.write(JSON.stringify({\n          id: message.id,\n          type: message.type,\n          error: err\n        }));\n      } catch (err) {\n        //Do nothing\n      }\n    }\n  }\n\n  _handleInitMessage(conn, message) {\n    if (this.connectionsIP.has(conn.ip)) {\n      this.connectionsIP.get(conn.ip).add(conn);\n    } else {\n      this.connectionsIP.set(conn.ip, new Set([conn]));\n    }\n    if (message.data && message.data.hashpass) {\n      conn.hashpass = message.data.hashpass;\n      if (this.connectionsHashpass.has(conn.hashpass)) {\n        this.connectionsHashpass.get(conn.hashpass).add(conn);\n      } else {\n        this.connectionsHashpass.set(conn.hashpass, new Set([conn]));\n      }\n    }\n    conn.sendMessage(message.type);\n  }\n\n  _handleClose(conn) {\n    if (this.ddosProtection) {\n      let count = this.connectionCount.get(conn.ip);\n      this.connectionCount.set(conn.ip, count - 1);\n    }\n    if (this.connectionsIP.has(conn.ip)) {\n      let set = this.connectionsIP.get(conn.ip);\n      set.delete(conn);\n      if (set.size <= 0) {\n        this.connectionsIP.delete(conn.ip);\n      }\n    }\n    if (conn.hashpass && this.connectionsHashpass.has(conn.hashpass)) {\n      let set = this.connectionsHashpass.get(conn.hashpass);\n      set.delete(conn);\n      if (set.size <= 0) {\n        this.connectionsHashpass.delete(conn.hashpass);\n      }\n    }\n  }\n\n  _initSendChatMessage() {\n    this.on('sendChatMessage', async function(msg, conn) {\n      let data = msg.data || {};\n      let { message, chatNumber, receiver } = await ChatsModel.addChatMessage({\n        user: conn,\n        boardName: data.boardName,\n        postNumber: data.postNumber,\n        chatNumber: data.chatNumber,\n        text: data.text\n      });\n      message.type = 'in';\n      let ip = receiver.hashpass ? null : receiver.ip;\n      IPC.send('sendChatMessage', {\n        type: 'newChatMessage',\n        message: {\n          message: message,\n          boardName: data.boardName,\n          postNumber: data.postNumber,\n          chatNumber: chatNumber\n        },\n        ips: ip,\n        hashpasses: receiver.hashpass\n      });\n      message.type = 'out';\n      return {\n        message: message,\n        chatNumber: chatNumber\n      };\n    });\n  }\n\n  _initThreadSubscriptions() {\n    this._subscriptions = new Map();\n    this.on('subscribeToThreadUpdates', (msg, conn) => {\n      let { boardName, threadNumber } = msg.data || {};\n      let key = `${boardName}/${threadNumber}`;\n      if (this._subscriptions.has(key)) {\n        this._subscriptions.get(key).add(conn);\n      } else {\n        let s = new Set();\n        s.add(conn);\n        this._subscriptions.set(key, s);\n      }\n    });\n    this.on('unsubscribeFromThreadUpdates', (msg, conn) => {\n      let { boardName, threadNumber } = msg.data || {};\n      let key = `${boardName}/${threadNumber}`;\n      let s = this._subscriptions.get(key);\n      if (!s) {\n        return;\n      }\n      s.delete(conn);\n      if (s.size < 1) {\n        this._subscriptions.delete(key);\n      }\n    });\n  }\n\n  on(type, handler) {\n    this.handlers.set(type, handler);\n    return this;\n  }\n\n  sendMessage(type, data, ips, hashpasses) {\n    if (!type) {\n      return;\n    }\n    if (!_(ips).isArray()) {\n      ips = [ips];\n    }\n    if (!_(hashpasses).isArray()) {\n      hashpasses = [hashpasses];\n    }\n    let message = JSON.stringify({\n      type: type,\n      data: data\n    });\n    ips.filter(ip => !!ip).forEach((ip) => {\n      (this.connectionsIP.get(ip) || []).forEach((conn) => { conn.write(message); });\n    });\n    hashpasses.filter(hashpass => !!hashpass).forEach((hashpass) => {\n      (this.connectionsHashpass.get(hashpass) || []).forEach((conn) => { conn.write(message); });\n    });\n  }\n\n  notifyAboutNewPosts(keys) {\n    _(keys).each((_1, key) => {\n      let s = this._subscriptions.get(key);\n      if (!s) {\n        return;\n      }\n      s.forEach((conn) => {\n        conn.sendMessage('newPost');\n      });\n    });\n  }\n}\n"]}