{"version":3,"sources":["core/websocket-server.js"],"names":[],"mappings":"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","file":"core/websocket-server.js","sourcesContent":["import _ from 'underscore';\nimport DDDoS from 'dddos';\nimport SockJS from 'sockjs';\n\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as OnlineCounter from '../helpers/online-counter';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\n\nconst SOCKJS_URL = '//cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js';\nconst LOG_BEFORE = config('system.log.middleware.before');\nconst LOG_VERBOSITY = config('system.log.middleware.verbosity');\n\nfunction sendMessage(type, data) {\n  if (!this) {\n    return;\n  }\n  this.write(JSON.stringify({\n    type: type,\n    data: data\n  }));\n}\n\nfunction createSockJSServer() {\n  return SockJS.createServer({\n    sockjs_url: SOCKJS_URL,\n    log: (severity, message) => {\n      switch (severity) {\n      case 'error':\n        Logger.error(message);\n        break;\n      case 'debug':\n      case 'info':\n      default:\n        break;\n      }\n    }\n  });\n}\n\nfunction getTrueIP(conn) {\n  let trueIp = Tools.correctAddress(conn.remoteAddress);\n  if (!trueIp) {\n    return;\n  }\n  if (config('system.detectRealIp')) {\n    let ip = conn.headers['x-forwarded-for'];\n    if (!ip) {\n      ip = conn.headers['x-client-ip'];\n    }\n    if (ip) {\n      return Tools.correctAddress(ip);\n    }\n  }\n  if (config('system.useXRealIp')) {\n    return Tools.correctAddress(conn.headers['x-real-ip']);\n  }\n  return trueIp;\n}\n\nexport default class WebSocketServer {\n  constructor(server) {\n    if (config('server.ddosProtection.enabled')) {\n      this.ddosProtection = new DDDoS({\n        maxWeight: config('server.ddosProtection.ws.maxMessageRate'),\n        logFunction: (ip, _1, weight, maxWeight) => {\n          Logger.error(Tools.translate('DDoS detected (too many WebSocket requests):'),\n            Tools.preferIPv4(ip), weight, maxWeight);\n        }\n      });\n    }\n    this.connectionLimit = config('server.ddosProtection.ws.connectionLimit');\n    this.maxMessageLength = config('server.ddosProtection.ws.maxMessageLength');\n    this.server = server;\n    this.wsserver = createSockJSServer();\n    this.connectionCount = new Map();\n    this.connectionsIP = new Map();\n    this.connectionsHashpass = new Map();\n    this.handlers = new Map();\n    this.wsserver.on('connection', this._handleConnection.bind(this));\n    this.wsserver.installHandlers(this.server, { prefix: '/ws' });\n    this._initSendChatMessage();\n    this._initThreadSubscriptions();\n  }\n\n  _handleConnection(conn) {\n    if ('all' === LOG_BEFORE) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n    }\n    let trueIp = getTrueIP(conn);\n    if (!trueIp) {\n      return conn.end();\n    }\n    conn.ip = trueIp;\n    OnlineCounter.alive(conn.ip);\n    if ('ddos' === LOG_BEFORE) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n    }\n    switch (LOG_BEFORE) {\n    case 'static':\n    case 'middleware':\n    case 'request':\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket connection'));\n      break;\n    default:\n      break;\n    }\n    if (this.ddosProtection) {\n      let count = (this.connectionCount.get(conn.ip) || 0) + 1;\n      if (count > this.connectionLimit) {\n        Logger.error(Tools.translate('DDoS detected (too many WebSocket connections):'),\n          Tools.preferIPv4(conn.ip), count, this.connectionLimit);\n        return conn.end();\n      }\n      this.connectionCount.set(conn.ip, count);\n    }\n    conn.ws = this;\n    conn.sendMessage = sendMessage;\n    conn.on('data', (message) => {\n      if (this.ddosProtection) {\n        this.ddosProtection.request(conn.ip, '', () => {\n          conn.end();\n        }, () => {\n          this._handleMessage(conn, message);\n        });\n      } else {\n        this._handleMessage(conn, message);\n      }\n    });\n    conn.on('close', this._handleClose.bind(this, conn));\n  }\n\n  _handleMessage(conn, message) {\n    OnlineCounter.alive(conn.ip);\n    if ('ip' === LOG_VERBOSITY) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'));\n    }\n    if (this.ddosProtection && message.length > this.maxMessageLength) {\n      Logger.error(Tools.translate('DDoS detected (too long WebSocket message):'),\n        Tools.preferIPv4(conn.ip), message.length, this.maxMessageLength);\n      return conn.end();\n    }\n    try {\n      message = JSON.parse(message);\n    } catch (err) {\n      Logger.error('Failed to parse WebSocket message:', Tools.preferIPv4(conn.ip));\n      message = {};\n    }\n    if ('path' === LOG_VERBOSITY) {\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'),\n        `${Tools.translate('Type:')} ${message.type}`, `${Tools.translate('ID:')} ${message.id}`);\n    } else if ('query' === LOG_VERBOSITY || 'all' === LOG_VERBOSITY) {\n      let loggedData = ('init' === message.type) ? {} : message.data; //NOTE: This is for the sake of security.\n      Logger.info(Tools.preferIPv4(conn.ip), Tools.translate('WebSocket message'),\n        `${Tools.translate('Type:')} ${message.type}`, `${Tools.translate('ID:')} ${message.id}`, loggedData);\n    }\n    switch (message.type) {\n    case 'init':\n      this._handleInitMessage(conn, message);\n      break;\n    default:\n      this._handleOtherMessage(conn, message);\n      break;\n    }\n  }\n\n  async _handleOtherMessage(conn, message) {\n    let handler = this.handlers.get(message.type);\n    if (!handler) {\n      Logger.error(Tools.translate('Unknown WebSocket message type:'), Tools.preferIPv4(conn.ip), message.type);\n      return;\n    }\n    try {\n      let data = await handler(message, conn);\n      conn.write(JSON.stringify({\n        id: message.id,\n        type: message.type,\n        data: data\n      }));\n    } catch (err) {\n      Logger.error('WebSocket:', Tools.preferIPv4(conn.ip), message.type, err.stack || err);\n      try {\n        conn.write(JSON.stringify({\n          id: message.id,\n          type: message.type,\n          error: error\n        }));\n      } catch (err) {\n        //Do nothing\n      }\n    }\n  }\n\n  _handleInitMessage(conn, message) {\n    if (this.connectionsIP.has(conn.ip)) {\n      this.connectionsIP.get(conn.ip).add(conn);\n    } else {\n      this.connectionsIP.set(conn.ip, new Set([conn]));\n    }\n    if (message.data && message.data.hashpass) {\n      conn.hashpass = message.data.hashpass;\n      if (this.connectionsHashpass.has(conn.hashpass)) {\n        this.connectionsHashpass.get(conn.hashpass).add(conn);\n      } else {\n        this.connectionsHashpass.set(conn.hashpass, new Set([conn]));\n      }\n    }\n    conn.sendMessage(message.type);\n  }\n\n  _handleClose(conn) {\n    if (this.ddosProtection) {\n      let count = this.connectionCount.get(conn.ip);\n      this.connectionCount.set(conn.ip, count - 1);\n    }\n    if (this.connectionsIP.has(conn.ip)) {\n      let set = this.connectionsIP.get(conn.ip);\n      set.delete(conn);\n      if (set.size <= 0) {\n        this.connectionsIP.delete(conn.ip);\n      }\n    }\n    if (conn.hashpass && this.connectionsHashpass.has(conn.hashpass)) {\n      let set = this.connectionsHashpass.get(conn.hashpass);\n      set.delete(conn);\n      if (set.size <= 0) {\n        this.connectionsHashpass.delete(conn.hashpass);\n      }\n    }\n  }\n\n  _initSendChatMessage() {\n    this.on('sendChatMessage', async function(msg, conn) {\n      let data = msg.data || {};\n      let { message, chatNumber, senderHash, receiverHash, receiver } = await ChatsModel.addChatMessage({\n        user: conn,\n        boardName: data.boardName,\n        postNumber: data.postNumber,\n        chatNumber: data.chatNumber,\n        text: data.text\n      });\n      if (senderHash !== receiverHash) {\n        message.type = 'in';\n        let ip = receiver.hashpass ? null : receiver.ip;\n        IPC.send('sendChatMessage', {\n          type: 'newChatMessage',\n          message: {\n            message: message,\n            boardName: data.boardName,\n            postNumber: data.postNumber,\n            chatNumber: chatNumber\n          },\n          ips: ip,\n          hashpasses: receiver.hashpass\n        });\n      }\n      message.type = 'out';\n      return {\n        message: message,\n        chatNumber: chatNumber\n      };\n    });\n  }\n\n  _initThreadSubscriptions() {\n    this._subscriptions = new Map();\n    this.on('subscribeToThreadUpdates', (msg, conn) => {\n      let { boardName, threadNumber } = msg.data || {};\n      let key = `${boardName}/${threadNumber}`;\n      if (this._subscriptions.has(key)) {\n        this._subscriptions.get(key).add(conn);\n      } else {\n        let s = new Set();\n        s.add(conn);\n        this._subscriptions.set(key, s);\n      }\n    });\n    this.on('unsubscribeFromThreadUpdates', (msg, conn) => {\n      let { boardName, threadNumber } = msg.data || {};\n      let key = `${boardName}/${threadNumber}`;\n      let s = this._subscriptions.get(key);\n      if (!s) {\n        return;\n      }\n      s.delete(conn);\n      if (s.size < 1) {\n        this._subscriptions.delete(key);\n      }\n    });\n  }\n\n  on(type, handler) {\n    this.handlers.set(type, handler);\n    return this;\n  }\n\n  sendMessage(type, data, ips, hashpasses) {\n    if (!type) {\n      return;\n    }\n    if (!_(ips).isArray()) {\n      ips = [ips];\n    }\n    if (!_(hashpasses).isArray()) {\n      hashpasses = [hashpasses];\n    }\n    let message = JSON.stringify({\n      type: type,\n      data: data\n    });\n    ips.filter(ip => !!ip).forEach((ip) => {\n      (this.connectionsIP.get(ip) || []).forEach((conn) => { conn.write(message); });\n    });\n    hashpasses.filter(hashpass => !!hashpass).forEach((hashpass) => {\n      (this.connectionsHashpass.get(hashpass) || []).forEach((conn) => { conn.write(message); });\n    });\n  }\n\n  notifyAboutNewPosts(keys) {\n    _(keys).each((_1, key) => {\n      let s = this._subscriptions.get(key);\n      if (!s) {\n        return;\n      }\n      s.forEach((conn) => {\n        conn.sendMessage('newPost');\n      });\n    });\n  }\n}\n"],"sourceRoot":"/source/"}