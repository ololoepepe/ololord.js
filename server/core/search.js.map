{"version":3,"sources":["core/search.js"],"names":[],"mappings":"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","file":"core/search.js","sourcesContent":["import _ from 'underscore';\nimport Elasticsearch from 'elasticsearch';\n\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\ntry {\n  var es = new Elasticsearch.Client({ host: config('system.elasticsearch.host') });\n} catch (err) {\n  var es = null;\n}\n\nconst INDEX_NAME = 'ololord.js';\n\nexport async function indexPost({ boardName, postNumber, threadNumber, plainText, subject }) {\n  try {\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: {\n        plainText: plainText,\n        subject: subject,\n        boardName: boardName,\n        threadNumber: threadNumber\n      }\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function getPostIndex(boardName, postNumber) {\n  try {\n    let data = await es.get({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`\n    });\n    return data._source;\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return { _source: {} };\n  }\n}\n\nexport async function updatePostIndex(boardName, postNumber, transformer) {\n  if (typeof transformer !== 'function') {\n    return;\n  }\n  try {\n    let body = await getPostIndex(boardName, postNumber);\n    body = await transformer(body);\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: body\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\n\nexport async function removePostIndex(boardName, postNumber) {\n  try {\n    await es.delete({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nfunction mapPhrase(phrase) {\n  return {\n    bool: {\n      should: [\n        { match_phrase: { plainText: phrase } },\n        { match_phrase: { subject: phrase } }\n      ]\n    }\n  };\n}\n\nexport async function findPosts({ requiredPhrases, excludedPhrases, possiblePhrases }, { boardName, page }) {\n  page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n  let limit = config('system.search.maxResultCount');\n  let startFrom = page * limit;\n  let query = { bool: {} };\n  if (_(requiredPhrases).isArray() && requiredPhrases.length > 0) {\n    query.bool.must = requiredPhrases.map(mapPhrase);\n  }\n  if (boardName && typeof boardName === 'string') {\n    query.bool.must = (query.bool.must || []).concat({ match_phrase: { boardName: boardName } });\n  }\n  if (_(excludedPhrases).isArray() && excludedPhrases.length > 0) {\n    query.bool.must_not = excludedPhrases.map(mapPhrase);\n  }\n  if (_(possiblePhrases).isArray() && possiblePhrases.length > 0) {\n      if (_(requiredPhrases).isArray() && requiredPhrases.length > 0) {\n        query.bool.should = possiblePhrases.map(mapPhrase);\n      } else {\n        query.bool.must = (query.bool.must || []).concat({ bool: { should: possiblePhrases.map(mapPhrase) } });\n      }\n  }\n  let result = await es.search({\n    index: INDEX_NAME,\n    type: 'posts',\n    from: startFrom,\n    size: limit,\n    body: { query: query }\n  });\n  return {\n    posts: result.hits.hits.map((hit) => {\n      let [boardName, postNumber] = hit._id.split(':');\n      let { threadNumber, plainText, subject, archived } = hit._source;\n      return {\n        boardName: boardName,\n        number: +postNumber,\n        threadNumber: +threadNumber,\n        plainText: plainText,\n        subject: subject,\n        archived: !!archived\n      };\n    }),\n    total: result.hits.total,\n    max: limit\n  };\n}\n"],"sourceRoot":"/source/"}