{"version":3,"sources":["core/geolocation.js"],"names":["ip","info","cityName","countryCode","countryName","db","error","Error","Tools","translate","address","correctAddress","ipv4","preferIPv4","query","statement","prepare","pget","get","Address4","bigInteger","toString","Address6","result","finalize","ipFrom","stack","greater","geolocation","initialize","Promise","resolve","Database","__dirname","OPEN_READONLY","err"],"mappings":";;;;;;;uDAUA,iBAA2BA,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,gBADN,GACa;AACTC,wBAAU,IADD;AAETC,2BAAa,IAFJ;AAGTC,2BAAa;AAHJ,aADb;;AAAA,gBAMOC,EANP;AAAA;AAAA;AAAA;;AAOI,6BAAOC,KAAP,CAAa,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,yDAAhB,CAAV,CAAb;AAPJ,6CAQWR,IARX;;AAAA;AAAA,gBAUOD,EAVP;AAAA;AAAA;AAAA;;AAAA,6CAWWC,IAXX;;AAAA;AAaMS,mBAbN,GAagBF,MAAMG,cAAN,CAAqBX,EAArB,CAbhB;;AAAA,gBAcOU,OAdP;AAAA;AAAA;AAAA;;AAAA,6CAeWT,IAfX;;AAAA;AAiBMW,gBAjBN,GAiBaJ,MAAMK,UAAN,CAAiBb,EAAjB,CAjBb;AAkBMc,iBAlBN,GAkBc,4FAlBd;AAmBMC,qBAnBN,GAmBkBV,GAAGW,OAAH,CAAWF,KAAX,CAnBlB;;AAoBEC,sBAAUE,IAAV,GAAiB,6BAAUF,UAAUG,GAApB,CAAjB;AACA,gBAAIN,IAAJ,EAAU;AACRF,wBAAU,0BAAO,IAAI,oBAAUS,QAAd,CAAuBP,IAAvB,EAA6BQ,UAA7B,GAA0CC,QAA1C,EAAP,CAAV;AACD,aAFD,MAEO;AACLX,wBAAU,0BAAO,IAAI,oBAAUY,QAAd,CAAuBZ,OAAvB,EAAgCU,UAAhC,GAA6CC,QAA7C,EAAP,CAAV;AACD;AAzBH;AAAA,mBA0BqBN,UAAUE,IAAV,CAAeP,QAAQW,QAAR,EAAf,CA1BrB;;AAAA;AA0BME,kBA1BN;;AA2BER,sBAAUS,QAAV;;AA3BF,gBA4BOD,MA5BP;AAAA;AAAA;AAAA;;AAAA,6CA6BWtB,IA7BX;;AAAA;AA+BMwB,kBA/BN;AAAA;;AAiCIA,qBAAS,0BAAOF,OAAOE,MAAd,CAAT;AAjCJ;AAAA;;AAAA;AAAA;AAAA;;AAmCI,6BAAOnB,KAAP,CAAa,YAAIoB,KAAJ,eAAb;AAnCJ,6CAoCWzB,IApCX;;AAAA;AAAA,iBAsCMwB,OAAOE,OAAP,CAAejB,OAAf,CAtCN;AAAA;AAAA;AAAA;;AAAA,6CAuCWT,IAvCX;;AAAA;AAyCEA,iBAAKC,QAAL,GAAgBqB,OAAOrB,QAAvB;AACAD,iBAAKE,WAAL,GAAmBoB,OAAOpB,WAA1B;AACAF,iBAAKG,WAAL,GAAmBmB,OAAOnB,WAA1B;AA3CF,6CA4CSH,IA5CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe2B,W;;;;;AAVf;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAYpB,K;;;;;;;;AAEZ,IAAIH,KAAK,IAAT;;AAiDAuB,YAAYC,UAAZ,6CAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACjB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B1B,iBAAK,IAAI,iBAAQ2B,QAAZ,CAAwBC,SAAxB,uCAAqE,iBAAQC,aAA7E,EAA4F,UAACC,GAAD,EAAS;AACxG,kBAAIA,GAAJ,EAAS;AACP9B,qBAAK,IAAL;AACA,iCAAOC,KAAP,CAAa6B,IAAIT,KAAJ,IAAaS,GAA1B;AACA,iCAAO7B,KAAP,CAAa,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,8DAAhB,CAAV,CAAb;AACD;AACDsB;AACD,aAPI,CAAL;AAQD,WATK,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;kBAaeH,W","file":"geolocation.js","sourcesContent":["import bigInt from 'big-integer';\nimport IPAddress from 'ip-address';\nimport promisify from 'promisify-node';\nimport SQLite3 from 'sqlite3';\n\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet db = null;\n\nasync function geolocation(ip) {\n  let info = {\n    cityName: null,\n    countryCode: null,\n    countryName: null\n  };\n  if (!db) {\n    Logger.error(new Error(Tools.translate('No geolocation database found. Geolocation is disabled.')));\n    return info;\n  }\n  if (!ip) {\n    return info;\n  }\n  let address = Tools.correctAddress(ip);\n  if (!address) {\n    return info;\n  }\n  let ipv4 = Tools.preferIPv4(ip);\n  let query = 'SELECT ipFrom, countryCode, countryName, cityName FROM ip2location WHERE ipTo >= ? LIMIT 1';\n  let statement = db.prepare(query);\n  statement.pget = promisify(statement.get);\n  if (ipv4) {\n    address = bigInt(new IPAddress.Address4(ipv4).bigInteger().toString());\n  } else {\n    address = bigInt(new IPAddress.Address6(address).bigInteger().toString());\n  }\n  let result = await statement.pget(address.toString());\n  statement.finalize();\n  if (!result) {\n    return info;\n  }\n  let ipFrom;\n  try {\n    ipFrom = bigInt(result.ipFrom);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return info;\n  }\n  if (ipFrom.greater(address)) {\n    return info;\n  }\n  info.cityName = result.cityName;\n  info.countryCode = result.countryCode;\n  info.countryName = result.countryName;\n  return info;\n}\n\ngeolocation.initialize = async function() {\n  await new Promise((resolve) => {\n    db = new SQLite3.Database(`${__dirname}/../../sqlite/ip2location.sqlite`, SQLite3.OPEN_READONLY, (err) => {\n      if (err) {\n        db = null;\n        Logger.error(err.stack || err);\n        Logger.error(new Error(Tools.translate('No geolocation database found. Geolocation will be disabled.')));\n      }\n      resolve();\n    });\n  });\n};\n\nexport default geolocation;\n"]}