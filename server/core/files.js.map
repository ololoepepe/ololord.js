{"version":3,"sources":["core/files.js"],"names":["url","formFieldName","fields","path","__dirname","v4","proxy","options","timeout","test","audios","split","result","recursive","host","port","headers","auth","request","response","status","Error","Tools","translate","body","read","data","length","writeFile","file","name","pop","size","setFileRating","substr","getMimeType","mimeType","downloadFile","files","series","filter","remove","catch","err","error","req","stack","fieldName","pick","_1","key","downloadedFiles","concat","hashes","fileHashes","hash","FilesModel","getFileInfosByHashes","fileInfos","existingFiles","map","fileInfo","index","fi","thumbName","thumb","boardName","rating","copy","getFiles","filePath","exists","retry","Promise","resolve","reject","setTimeout","delay","f","waitForFile","plugin","IPC","send","baseName","suffix","extname","canonicalSuffix","toLowerCase","suffixMatchesMimeType","defaultSuffixForMimeType","thumbSuffix","thumbnailSuffixForMimeType","generateFileName","thumbPath","dirname","createThumbnail","dimensions","extraData","thumbDimensions","ihash","createFileThumb","post","sizeKB","sizeText","toFixed","selectThumbnailingPlugin","renderPostFileInfo","renderPostFileInfos","transaction","fn","targetFilePath","targetThumbPath","addFile","sourceFilePath","sourceThumbPath","getFileInfoByName","sha1","move","processFile","mkpath","processFiles","diskUsage","tmpFilePath","slice","join","makeTree","write","rename","dir","fileName","isDir","makeDirectory","createFile","content","editFile","oldFileName","oldPath","renameFile","removeTree","deleteFile","canvas","ctx","getContext","drawIcon","img","Image","src","drawImage","pngStream","pipe","createWriteStream","on","generateRandomImage","exec","encoding","stdio","out","replace","value","getImageSize","width","height","resize","quality","resizeImage","parseForm","isAudioType","isVideoType","isPdfType","isImageType","FILE_RATINGS","Set","sync","fileTypePlugins","loadPlugins","id","has","find","match","formFields","formFiles","form","Form","uploadDir","autoFields","autoFiles","maxFieldsSize","parse","mapObject","toArray","flatten","originalFilename"],"mappings":"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","file":"files.js","sourcesContent":["import _ from 'underscore';\nimport Canvas from 'canvas';\nimport ChildProcess from 'child_process';\nimport du from 'du';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\nimport gm from 'gm';\nimport HTTP from 'q-io/http';\nimport Jdenticon from 'jdenticon';\nimport merge from 'merge';\nimport mkpathSync from 'mkpath';\nimport Multiparty from 'multiparty';\nimport Path from 'path';\nimport promisify from 'promisify-node';\nimport UUID from 'uuid';\n\nimport * as FilesModel from '../models/files';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport vk from '../helpers/vk';\n\nconst mkpath = promisify('mkpath');\n\nconst FILE_RATINGS = new Set(['SFW', 'R-15', 'R-18', 'R-18G']);\n\nmkpathSync.sync(config('system.tmpPath') + '/form');\n\nlet fileTypePlugins = Tools.loadPlugins([`${__dirname}/../file-types`, `${__dirname}/../file-types/custom`]);\n\nfunction setFileRating(file, id, fields) {\n  let rating = fields[`file_${id}_rating`];\n  if (FILE_RATINGS.has(rating)) {\n    file.rating = rating;\n  } else {\n    file.rating = 'SFW';\n  }\n}\n\nasync function downloadFile(url, formFieldName, fields) {\n  let path = `${__dirname}/../../tmp/upload_${UUID.v4()}`;\n  let proxy = config.proxy();\n  let options = { timeout: config('system.httpRequestTimeout') };\n  if (/^vk\\:\\/\\//.test(url)) {\n    let result = await vk('audio.getById', { audios: url.split('/')[2] });\n    options.url = result[0].url;\n  } else if (proxy) {\n    options = merge.recursive(options, {\n      host: proxy.host,\n      port: proxy.port,\n      headers: { 'Proxy-Authorization': proxy.auth },\n      path: url,\n    });\n  } else {\n    options.url = url;\n  }\n  let response = await HTTP.request(options);\n  if (200 !== response.status) {\n    throw new Error(Tools.translate('Failed to download file'));\n  }\n  let data = await response.body.read();\n  if (data.length < 1) {\n    throw new Error(Tools.translate('File is empty'));\n  }\n  await writeFile(path, data);\n  let file = {\n    name: url.split('/').pop(),\n    size: data.length,\n    path: path\n  };\n  setFileRating(file, formFieldName.substr(9), fields);\n  let mimeType = await getMimeType(path);\n  file.mimeType = mimeType;\n  return file;\n}\n\nexport async function getFiles(fields, files) {\n  files = await Tools.series(files.filter((file) => {\n    if (file.size < 1) {\n      FS.remove(file.path).catch((err) => { Logger.error(req, err.stack || err); });\n      return false;\n    }\n    return true;\n  }), async function(file) {\n    setFileRating(file, file.fieldName.substr(5), fields);\n    let mimeType = await getMimeType(file.path);\n    file.mimeType = mimeType;\n    return file;\n  }, true);\n  let downloadedFiles = await Tools.series(_(fields).pick((_1, key) => {\n    return /^file_url_\\S+$/.test(key);\n  }), async function(url, formFieldName) {\n    return await downloadFile(url, formFieldName, fields);\n  }, true);\n  files = files.concat(downloadedFiles);\n  let hashes = (typeof fields.fileHashes === 'string') ? fields.fileHashes.split(',').filter(hash => !!hash) : [];\n  let fileInfos = await FilesModel.getFileInfosByHashes(hashes);\n  let existingFiles = fileInfos.map((fileInfo, index) => {\n    let fi = {\n      name: fileInfo.name,\n      thumbName: fileInfo.thumb.name,\n      size: fileInfo.size,\n      boardName: fileInfo.boardName,\n      mimeType: fileInfo.mimeType,\n      rating: fileInfo.rating,\n      copy: true\n    };\n    setFileRating(fi, hashes[index], fields);\n    return fi;\n  });\n  return files.concat(existingFiles);\n}\n\nasync function waitForFile(filePath, options) { //TODO: That is not okay\n  let delay = 50;\n  let retry = 4;\n  async function f() {\n    let exists = await FS.exists(filePath);\n    if (!exists) {\n      if (!retry) {\n        throw new Error(Tools.translate('Failed to copy file'));\n      }\n      --retry;\n      await new Promise((resolve, reject) => {\n        setTimeout(resolve, delay);\n      });\n      await f();\n    }\n  }\n  await f();\n}\n\nasync function generateFileName(file, plugin) {\n  let baseName = await IPC.send('fileName');\n  let suffix = Path.extname(file.name);\n  if (typeof suffix === 'string') {\n    suffix = suffix.substr(1);\n  }\n  let canonicalSuffix = suffix ? suffix.toLowerCase() : '';\n  if (!suffix || !plugin.suffixMatchesMimeType(canonicalSuffix, file.mimeType)) {\n    suffix = plugin.defaultSuffixForMimeType(file.mimeType);\n  }\n  let thumbSuffix = suffix;\n  if (typeof plugin.thumbnailSuffixForMimeType === 'function') {\n    thumbSuffix = plugin.thumbnailSuffixForMimeType(file.mimeType) || canonicalSuffix;\n  }\n  return {\n    name: `${baseName}.${suffix}`,\n    thumbName: `${baseName}s.${thumbSuffix}`\n  };\n}\n\nasync function createFileThumb(file, plugin) {\n  let thumbPath = `${Path.dirname(file.path)}/${UUID.v4()}`;\n  file.thumbPath = thumbPath;\n  let result = await plugin.createThumbnail(file, thumbPath, file.path) || {};\n  file.dimensions = result.dimensions || null;\n  file.extraData = result.extraData || null;\n  file.thumbDimensions = result.thumbDimensions;\n  if (result.ihash) {\n    file.ihash = result.ihash;\n  }\n}\n\nexport function selectThumbnailingPlugin(mimeType) {\n  //TODO: Cache\n  return _(fileTypePlugins).find(plugin => plugin.match(mimeType));\n}\n\nexport async function renderPostFileInfos(post) {\n  if (!post) {\n    return;\n  }\n  await Tools.series(post.fileInfos || [], async function(fileInfo) {\n    if (!fileInfo) {\n      return;\n    }\n    fileInfo.sizeKB = fileInfo.size / 1024;\n    fileInfo.sizeText = fileInfo.sizeKB.toFixed(2) + ' ' + Tools.translate('KB');\n    let plugin = selectThumbnailingPlugin(fileInfo.mimeType);\n    if (!plugin) {\n      let err = new Error(Tools.translate('Unsupported file type: $[1]', '', fileInfo.mimeType));\n      Logger.error(err.stack || err);\n      return;\n    }\n    if (typeof plugin.renderPostFileInfo !== 'function') {\n      return;\n    }\n    await plugin.renderPostFileInfo(fileInfo);\n  });\n}\n\nexport function parseForm(req = {}) {\n  let { formFields, formFiles } = req;\n  if (formFields) {\n    return {\n      fields: formFields,\n      files: formFiles || []\n    };\n  }\n  let form = new Multiparty.Form();\n  form.uploadDir = config('system.tmpPath') + '/form';\n  form.autoFields = true;\n  form.autoFiles = true;\n  form.maxFieldsSize = config('system.maxFormFieldsSize');\n  return new Promise((resolve, reject) => {\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve({\n        fields: _(fields).mapObject((value, key) => { return (1 === value.length) ? value[0] : value; }),\n        files: _(_(files).toArray()).flatten().map((file) => {\n          file.name = file.originalFilename;\n          return file;\n        })\n      });\n    });\n  });\n}\n\nasync function processFile(boardName, file, transaction) {\n  let plugin = selectThumbnailingPlugin(file.mimeType);\n  if (!plugin) {\n    throw new Error(Tools.translate('Unsupported file type: $[1]', '', file.mimeType));\n  }\n  let fn = await generateFileName(file, plugin);\n  let targetFilePath = `${__dirname}/../../public/${boardName}/src/${fn.name}`;\n  let targetThumbPath = `${__dirname}/../../public/${boardName}/thumb/${fn.thumbName}`;\n  transaction.addFile(targetFilePath);\n  transaction.addFile(targetThumbPath);\n  if (file.copy) {\n    let sourceFilePath = `${__dirname}/../../public/${file.boardName}/src/${file.name}`;\n    let sourceThumbPath = `${__dirname}/../../public/${file.boardName}/thumb/${file.thumbName}`;\n    await FS.copy(sourceFilePath, targetFilePath);\n    await FS.copy(sourceThumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    let fileInfo = await FilesModel.getFileInfoByName(file.name);\n    return {\n      dimensions: fileInfo.dimensions,\n      extraData: fileInfo.extraData,\n      hash: fileInfo.hash,\n      ihash: fileInfo.ihash || null,\n      mimeType: fileInfo.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: fileInfo.size,\n      thumb: {\n        dimensions: fileInfo.thumb.dimensions,\n        name: fn.thumbName\n      }\n    };\n  } else {\n    let sourceFilePath = file.path;\n    if (!file.hash) {\n      let data = await FS.read(file.path, 'b');\n      file.hash = Tools.sha1(data);\n    }\n    await createFileThumb(file, plugin);\n    await FS.move(sourceFilePath, targetFilePath);\n    transaction.addFile(file.thumbPath);\n    await FS.move(file.thumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    return {\n      dimensions: file.dimensions,\n      extraData: file.extraData,\n      hash: file.hash,\n      ihash: file.ihash || null,\n      mimeType: file.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: file.size,\n      thumb: {\n        dimensions: file.thumbDimensions,\n        name: fn.thumbName\n      }\n    };\n  }\n}\n\nexport async function processFiles(boardName, files, transaction) {\n  if (files.length < 1) {\n    return [];\n  }\n  let path = `${__dirname}/../../public/${boardName}`;\n  await mkpath(`${path}/src`);\n  await mkpath(`${path}/thumb`);\n  return await Tools.series(files, (file) => {\n    return processFile(boardName, file, transaction);\n  }, true);\n}\n\nexport async function diskUsage(path) {\n  return await new Promise((resolve, reject) => {\n    du(path, (err, size) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(size);\n    });\n  });\n}\n\nexport async function writeFile(filePath, data) {\n  let tmpFilePath = `${filePath}.tmp`;\n  let path = filePath.split('/').slice(0, -1).join('/');\n  let exists = await FS.exists(path);\n  if (!exists) {\n    await FS.makeTree(path);\n  }\n  await FS.write(tmpFilePath, data);\n  await FS.rename(tmpFilePath, filePath);\n}\n\nexport async function createFile(dir, fileName, { file, isDir } = {}) {\n  if (dir.slice(-1)[0] !== '/') {\n    dir += '/';\n  }\n  let path = `${__dirname}/../../${dir}${fileName}`;\n  if (isDir) {\n    await FS.makeDirectory(path);\n  }\n  if (file) {\n    await FS.move(file.path, path);\n  } else {\n    await writeFile(path, '');\n  }\n}\n\nexport async function editFile(fileName, content) {\n  await writeFile(`${__dirname}/../../${fileName}`, content);\n}\n\nexport async function renameFile(oldFileName, fileName) {\n  let oldPath = `${__dirname}/../../${oldFileName}`;\n  await FS.rename(oldPath, oldPath.split('/').slice(0, -1).join('/') + '/' + fileName);\n}\n\nexport async function deleteFile(fileName) {\n  await FS.removeTree(`${__dirname}/../../${fileName}`);\n}\n\nexport async function generateRandomImage(hash, mimeType, thumbPath) {\n  let canvas = new Canvas(200, 200);\n  let ctx = canvas.getContext('2d');\n  Jdenticon.drawIcon(ctx, hash, 200);\n  let data = await FS.read(`${__dirname}/../../misc/thumbs/${mimeType}.png`, 'b');\n  let img = new Canvas.Image();\n  img.src = data;\n  ctx.drawImage(img, 0, 0, 200, 200);\n  return await new Promise((resolve, reject) => {\n    canvas.pngStream().pipe(FSSync.createWriteStream(thumbPath).on('error', reject).on('finish', resolve));\n  });\n}\n\nexport async function getMimeType(fileName) {\n  if (!fileName || typeof fileName !== 'string') {\n    return null;\n  }\n  try {\n    return await new Promise((resolve, reject) => {\n      ChildProcess.exec(`file --brief --mime-type ${fileName}`, {\n        timeout: config('system.mimeTypeRetrievingTimeout'),\n        encoding: 'utf8',\n        stdio: [0, 'pipe', null]\n      }, (err, out) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(out ? out.replace(/\\r*\\n+/g, '') : null);\n      });\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return null;\n  }\n}\n\nexport function isAudioType(mimeType) {\n  return 'application/ogg' === mimeType || /^audio\\//.test(mimeType);\n}\n\nexport function isVideoType(mimeType) {\n  return /^video\\//.test(mimeType);\n}\n\nexport function isPdfType(mimeType) {\n  return 'application/pdf' === mimeType;\n}\n\nexport function isImageType(mimeType) {\n  return /^image\\//.test(mimeType);\n}\n\nexport async function getImageSize(fileName) {\n  return new Promise((resolve, reject) => {\n    gm(fileName).size((err, value) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(value);\n    });\n  });\n}\n\nexport async function resizeImage(fileName, width, height, options) {\n  return new Promise((resolve, reject) => {\n    gm(fileName).resize(width, height, options).quality(100).write(fileName, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n}\n"]}