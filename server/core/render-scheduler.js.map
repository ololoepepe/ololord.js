{"version":3,"sources":["core/render-scheduler.js"],"names":["type","key","data","workerID","Object","keys","workers","map","id","load","workerLoads","get","sort","w1","w2","shift","has","set","IPC","send","result","performTask","scheduled","length","delete","splice","n","error","stack","nextTask","forEach","resolve","scheduledMap","Promise","push","addTask","boardName","threadNumber","postNumber","action","ThreadsModel","isThreadDeleted","isDeleted","renderThread","renderPages","renderCatalog","scheduleRender","scheduleRenderArchive","scheduleRenderRSS","Map"],"mappings":"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","file":"render-scheduler.js","sourcesContent":["import Cluster from 'cluster';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as ThreadsModel from '../models/threads';\n\nlet scheduledMap = new Map([\n  ['renderPages', new Map()],\n  ['renderThread', new Map()],\n  ['renderCatalog', new Map()],\n  ['renderArchive', new Map()],\n  ['renderRSS', new Map()]\n]);\nlet workerLoads = new Map();\n\nasync function performTask(type, key, data) {\n  let workerID = Object.keys(Cluster.workers).map((id) => {\n    return {\n      id: id,\n      load: workerLoads.get(id) || 0\n    };\n  }).sort((w1, w2) => { return w1.load - w2.load; }).shift().id;\n  if (workerLoads.has(workerID)) {\n    workerLoads.set(workerID, workerLoads.get(workerID) + 1);\n  } else {\n    workerLoads.set(workerID, 1);\n  }\n  try {\n    let result = await IPC.send('render', {\n      type: type,\n      key: key,\n      data: data\n    }, false, workerID);\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return result;\n  } catch (err) {\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    throw err;\n  }\n}\n\nasync function nextTask(type, key, map) {\n  let scheduled = map.get(key);\n  if (!scheduled) {\n    return;\n  }\n  if (scheduled.length <= 0) {\n    map.delete(key);\n    return;\n  }\n  //NOTE: Clearing initial array, but preserving it's copy\n  scheduled = scheduled.splice(0, scheduled.length);\n  try {\n    await performTask(type, key, scheduled.map(n => n.data));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  nextTask(type, key, map);\n  scheduled.forEach((n) => { n.resolve(); });\n}\n\nasync function addTask(type, key, data) {\n  let map = scheduledMap.get(type);\n  let scheduled = map.get(key);\n  if (scheduled) {\n    return new Promise((resolve) => {\n      scheduled.push({\n        resolve: resolve,\n        data: data\n      });\n    });\n  } else {\n    map.set(key, []);\n    try {\n      await performTask(type, key, data);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n    nextTask(type, key, map);\n  }\n}\n\nasync function renderThread(boardName, threadNumber, postNumber, action) {\n  let isDeleted = await ThreadsModel.isThreadDeleted(boardName, threadNumber);\n  if (isDeleted) {\n    return;\n  }\n  if (threadNumber !== postNumber) {\n    action = 'edit';\n  }\n  return await addTask('renderThread', `${boardName}:${threadNumber}`, {\n    boardName: boardName,\n    threadNumber: threadNumber,\n    action: action\n  });\n}\n\nasync function renderPages(boardName, threadNumber) {\n  return await addTask('renderPages', boardName, threadNumber);\n}\n\nasync function renderCatalog(boardName) {\n  return await addTask('renderCatalog', boardName);\n}\n\nexport async function scheduleRender(data) {\n  try {\n    let { boardName, threadNumber, postNumber, action } = data;\n    switch (action) {\n    case 'create':\n      await renderThread(boardName, threadNumber, postNumber, action);\n      (async function() {\n        await renderPages(boardName, threadNumber);\n        await renderCatalog(boardName);\n      })();\n      break;\n    case 'edit':\n    case 'delete':\n      if (threadNumber === postNumber) {\n        await renderThread(boardName, threadNumber, postNumber, action);\n        await renderPages(boardName, threadNumber);\n        renderCatalog(boardName);\n      } else {\n        (async function() {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName, threadNumber);\n          renderCatalog(boardName);\n        })();\n      }\n      break;\n    default:\n      (async function() {\n        await renderThread(boardName, threadNumber, postNumber, action);\n        await renderPages(boardName, threadNumber);\n        renderCatalog(boardName);\n      })();\n      break;\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n\nexport async function scheduleRenderArchive(boardName) {\n  try {\n    await addTask('renderArchive', boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n\nexport async function scheduleRenderRSS(boardName) {\n  try {\n    await addTask('renderRSS', boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n"]}