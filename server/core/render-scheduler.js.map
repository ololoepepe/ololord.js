{"version":3,"sources":["core/render-scheduler.js"],"names":[],"mappings":"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","file":"core/render-scheduler.js","sourcesContent":["import Cluster from 'cluster';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as ThreadsModel from '../models/threads';\n\nlet scheduledMap = new Map([\n  ['renderPages', new Map()],\n  ['renderThread', new Map()],\n  ['renderCatalog', new Map()],\n  ['renderArchive', new Map()],\n  ['renderRSS', new Map()]\n]);\nlet workerLoads = new Map();\n\nasync function performTask(type, key, data) {\n  let workerID = Object.keys(Cluster.workers).map((id) => {\n    return {\n      id: id,\n      load: workerLoads.get(id) || 0\n    };\n  }).sort((w1, w2) => { return w1.load - w2.load; }).shift().id;\n  if (workerLoads.has(workerID)) {\n    workerLoads.set(workerID, workerLoads.get(workerID) + 1);\n  } else {\n    workerLoads.set(workerID, 1);\n  }\n  try {\n    let result = await IPC.send('render', {\n      type: type,\n      key: key,\n      data: data\n    }, false, workerID);\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return result;\n  } catch (err) {\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    throw err;\n  }\n}\n\nasync function nextTask(type, key, map) {\n  let scheduled = map.get(key);\n  if (!scheduled) {\n    return;\n  }\n  if (scheduled.length <= 0) {\n    map.delete(key);\n    return;\n  }\n  //NOTE: Clearing initial array, but preserving it's copy\n  scheduled = scheduled.splice(0, scheduled.length);\n  try {\n    await performTask(type, key, scheduled.map(n => n.data));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  nextTask(type, key, map);\n  scheduled.forEach((n) => { n.resolve(); });\n}\n\nasync function addTask(type, key, data) {\n  let map = scheduledMap.get(type);\n  let scheduled = map.get(key);\n  if (scheduled) {\n    return new Promise((resolve) => {\n      scheduled.push({\n        resolve: resolve,\n        data: data\n      });\n    });\n  } else {\n    map.set(key, []);\n    try {\n      await performTask(type, key, data);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n    nextTask(type, key, map);\n  }\n}\n\nasync function renderThread(boardName, threadNumber, postNumber, action) {\n  let isDeleted = await ThreadsModel.isThreadDeleted(boardName, threadNumber);\n  if (isDeleted) {\n    return;\n  }\n  if (threadNumber !== postNumber) {\n    action = 'edit';\n  }\n  return await addTask('renderThread', `${boardName}:${threadNumber}`, {\n    boardName: boardName,\n    threadNumber: threadNumber,\n    action: action\n  });\n}\n\nasync function renderPages(boardName, threadNumber) {\n  return await addTask('renderPages', boardName, threadNumber);\n}\n\nasync function renderCatalog(boardName) {\n  return await addTask('renderCatalog', boardName);\n}\n\nexport async function scheduleRender(data) {\n  try {\n    let { boardName, threadNumber, postNumber, action } = data;\n    switch (action) {\n    case 'create':\n      await renderThread(boardName, threadNumber, postNumber, action);\n      (async function() {\n        await renderPages(boardName);\n        await renderCatalog(boardName);\n      })();\n      break;\n    case 'edit':\n    case 'delete':\n      if (threadNumber === postNumber) {\n        await renderThread(boardName, threadNumber, postNumber, action);\n        await renderPages(boardName, threadNumber);\n        renderCatalog(boardName);\n      } else {\n        (async function() {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName);\n          renderCatalog(boardName);\n        })();\n      }\n      break;\n    default:\n      (async function() {\n        await renderThread(boardName, threadNumber, postNumber, action);\n        await renderPages(boardName);\n        renderCatalog(boardName);\n      });\n      break;\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n\nexport async function scheduleRenderArchive(boardName) {\n  try {\n    await addTask('renderArchive', boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n\nexport async function scheduleRenderRSS(boardName) {\n  try {\n    await addTask('renderRSS', boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    throw err;\n  }\n}\n"],"sourceRoot":"/source/"}