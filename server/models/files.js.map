{"version":3,"sources":["models/files.js"],"names":[],"mappings":"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","file":"models/files.js","sourcesContent":["import _ from 'underscore';\n\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport Hash from '../storage/hash';\nimport UnorderedSet from '../storage/unordered-set';\nimport { AUDIO_TAGS } from '../file-types/audio';\n\nlet FileHashes = new UnorderedSet(redisClient(), 'fileHashes');\nlet FileInfos = new Hash(redisClient(), 'fileInfos');\nlet PostFileInfoNames = new UnorderedSet(redisClient(), 'postFileInfoNames', {\n  parse: false,\n  stringify: false\n});\n\nasync function getFileInfo(name, hash) {\n  if (!name && hash) {\n    let info = await FileHashes.getOne(hash);\n    if (info) {\n      name = info.name;\n    }\n  }\n  if (!name) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  let fileInfo = FileInfos.getOne(name);\n  if (!fileInfo) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  return fileInfo;\n}\n\nexport async function getFileInfoByName(name) {\n  return await getFileInfo(name);\n}\n\nexport async function getFileInfoByHash(hash) {\n  return await getFileInfo(null, hash);\n}\n\nexport async function fileInfoExistsByName(name) {\n  return await FileInfos.existsOne(name);\n}\n\nexport async function fileInfoExistsByHash(hash) {\n  return await FileHashes.exists(hash);\n}\n\nexport async function getFileInfosByHashes(hashes) {\n  if (!hashes) {\n    return [];\n  }\n  if (!_(hashes).isArray()) {\n    hashes = [hashes];\n  }\n  return await Tools.series(hashes, async function(hash) {\n    let fileInfo = await FileHashes.getOne(hash);\n    if (fileInfo) {\n      fileInfo.hash = hash;\n    }\n    return fileInfo;\n  }, true);\n}\n\nexport async function addFileInfo(fileInfo) {\n  await FileInfos.setOne(fileInfo.name, fileInfo);\n}\n\nexport function createFileHash(fileInfo) {\n  return {\n    name: fileInfo.name,\n    thumb: { name: fileInfo.thumb.name },\n    size: fileInfo.size,\n    boardName: fileInfo.boardName,\n    mimeType: fileInfo.mimeType,\n    rating: fileInfo.rating\n  };\n}\n\nexport async function addFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  await Tools.series(fileInfos.filter(fileInfo => !!fileInfo), async function(fileInfo) {\n    return await FileHashes.addOne(createFileHash(fileInfo), fileInfo.hash);\n  });\n}\n\nexport async function removeFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  if (fileInfos.length <= 0) {\n    return;\n  }\n  await Tools.series(fileInfos, async function(fileInfo) {\n    await FileHashes.deleteOne(createFileHash(fileInfo), fileInfo.hash);\n    let size = await FileHashes.count(fileInfo.hash);\n    if (size <= 0) {\n      await FileHashes.delete(fileInfo.hash);\n    }\n  });\n}\n\nexport async function removeFileInfos(fileInfoNames) {\n  if (!_(fileInfoNames).isArray()) {\n    fileInfoNames = [fileInfoNames];\n  }\n  if (fileInfoNames.length <= 0) {\n    return 0;\n  }\n  await FileInfos.deleteSome(fileInfoNames);\n}\n\nexport async function addFilesToPost(boardName, postNumber, files) {\n  await Tools.series(files, async function(file) {\n    file.boardName = boardName;\n    file.postNumber = postNumber;\n    await addFileInfo(file);\n    await PostFileInfoNames.addOne(file.name, `${boardName}:${postNumber}`);\n  });\n  await addFileHashes(files);\n}\n\nexport async function deleteFile(fileName) {\n  let fileInfo = await getFileInfoByName(fileName);\n  let { boardName, postNumber } = fileInfo;\n  await PostFileInfoNames.deleteOne(fileName, `${boardName}:${postNumber}`);\n  await FileInfos.deleteOne(fileName);\n  await removeFileHashes(fileInfo);\n  let path = `${__dirname}/../../public/${boardName}`;\n  Tools.series([`${path}/src/${fileInfo.name}`, `${path}/thumb/${fileInfo.thumb.name}`], async function() {\n    try {\n      await FS.remove(path);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function editFileRating(fileName, rating) {\n  let fileInfo = await getFileInfoByName(fileName);\n  if (Tools.FILE_RATINGS.indexOf(rating) < 0) {\n    rating = Tools.FILE_RATINGS[0];\n  }\n  fileInfo.rating = rating;\n  await FileInfos.setOne(fileName, fileInfo);\n}\n\nexport async function editAudioTags(fileName, fields) {\n  let fileInfo = await getFileInfoByName(fileName);\n  AUDIO_TAGS.forEach((tag) => {\n    let value = fields[tag];\n    if (value && typeof value === 'string') {\n      fileInfo.extraData[tag] = value;\n    } else if (fileInfo.extraData.hasOwnProperty(tag)) {\n      delete fileInfo.extraData[tag];\n    }\n  });\n  await FileInfos.setOne(fileName, fileInfo);\n}\n"],"sourceRoot":"/source/"}