{"version":3,"sources":["models/files.js"],"names":[],"mappings":"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","file":"models/files.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport * as Tools from '../helpers/tools';\nimport Hash from '../storage/hash';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\nimport { AUDIO_TAGS } from '../file-types/audio';\n\nlet ArchivedFileHashes = new UnorderedSet(sqlClient(), 'archivedFileHashes');\nlet ArchivedFileInfos = new Hash(sqlClient(), 'archivedFileInfos');\nlet ArchivedPostFileInfoNames = new UnorderedSet(sqlClient(), 'archivedPostFileInfoNames', {\n  parse: false,\n  stringify: false\n});\nlet FileHashes = new UnorderedSet(redisClient(), 'fileHashes');\nlet FileInfos = new Hash(redisClient(), 'fileInfos');\nlet PostFileInfoNames = new UnorderedSet(redisClient(), 'postFileInfoNames', {\n  parse: false,\n  stringify: false\n});\n\nasync function getFileInfo(name, hash) {\n  if (!name && hash) {\n    let info = await FileHashes.getOne(hash);\n    if (!info) {\n      info = await ArchivedFileHashes.getOne(hash);\n    }\n    if (info) {\n      name = info.name;\n    }\n  }\n  if (!name) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  let fileInfo = await FileInfos.getOne(name);\n  if (!fileInfo) {\n    fileInfo = ArchivedFileInfos.getOne(name);\n  }\n  if (!fileInfo) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  return fileInfo;\n}\n\nexport async function getFileInfoByName(name) {\n  return await getFileInfo(name);\n}\n\nexport async function getFileInfoByHash(hash) {\n  return await getFileInfo(null, hash);\n}\n\nexport async function fileInfoExistsByName(name) {\n  let exists = await FileInfos.existsOne(name);\n  if (exists) {\n    return true;\n  }\n  return await ArchivedFileInfos.existsOne(name);\n}\n\nexport async function fileInfoExistsByHash(hash) {\n  let exists = await FileHashes.exists(hash);\n  if (exists) {\n    return true;\n  }\n  return await ArchivedFileHashes.exists(hash);\n}\n\nexport async function getFileInfosByHashes(hashes) {\n  if (!hashes) {\n    return [];\n  }\n  if (!_(hashes).isArray()) {\n    hashes = [hashes];\n  }\n  return await Tools.series(hashes, async function(hash) {\n    let fileInfo = await FileHashes.getOne(hash);\n    if (!fileInfo) {\n      fileInfo = await ArchivedFileHashes.getOne(hash);\n    }\n    if (fileInfo) {\n      fileInfo.hash = hash;\n    }\n    return fileInfo;\n  }, true);\n}\n\nexport async function addFileInfo(fileInfo, { archived } = {}) {\n  let source = archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileInfo.name, fileInfo);\n}\n\nexport function createFileHash(fileInfo) {\n  return {\n    name: fileInfo.name,\n    thumb: { name: fileInfo.thumb.name },\n    size: fileInfo.size,\n    boardName: fileInfo.boardName,\n    mimeType: fileInfo.mimeType,\n    rating: fileInfo.rating\n  };\n}\n\nexport async function addFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  await Tools.series(fileInfos.filter(fileInfo => !!fileInfo), async function(fileInfo) {\n    let source = fileInfo.archived ? ArchivedFileHashes : FileHashes;\n    return await source.addOne(createFileHash(fileInfo), fileInfo.hash);\n  });\n}\n\nexport async function removeFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  if (fileInfos.length <= 0) {\n    return;\n  }\n  await Tools.series(fileInfos, async function(fileInfo) {\n    let source = fileInfo.archived ? ArchivedFileHashes : FileHashes;\n    await source.deleteOne(createFileHash(fileInfo), fileInfo.hash);\n    let size = await source.count(fileInfo.hash);\n    if (size <= 0) {\n      await source.delete(fileInfo.hash);\n    }\n  });\n}\n\nexport async function removeFileInfos(fileInfoNames, { archived } = {}) {\n  if (!_(fileInfoNames).isArray()) {\n    fileInfoNames = [fileInfoNames];\n  }\n  if (fileInfoNames.length <= 0) {\n    return 0;\n  }\n  let source = archived ? ArchivedFileInfos : FileInfos;\n  await source.deleteSome(fileInfoNames);\n}\n\nexport async function addFilesToPost(boardName, postNumber, files, { archived } = {}) {\n  let source = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  await Tools.series(files, async function(file) {\n    file.boardName = boardName;\n    file.postNumber = postNumber;\n    await addFileInfo(file, { archived: archived });\n    await source.addOne(file.name, `${boardName}:${postNumber}`);\n  });\n  await addFileHashes(files);\n}\n\nexport async function deleteFile(fileName) {\n  let fileInfo = await getFileInfoByName(fileName);\n  let { boardName, postNumber, archived } = fileInfo;\n  let infosSource = archived ? ArchivedFileInfos : FileInfos;\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  await namesSource.deleteOne(fileName, `${boardName}:${postNumber}`);\n  await infosSource.deleteOne(fileName);\n  await removeFileHashes(fileInfo);\n  let path = `${__dirname}/../../public/${boardName}`;\n  Tools.series([`${path}/src/${fileInfo.name}`, `${path}/thumb/${fileInfo.thumb.name}`], async function() {\n    try {\n      await FS.remove(path);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function editFileRating(fileName, rating) {\n  let fileInfo = await getFileInfoByName(fileName);\n  if (Tools.FILE_RATINGS.indexOf(rating) < 0) {\n    rating = Tools.FILE_RATINGS[0];\n  }\n  fileInfo.rating = rating;\n  let source = fileInfo.archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileName, fileInfo);\n}\n\nexport async function editAudioTags(fileName, fields) {\n  let fileInfo = await getFileInfoByName(fileName);\n  AUDIO_TAGS.forEach((tag) => {\n    let value = fields[tag];\n    if (value && typeof value === 'string') {\n      fileInfo.extraData[tag] = value;\n    } else if (fileInfo.extraData.hasOwnProperty(tag)) {\n      delete fileInfo.extraData[tag];\n    }\n  });\n  let source = fileInfo.archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileName, fileInfo);\n}\n\nexport async function getPostFileCount(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  return await source.count(`${boardName}:${postNumber}`);\n}\n\nexport async function getPostFileInfos(boardName, postNumber, { archived } = {}) {\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  let infosSource = archived ? ArchivedFileInfos : FileInfos;\n  let fileNames = await namesSource.getAll(`${boardName}:${postNumber}`);\n  return await infosSource.getSome(fileNames);\n}\n\nexport async function removePostFileInfos(boardName, postNumber, { archived } = {}) {\n  let key = `${boardName}:${postNumber}`\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  let fileNames = await namesSource.getAll(key);\n  let fileInfos = await Tools.series(fileNames, async function(fileName) {\n    return await getFileInfoByName(fileName);\n  }, true);\n  fileInfos = fileInfos.filter(fileInfo => !!fileInfo);\n  let paths = fileInfos.map((fileInfo) => {\n    return [\n      `${__dirname}/../../public/${boardName}/src/${fileInfo.name}`,\n      `${__dirname}/../../public/${boardName}/thumb/${fileInfo.thumb.name}`\n    ];\n  });\n  await namesSource.delete(key);\n  await removeFileInfos(fileNames, { archived: archived });\n  await removeFileHashes(fileInfos);\n  Tools.series(_(paths).flatten(), async function(path) {\n    try {\n      await FS.remove(path);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function pushPostFileInfosToArchive(boardName, postNumber) {\n  let key = `${boardName}:${postNumber}`\n  let fileNames = await PostFileInfoNames.getAll(key);\n  await ArchivedPostFileInfoNames.addSome(fileNames, key);\n  await PostFileInfoNames.delete(key);\n  let fileInfos = await Tools.series(fileNames, async function(fileName) {\n    return await getFileInfoByName(fileName);\n  }, {});\n  await ArchivedFileInfos.setSome(fileInfos);\n  await FileInfos.deleteSome(fileNames);\n  await Tools.series(fileInfos, async function(fileInfo) {\n    let fileHash = createFileHash(fileInfo);\n    await ArchivedFileHashes.addOne(fileHash, fileInfo.hash);\n    await FileHashes.deleteOne(fileHash, fileInfo.hash);\n    let size = await FileHashes.count(fileInfo.hash);\n    if (size <= 0) {\n      await FileHashes.delete(fileInfo.hash);\n    }\n  });\n}\n"],"sourceRoot":"/source/"}