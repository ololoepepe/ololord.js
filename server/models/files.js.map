{"version":3,"sources":["models/files.js"],"names":[],"mappings":"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","file":"models/files.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport { AUDIO_TAGS } from '../file-types/audio';\n\nconst mkpath = promisify('mkpath');\n\nlet client = mongodbClient();\n\nexport async function getFileInfoByName(name) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({ 'fileInfos.name': name }, { 'fileInfos.$': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  return post.fileInfos[0];\n}\n\nexport async function getFileInfoByHash(hash) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({ 'fileInfos.hash': hash }, { 'fileInfos.$': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  return post.fileInfos[0];\n}\n\nexport async function fileInfoExistsByName(name) {\n  let Post = await client.collection('post');\n  let count = await Post.count({ 'fileInfos.name': name });\n  return (count > 0);\n}\n\nexport async function fileInfoExistsByHash(hash) {\n  let Post = await client.collection('post');\n  let count = await Post.count({ 'fileInfos.hash': hash });\n  return (count > 0);\n}\n\nexport async function getFileInfosByHashes(hashes) {\n  if (!hashes) {\n    return [];\n  }\n  if (!_(hashes).isArray()) {\n    hashes = [hashes];\n  }\n  if (hashes.length <= 0) {\n    return [];\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    'fileInfos.hash': { $in: hashes }\n  }, { 'fileInfos.$': 1 }).toArray();\n  if (hashes.length !== posts.length) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  return posts.map(({ fileInfos }) => fileInfos[0]);\n}\n\nfunction createFileInfo(file, boardName, postNumber) {\n  file.boardName = boardName;\n  file.postNumber = postNumber;\n  return file;\n}\n\nexport function createFileInfos(files, boardName, postNumber) {\n  return files.map((file) => { return createFileInfo(file, boardName, postNumber); });\n}\n\nexport async function addFilesToPost(boardName, postNumber, files) {\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $push: {\n      fileInfos: { $each: createFileInfos(files, boardName, postNumber) }\n    }\n  }, {\n    projection: { threadNumber: 1 },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nasync function removeFile({ boardName, name, thumb }) {\n  let path = `${__dirname}/../../public/${boardName}`;\n  try {\n    await FS.remove(`${path}/src/${name}`);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    await FS.remove(`${path}/thumb/${thumb.name}`);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function removeFiles(fileInfos) {\n  await Tools.series(fileInfos, removeFile);\n}\n\nexport async function moveThreadFilesToArchive(boardName, threadNumber) {\n  let archivePath = `${__dirname}/../../public/${boardName}/arch`;\n  await mkpath(archivePath);\n  let sourceId = `${boardName}/res/${threadNumber}.json`;\n  let data = await Cache.readFile(sourceId);\n  let model = JSON.parse(data);\n  model.thread.archived = true;\n  await FS.write(`${archivePath}/${threadNumber}.json`, JSON.stringify(model));\n  await BoardController.renderThreadHTML(model.thread, {\n    targetPath: `${archivePath}/${threadNumber}.html`,\n    archived: true\n  });\n  await Cache.removeFile(sourceId);\n  await Cache.removeFile(`${boardName}/res/${threadNumber}.html`);\n}\n\nexport async function removeArchivedThreadFiles(boardName, threadNumber) {\n  await Tools.series(['json', 'html'], async function(suffix) {\n    try {\n      await FS.remove(`${__dirname}/../../public/${boardName}/arch/${threadNumber}.${suffix}`);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function deleteFile(fileName) {\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $pull: {\n      fileInfos: { name: fileName }\n    }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1,\n      'fileInfos.$': 1\n    },\n    returnOriginal: true\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n  removeFile(post.fileInfos[0]);\n}\n\nexport async function editFileRating(fileName, rating) {\n  let Post = await client.collection('post');\n  if (Tools.FILE_RATINGS.indexOf(rating) < 0) {\n    rating = Tools.FILE_RATINGS[0];\n  }\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $set: { 'fileInfos.$.rating': rating }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1\n    },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n}\n\nexport async function editAudioTags(fileName, fields) {\n  let Post = await client.collection('post');\n  let extraData = AUDIO_TAGS.map((tagName) => {\n    return {\n      tagName: tagName,\n      value: fields[tagName]\n    };\n  }).filter(({ value }) => {\n    return (value && (typeof value === 'string'));\n  }).reduce((acc, { tagName, value }) => {\n    acc[tagName] = value;\n    return acc;\n  }, {});\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $set: { 'fileInfos.$.extraData': extraData }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1\n    },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n}\n\nexport async function getPostFileCount(boardName, postNumber, { archived } = {}) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, { fileInfoCount: 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return post.fileInfoCount;\n}\n\nexport async function copyFiles(fileInfos, sourceBoardName, targetBoardName) {\n  let sourcePath = `${__dirname}/../../public/${sourceBoardName}/src`;\n  let sourceThumbPath = `${__dirname}/../../public/${sourceBoardName}/thumb`;\n  let targetPath = `${__dirname}/../../public/${targetBoardName}/src`;\n  let targetThumbPath = `${__dirname}/../../public/${targetBoardName}/thumb`;\n  await mkpath(targetPath);\n  await mkpath(targetThumbPath);\n  return await Tools.series(fileInfos, async function(fileInfo) {\n    let oldFileName = fileInfo.name;\n    let oldThumbName = fileInfo.thumb.name;\n    let baseName = await IPC.send('fileName');\n    fileInfo.name = fileInfo.name.replace(/^\\d+/, baseName);\n    fileInfo.thumb.name = fileInfo.thumb.name.replace(/^\\d+/, baseName);\n    await FS.copy(`${sourcePath}/${oldFileName}`, `${targetPath}/${fileInfo.name}`);\n    await FS.copy(`${sourceThumbPath}/${oldThumbName}`, `${targetThumbPath}/${fileInfo.thumb.name}`);\n    return fileInfo;\n  }, true);\n}\n"],"sourceRoot":"/source/"}