{"version":3,"sources":["models/users.js"],"names":[],"mappings":"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","file":"models/users.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport FSWatcher from '../helpers/fs-watcher';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Permissions from '../helpers/permissions';\nimport * as Tools from '../helpers/tools';\nimport Channel from '../storage/channel';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport redisClient from '../storage/redis-client-factory';\n\nlet client = mongodbClient();\n\nlet BanExpiredChannel = new Channel(redisClient('BAN_EXPIRED'), `__keyevent@${config('system.redis.db')}__:expired`, {\n  parse: false,\n  stringify: false\n});\nlet UserBans = new Key(redisClient(), 'userBans');\nlet UserCaptchaQuotas = new Hash(redisClient(), 'captchaQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\n\nfunction transformIPBans(bans) {\n  return _(bans).reduce((acc, ban, ip) => {\n    ip = Tools.correctAddress(ip);\n    if (ip) {\n      acc[ip] = ban;\n    }\n    return acc;\n  }, {});\n}\n\nlet ipBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/user-bans.json`, (path) => {\n  return transformIPBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  ipBans = transformIPBans(JSON.parse(data));\n}) || {};\n\nfunction transformGeoBans(bans) {\n  return _(bans).reduce((acc, value, key) => {\n    if (typeof value === 'string') {\n      value = [value];\n    }\n    if (_(value).isArray()) {\n      value = new Set(value.map(ip => Tools.correctAddress(ip)).filter(ip => !!ip));\n    } else {\n      value = !!value;\n    }\n    acc.set(key.toUpperCase(), value);\n    return acc;\n  }, new Map());\n}\n\nlet geoBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/geo-bans.json`, (path) => {\n  return transformGeoBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  geoBans = transformGeoBans(JSON.parse(data));\n}) || new Map();\n\nexport async function getUserCaptchaQuota(boardName, userID) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    quota = await UserCaptchaQuotas.getOne(`${boardName}:${userID}`);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setUserCaptchaQuota(boardName, userID, quota) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.setOne(`${boardName}:${userID}`, quota);\n}\n\nexport async function incrementUserCaptchaQuotaBy(userID, quota, boardName) {\n  let key = userID;\n  if (boardName) {\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    key = `${boardName}:${userID}`;\n  }\n  quota = Tools.option(quota, 'number', 1, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.incrementBy(key, quota);\n}\n\nexport async function useCaptcha(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (board.captchaQuota < 1) {\n    return 0;\n  }\n  let key = userID;\n  quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } })\n  if (quota <= 0) {\n    key = `${boardName}:${userID}`;\n  }\n  let quota = await UserCaptchaQuotas.incrementBy(key, -1);\n  if (+quota < 0) {\n    return await UserCaptchaQuotas.setOne(key, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function getUserIP(boardName, postNumber) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, { 'user.ip': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return post.user.ip;\n}\n\nfunction getBannedUserBoardNames(boardNames) {\n  if (!boardNames) {\n    return Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    return [boardNames];\n  } else {\n    return boardNames;\n  }\n}\n\nfunction processBannedUser(boardNames, bannedUser) {\n  bannedUser.bans = bannedUser.bans.filter((ban) => {\n    return boardNames.indexOf(ban.boardName) >= 0;\n  }).reduce((acc, ban) => {\n    acc[ban.boardName] = ban;\n    return acc;\n  }, {});\n  return bannedUser;\n}\n\nexport async function getBannedUser(ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  let BannedUser = await client.collection('bannedUser');\n  let binaryAddress = Tools.binaryAddress(ip);\n  let bannedUser = await BannedUser.findOne({\n    $or: [\n      { ip: ip },\n      {\n        subnet: {\n          start: { $lte: binaryAddress },\n          end: { $gte: binaryAddress }\n        }\n      }\n    ]\n  }, { _id: 0 });\n  if (!bannedUser) {\n    return {\n      ip: ip,\n      bans: {}\n    };\n  }\n  return processBannedUser(getBannedUserBoardNames(boardNames), bannedUser);\n}\n\nexport async function getBannedUsers(boardNames) {\n  let BannedUser = await client.collection('bannedUser');\n  let bannedUsers = await BannedUser.find({}, { _id: 0 }).toArray();\n  boardNames = getBannedUserBoardNames(boardNames);\n  return bannedUsers.map(processBannedUser.bind(null, boardNames)).reduce((acc, bannedUser) => {\n    acc[bannedUser.ip] = bannedUser;\n    return acc;\n  }, {});\n}\n\nfunction processRegisteredUser(user) {\n  if (user.superuser) {\n    user.levels = Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 'SUPERUSER';\n      return acc;\n    }, {});\n  } else {\n    user.levels = user.levels.reduce((acc, level) => {\n      acc[level.boardName] = level.level;\n      return acc;\n    }, {});\n  }\n  return user;\n}\n\nasync function getRegisteredUserInternal(query, { full } = {}) {\n  let User = await client.collection('user');\n  let projection = { _id: 0 };\n  if (!full) {\n    projection = {\n      superuser: 1,\n      levels: 1\n    };\n  }\n  let user = await User.findOne(query, projection);\n  if (!user) {\n    return null;\n  }\n  return processRegisteredUser(user);\n}\n\nexport async function getRegisteredUserLevels(hashpass) {\n  let user = await getRegisteredUserInternal({ hashpass: hashpass });\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUserLevelsByIp(ip, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return {};\n  }\n  let query = {\n    $or: [{ 'ips.ip': ip }]\n  };\n  if (subnet) {\n    query.$or.push({\n      'ips.binary': {\n        $elemMatch: {\n          $gte: subnet.start,\n          $lte: subnet.end\n        }\n      }\n    });\n  }\n  let user = await getRegisteredUserInternal(query);\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUser(hashpass) {\n  let user = await getRegisteredUserInternal({\n    hashpass: hashpass,\n    superuser: { $exists: false }\n  }, { full: true });\n  if (!user) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n  return user;\n}\n\nexport async function getRegisteredUsers() {\n  let User = await client.collection('user');\n  let users = await User.find({\n    superuser: { $exists: false }\n  }, { _id: 0 }).toArray();\n  return users.map(processRegisteredUser);\n}\n\nfunction processUserIPs(ips) {\n  if (_(ips).isArray()) {\n    ips = ips.map(ip => Tools.correctAddress(ip));\n    if (ips.some(ip => !ip)) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n  }\n  return ips;\n}\n\nfunction processRegisteredUserData(levels, ips) {\n  if (levels.length <= 0) {\n    throw new Error(Tools.translate('Access level is not specified for any board'));\n  }\n  if (levels.some(level => !Board.board(level.boardName))) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let invalidLevel = _(levels).some((level) => {\n    return (Tools.compareRegisteredUserLevels(level.level, 'USER') < 0)\n      || (Tools.compareRegisteredUserLevels(level.level, 'SUPERUSER') >= 0);\n  });\n  if (invalidLevel) {\n    throw new Error(Tools.translate('Invalid access level'));\n  }\n  return processUserIPs(ips);\n}\n\nexport async function registerUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    levels: levels,\n    ips: processRegisteredUserData(levels, ips)\n  });\n}\n\nexport async function updateRegisteredUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let { matchedCount } = await User.updateOne({\n    hashpass: hashpass\n  }, {\n    $set: {\n      levels: levels,\n      ips: processRegisteredUserData(levels, ips)\n    }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function unregisterUser(hashpass) {\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function addSuperuser(hashpass, ips) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    superuser: true,\n    ips: processUserIPs(ips)\n  });\n}\n\nexport async function removeSuperuser(hashpass) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function getSynchronizationData(key) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  return await SynchronizationData.findOne({ key: key });\n}\n\nexport async function setSynchronizationData(key, data) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  let expireAt = Tools.now();\n  expireAt.setSeconds(expireAt.getSeconds() + config('server.synchronizationData.ttl'));\n  await await SynchronizationData.updateOne({ key: key }, {\n    $set: {\n      data: data,\n      expiresAt: expireAt\n    }\n  }, { upsert: true });\n}\n\nfunction checkGeoBan(geolocationInfo, ip) {\n  let def = geoBans.get('*');\n  if (def) {\n    geolocationInfo = geolocationInfo || {};\n  } else if (!geolocationInfo || !geolocationInfo.countryCode) {\n    return;\n  }\n  let countryCode = geolocationInfo.countryCode;\n  if (typeof countryCode !== 'string') {\n    countryCode = '';\n  }\n  let user = geoBans.get(countryCode.toUpperCase());\n  if (ip && ((typeof user === 'object' && user.has(ip)) || (typeof def === 'object' && def.has(ip)))) {\n    return;\n  }\n  if (typeof user === 'boolean' && !user) {\n    return;\n  }\n  if (!user && !def) {\n    return;\n  }\n  throw new Error(Tools.translate('Posting is disabled for this country'));\n}\n\nexport async function checkUserBan(ip, boardNames, { write, geolocationInfo } = {}) {\n  ip = Tools.correctAddress(ip);\n  let ban = ipBans[ip];\n  if (ban && (write || 'NO_ACCESS' === ban.level)) {\n    throw { ban: ban };\n  }\n  if (boardNames) {\n    let bannedUser = await getBannedUser(ip, boardNames);\n    ban = _(bannedUser.bans).find((ban) => { return ban && (write || 'NO_ACCESS' === ban.level); });\n    if (ban) {\n      throw { ban: ban };\n    }\n  }\n  if (geolocationInfo) {\n    return checkGeoBan(geolocationInfo, ip);\n  }\n}\n\nexport async function checkUserPermissions(req, boardName, postNumber, permission, password) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    threadNumber: 1,\n    user: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('Not such post: $[1]', '', `/${boardName}/${postNumber}`));\n  }\n  let { user, threadNumber } = post;\n  if (req.isSuperuser()) {\n    return;\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), Permissions[permission]()) >= 0) {\n    if (Tools.compareRegisteredUserLevels(req.level(boardName), 'USER') > 0\n      && Tools.compareRegisteredUserLevels(req.level(boardName), user.level) > 0) {\n      return;\n    }\n    if (req.hashpass && req.hashpass === user.hashpass) {\n      return;\n    }\n    if (password && password === user.password) {\n      return;\n    }\n  }\n  if (!board.opModeration) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  let Thread = await client.collection('thread');\n  let thread = await Thread.fineOne({\n    boardName: boardName,\n    number: threadNumber\n  });\n  if (!thread) {\n    throw new Error(Tools.translate('Not such thread: $[1]', '', `/${boardName}/${threadNumber}`));\n  }\n  if (thread.user.ip !== req.ip && (!req.hashpass || req.hashpass !== thread.user.hashpass)) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), user.level) >= 0) {\n    return;\n  }\n  if (req.hashpass && req.hashpass === user.hashpass) {\n    return;\n  }\n  if (password && password === user.password) {\n    return;\n  }\n  throw new Error(Tools.translate('Not enough rights'));\n}\n\nexport async function updatePostBanInfo(boardName, postNumber, bannedFor) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return;\n  }\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $set: { 'options.bannedFor': !!bannedFor }\n  }, {\n    projection: { threadNumber: 1 },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    return;\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nfunction getPostsToUpdate(oldBans, newBans) {\n  let postsBannedFor = [];\n  let postsNotBannedFor = [];\n  Board.boardNames().forEach((boardName) => {\n    let ban = newBans[boardName];\n    if (ban) {\n      if (ban.postNumber) {\n        postsBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    } else {\n      ban = oldBans[boardName];\n      if (ban && ban.postNumber) {\n        postsNotBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    }\n  });\n  return {\n    postsBannedFor: postsBannedFor,\n    postsNotBannedFor: postsNotBannedFor\n  };\n}\n\nexport async function banUser(ip, newBans, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let bannedUser = await getBannedUser(ip);\n  let oldBans = bannedUser.bans;\n  await Tools.series(oldBans, async function(_1, boardName) {\n    await UserBans.delete(`${ip}:${boardName}`);\n  });\n  let BannedUser = await client.collection('bannedUser');\n  if (_(newBans).isEmpty()) {\n    await BannedUser.deleteOne({ ip: ip });\n  } else {\n    await BannedUser.updateOne({ ip: ip }, {\n      $set: {\n        subnet: subnet,\n        bans: _(newBans).toArray()\n      }\n    }, { upsert: true });\n    await Tools.series(_(newBans).pick((ban) => {\n      return ban.expiresAt;\n    }), async function(ban) {\n      let delay = Math.ceil((+ban.expiresAt - +Tools.now()) / Tools.SECOND);\n      await UserBans.setex(ban, delay, `${ip}:${ban.boardName}`);\n    });\n  }\n  let { postsBannedFor, postsNotBannedFor } = getPostsToUpdate(oldBans, newBans);\n  await Tools.series(postsBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, true);\n  });\n  await Tools.series(postsNotBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, false);\n  });\n}\n\nasync function updateBanOnMessage(message) {\n  try {\n    let ip = Tools.correctAddress(message.split(':').slice(1, -1).join(':'));\n    if (!ip) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    let boardName = message.split(':').pop();\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let BannedUser = await client.collection('bannedUser');\n    let { value: bannedUser } = await BannedUser.findOneAndUpdate({ ip: ip }, {\n      $pull: {\n        bans: { boardName: boardName }\n      }\n    }, {\n      projection: {\n        bans: {\n          $elemMatch: { boardName: boardName }\n        }\n      },\n      returnOriginal: true\n    });\n    if (!bannedUser || (bannedUser.bans.length !== 1)) {\n      throw new Error(Tools.translate('Internal error: no user ban found'));\n    }\n    await BannedUser.deleteOne({\n      ip: ip,\n      bans: { $size: 0 }\n    });\n    let postNumber = Tools.option(bannedUser.bans[0].postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (postNumber) {\n      await updatePostBanInfo(boardName, postNumber, false);\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function initializeUserBansMonitoring() {\n  //NOTE: Enabling \"key expired\" notifications\n  await redisClient().config('SET', 'notify-keyspace-events', 'Ex');\n  await BanExpiredChannel.subscribe(updateBanOnMessage);\n}\n"],"sourceRoot":"/source/"}