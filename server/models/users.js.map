{"version":3,"sources":["models/users.js"],"names":["boardName","userID","board","Error","Tools","translate","UserCaptchaQuotas","getOne","quota","option","test","q","getUserCaptchaQuota","setOne","setUserCaptchaQuota","key","incrementBy","incrementUserCaptchaQuotaBy","Promise","reject","captchaQuota","useCaptcha","postNumber","client","collection","Post","findOne","number","post","user","ip","getUserIP","boardNames","correctAddress","BannedUser","binaryAddress","$or","subnet","start","$lte","end","$gte","_id","bannedUser","bans","processBannedUser","getBannedUserBoardNames","getBannedUser","find","toArray","bannedUsers","map","bind","reduce","acc","getBannedUsers","query","full","User","projection","superuser","levels","processRegisteredUser","getRegisteredUserInternal","hashpass","getRegisteredUserLevels","push","$elemMatch","getRegisteredUserLevelsByIp","$exists","getRegisteredUser","users","getRegisteredUsers","ips","count","insertOne","processRegisteredUserData","registerUser","updateOne","$set","matchedCount","updateRegisteredUser","deleteOne","deletedCount","unregisterUser","processUserIPs","addSuperuser","removeSuperuser","SynchronizationData","getSynchronizationData","data","expireAt","now","setSeconds","getSeconds","expiresAt","upsert","setSynchronizationData","write","ban","level","checkUserBan","req","permission","password","threadNumber","isSuperuser","compareRegisteredUserLevels","Permissions","opModeration","Thread","thread","checkUserPermissions","bannedFor","testPostNumber","findOneAndUpdate","returnOriginal","result","value","IPC","render","updatePostBanInfo","newBans","oldBans","series","_1","UserBans","delete","isEmpty","pick","delay","Math","ceil","SECOND","setex","getPostsToUpdate","postsBannedFor","postsNotBannedFor","banUser","message","split","slice","join","pop","$pull","length","$size","error","stack","updateBanOnMessage","config","BanExpiredChannel","subscribe","initializeUserBansMonitoring","parse","stringify","toString","isArray","filter","indexOf","some","invalidLevel","forEach"],"mappings":"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","file":"users.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Permissions from '../helpers/permissions';\nimport * as Tools from '../helpers/tools';\nimport Channel from '../storage/channel';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport redisClient from '../storage/redis-client-factory';\n\nlet client = mongodbClient();\n\nlet BanExpiredChannel = new Channel(redisClient('BAN_EXPIRED'), `__keyevent@${config('system.redis.db')}__:expired`, {\n  parse: false,\n  stringify: false\n});\nlet UserBans = new Key(redisClient(), 'userBans');\nlet UserCaptchaQuotas = new Hash(redisClient(), 'captchaQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\n\nexport async function getUserCaptchaQuota(boardName, userID) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    quota = await UserCaptchaQuotas.getOne(`${boardName}:${userID}`);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setUserCaptchaQuota(boardName, userID, quota) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.setOne(`${boardName}:${userID}`, quota);\n}\n\nexport async function incrementUserCaptchaQuotaBy(userID, quota, boardName) {\n  let key = userID;\n  if (boardName) {\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    key = `${boardName}:${userID}`;\n  }\n  quota = Tools.option(quota, 'number', 1, { test: (q) => { return 0 !== q; } });\n  return await UserCaptchaQuotas.incrementBy(key, quota);\n}\n\nexport async function useCaptcha(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (board.captchaQuota < 1) {\n    return 0;\n  }\n  let key = userID;\n  quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } })\n  if (quota <= 0) {\n    key = `${boardName}:${userID}`;\n  }\n  let quota = await UserCaptchaQuotas.incrementBy(key, -1);\n  if (+quota < 0) {\n    return await UserCaptchaQuotas.setOne(key, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function getUserIP(boardName, postNumber) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, { 'user.ip': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return post.user.ip;\n}\n\nfunction getBannedUserBoardNames(boardNames) {\n  if (!boardNames) {\n    return Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    return [boardNames];\n  } else {\n    return boardNames;\n  }\n}\n\nfunction processBannedUser(boardNames, bannedUser) {\n  bannedUser.bans = bannedUser.bans.filter((ban) => {\n    return boardNames.indexOf(ban.boardName) >= 0;\n  }).reduce((acc, ban) => {\n    acc[ban.boardName] = ban;\n    return acc;\n  }, {});\n  return bannedUser;\n}\n\nexport async function getBannedUser(ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  let BannedUser = await client.collection('bannedUser');\n  let binaryAddress = Tools.binaryAddress(ip);\n  let bannedUser = await BannedUser.findOne({\n    $or: [\n      { ip: ip },\n      {\n        subnet: {\n          start: { $lte: binaryAddress },\n          end: { $gte: binaryAddress }\n        }\n      }\n    ]\n  }, { _id: 0 });\n  if (!bannedUser) {\n    return {\n      ip: ip,\n      bans: {}\n    };\n  }\n  return processBannedUser(getBannedUserBoardNames(boardNames), bannedUser);\n}\n\nexport async function getBannedUsers(boardNames) {\n  let BannedUser = await client.collection('bannedUser');\n  let bannedUsers = await BannedUser.find({}, { _id: 0 }).toArray();\n  boardNames = getBannedUserBoardNames(boardNames);\n  return bannedUsers.map(processBannedUser.bind(null, boardNames)).reduce((acc, bannedUser) => {\n    acc[bannedUser.ip] = bannedUser;\n    return acc;\n  }, {});\n}\n\nfunction processRegisteredUser(user) {\n  if (user.superuser) {\n    user.levels = Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 'SUPERUSER';\n      return acc;\n    }, {});\n  } else {\n    user.levels = user.levels.reduce((acc, level) => {\n      acc[level.boardName] = level.level;\n      return acc;\n    }, {});\n  }\n  return user;\n}\n\nasync function getRegisteredUserInternal(query, { full } = {}) {\n  let User = await client.collection('user');\n  let projection = { _id: 0 };\n  if (!full) {\n    projection = {\n      superuser: 1,\n      levels: 1\n    };\n  }\n  let user = await User.findOne(query, projection);\n  if (!user) {\n    return null;\n  }\n  return processRegisteredUser(user);\n}\n\nexport async function getRegisteredUserLevels(hashpass) {\n  let user = await getRegisteredUserInternal({ hashpass: hashpass });\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUserLevelsByIp(ip, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return {};\n  }\n  let query = {\n    $or: [{ 'ips.ip': ip }]\n  };\n  if (subnet) {\n    query.$or.push({\n      'ips.binary': {\n        $elemMatch: {\n          $gte: subnet.start,\n          $lte: subnet.end\n        }\n      }\n    });\n  }\n  let user = await getRegisteredUserInternal(query);\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUser(hashpass) {\n  let user = await getRegisteredUserInternal({\n    hashpass: hashpass,\n    superuser: { $exists: false }\n  }, { full: true });\n  if (!user) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n  return user;\n}\n\nexport async function getRegisteredUsers() {\n  let User = await client.collection('user');\n  let users = await User.find({\n    superuser: { $exists: false }\n  }, { _id: 0 }).toArray();\n  return users.map(processRegisteredUser);\n}\n\nfunction processUserIPs(ips) {\n  if (_(ips).isArray()) {\n    ips = ips.map(ip => Tools.correctAddress(ip));\n    if (ips.some(ip => !ip)) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n  }\n  return ips;\n}\n\nfunction processRegisteredUserData(levels, ips) {\n  if (levels.length <= 0) {\n    throw new Error(Tools.translate('Access level is not specified for any board'));\n  }\n  levels = levels.filter(level => !!Board.board(level.boardName));\n  let invalidLevel = _(levels).some((level) => {\n    return (Tools.compareRegisteredUserLevels(level.level, 'USER') < 0)\n      || (Tools.compareRegisteredUserLevels(level.level, 'SUPERUSER') >= 0);\n  });\n  if (invalidLevel) {\n    throw new Error(Tools.translate('Invalid access level'));\n  }\n  return processUserIPs(ips);\n}\n\nexport async function registerUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    levels: levels,\n    ips: processRegisteredUserData(levels, ips)\n  });\n}\n\nexport async function updateRegisteredUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let { matchedCount } = await User.updateOne({\n    hashpass: hashpass\n  }, {\n    $set: {\n      levels: levels,\n      ips: processRegisteredUserData(levels, ips)\n    }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function unregisterUser(hashpass) {\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function addSuperuser(hashpass, ips) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    superuser: true,\n    ips: processUserIPs(ips)\n  });\n}\n\nexport async function removeSuperuser(hashpass) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function getSynchronizationData(key) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  return await SynchronizationData.findOne({ key: key });\n}\n\nexport async function setSynchronizationData(key, data) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  let expireAt = Tools.now();\n  expireAt.setSeconds(expireAt.getSeconds() + config('server.synchronizationData.ttl'));\n  await await SynchronizationData.updateOne({ key: key }, {\n    $set: {\n      data: data,\n      expiresAt: expireAt\n    }\n  }, { upsert: true });\n}\n\nexport async function checkUserBan(ip, boardNames, { write } = {}) {\n  ip = Tools.correctAddress(ip);\n  if (boardNames) {\n    let bannedUser = await getBannedUser(ip, boardNames);\n    let ban = _(bannedUser.bans).find((ban) => { return ban && (write || 'NO_ACCESS' === ban.level); });\n    if (ban) {\n      throw { ban: ban };\n    }\n  }\n}\n\nexport async function checkUserPermissions(req, boardName, postNumber, permission, password) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    threadNumber: 1,\n    user: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('Not such post: $[1]', '', `/${boardName}/${postNumber}`));\n  }\n  let { user, threadNumber } = post;\n  if (req.isSuperuser()) {\n    return;\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), Permissions[permission]()) >= 0) {\n    if (Tools.compareRegisteredUserLevels(req.level(boardName), 'USER') > 0\n      && Tools.compareRegisteredUserLevels(req.level(boardName), user.level) > 0) {\n      return;\n    }\n    if (req.hashpass && req.hashpass === user.hashpass) {\n      return;\n    }\n    if (password && password === user.password) {\n      return;\n    }\n  }\n  if (!board.opModeration) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  let Thread = await client.collection('thread');\n  let thread = await Thread.findOne({\n    boardName: boardName,\n    number: threadNumber\n  });\n  if (!thread) {\n    throw new Error(Tools.translate('Not such thread: $[1]', '', `/${boardName}/${threadNumber}`));\n  }\n  if (thread.user.ip !== req.ip && (!req.hashpass || req.hashpass !== thread.user.hashpass)) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), user.level) >= 0) {\n    return;\n  }\n  if (req.hashpass && req.hashpass === user.hashpass) {\n    return;\n  }\n  if (password && password === user.password) {\n    return;\n  }\n  throw new Error(Tools.translate('Not enough rights'));\n}\n\nexport async function updatePostBanInfo(boardName, postNumber, bannedFor) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return;\n  }\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $set: { 'options.bannedFor': !!bannedFor }\n  }, {\n    projection: { threadNumber: 1 },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    return;\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nfunction getPostsToUpdate(oldBans, newBans) {\n  let postsBannedFor = [];\n  let postsNotBannedFor = [];\n  Board.boardNames().forEach((boardName) => {\n    let ban = newBans[boardName];\n    if (ban) {\n      if (ban.postNumber) {\n        postsBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    } else {\n      ban = oldBans[boardName];\n      if (ban && ban.postNumber) {\n        postsNotBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    }\n  });\n  return {\n    postsBannedFor: postsBannedFor,\n    postsNotBannedFor: postsNotBannedFor\n  };\n}\n\nexport async function banUser(ip, newBans, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let bannedUser = await getBannedUser(ip);\n  let oldBans = bannedUser.bans;\n  await Tools.series(oldBans, async function(_1, boardName) {\n    await UserBans.delete(`${ip}:${boardName}`);\n  });\n  let BannedUser = await client.collection('bannedUser');\n  if (_(newBans).isEmpty()) {\n    await BannedUser.deleteOne({ ip: ip });\n  } else {\n    await BannedUser.updateOne({ ip: ip }, {\n      $set: {\n        subnet: subnet,\n        bans: _(newBans).toArray()\n      }\n    }, { upsert: true });\n    await Tools.series(_(newBans).pick((ban) => {\n      return ban.expiresAt;\n    }), async function(ban) {\n      let delay = Math.ceil((+ban.expiresAt - +Tools.now()) / Tools.SECOND);\n      await UserBans.setex(ban, delay, `${ip}:${ban.boardName}`);\n    });\n  }\n  let { postsBannedFor, postsNotBannedFor } = getPostsToUpdate(oldBans, newBans);\n  await Tools.series(postsBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, true);\n  });\n  await Tools.series(postsNotBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, false);\n  });\n}\n\nasync function updateBanOnMessage(message) {\n  try {\n    let ip = Tools.correctAddress(message.split(':').slice(1, -1).join(':'));\n    if (!ip) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    let boardName = message.split(':').pop();\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let BannedUser = await client.collection('bannedUser');\n    let { value: bannedUser } = await BannedUser.findOneAndUpdate({ ip: ip }, {\n      $pull: {\n        bans: { boardName: boardName }\n      }\n    }, {\n      projection: {\n        bans: {\n          $elemMatch: { boardName: boardName }\n        }\n      },\n      returnOriginal: true\n    });\n    if (!bannedUser || (bannedUser.bans.length !== 1)) {\n      throw new Error(Tools.translate('Internal error: no user ban found'));\n    }\n    await BannedUser.deleteOne({\n      ip: ip,\n      bans: { $size: 0 }\n    });\n    let postNumber = Tools.option(bannedUser.bans[0].postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (postNumber) {\n      await updatePostBanInfo(boardName, postNumber, false);\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function initializeUserBansMonitoring() {\n  //NOTE: Enabling \"key expired\" notifications\n  await redisClient().config('SET', 'notify-keyspace-events', 'Ex');\n  await BanExpiredChannel.subscribe(updateBanOnMessage);\n}\n"]}