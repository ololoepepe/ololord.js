{"version":3,"sources":["models/boards.js"],"names":[],"mappings":"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","file":"models/boards.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as MiscModel from './misc';\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\nlet pageCounts = new Map();\n\nfunction addDataToThread(thread, board) {\n  thread.bumpLimit = board.bumpLimit;\n  thread.postLimit = board.postLimit;\n  thread.bumpLimitReached = (thread.postCount >= board.bumpLimit);\n  thread.postLimitReached = (thread.postCount >= board.postLimit);\n  thread.postingEnabled = (board.postingEnabled && !thread.closed);\n}\n\nexport function postSubject(post, maxLength) {\n  let subject = '';\n  if (post.subject) {\n    subject = post.subject;\n  } else if (post.text) {\n    subject = Renderer.plainText(post.text);\n  }\n  subject = subject.replace(/\\r*\\n+/gi, '');\n  maxLength = Tools.option(maxLength, 'number', 0, { test: (l) => { return l > 0; } });\n  if (maxLength > 1 && subject.length > maxLength) {\n    subject = subject.substr(0, maxLength - 1) + '…';\n  }\n  return subject;\n}\n\nexport async function getThread(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  let posts = await PostsModel.getThreadPosts(boardName, threadNumber);\n  thread.postCount = posts.length;\n  if (thread.postCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  thread.opPost = posts.splice(0, 1)[0];\n  thread.lastPosts = posts;\n  thread.title = postSubject(thread.opPost, 50) || null;\n  addDataToThread(thread, board);\n  return thread;\n}\n\nexport async function getPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  pageNumber = Tools.option(pageNumber, 'number', -1, { test: (n) => { return n >= 0; } });\n  let pageCount = pageCounts.get(boardName);\n  if (pageNumber < 0 || pageNumber >= pageCount) {\n    throw new Error(Tools.translate('Invalid page number'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName, {\n    sort: -1,\n    limit: board.threadsPerPage,\n    offset: pageNumber * board.threadsPerPage\n  });\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.lastPosts = await PostsModel.getThreadPosts(boardName, thread.number, {\n      limit: board.maxLastPosts,\n      offset: 1,\n      sort: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n    if (thread.postCount > (board.maxLastPosts + 1)) {\n      thread.omittedPosts = thread.postCount - board.maxLastPosts - 1;\n    } else {\n      thread.omittedPosts = 0;\n    }\n  });\n  threads = threads.filter((thread) => { return (thread.opPost && (thread.postCount > 0)); });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    pageCount: pageCount,\n    currentPage: pageNumber,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getCatalog(boardName, sortMode) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName);\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n  });\n  let sortFunction = ThreadsModel.sortThreadsByCreationDate;\n  switch ((sortMode || 'date').toLowerCase()) {\n  case 'recent':\n    sortFunction = ThreadsModel.sortThreadsByDate;\n    break;\n  case 'bumps':\n    sortFunction = ThreadsModel.sortThreadsByPostCount;\n    break;\n  default:\n    break;\n  }\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort(sortFunction),\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getArchive(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName, { archived: true });\n  threads.sort(ThreadsModel.sortThreadsByDate);\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number);\n    thread.title = postSubject(thread.opPost, 50) || null;\n  });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getLastPostNumber(boardName) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOne({ _id: boardName }, { lastPostNumber: 1 });\n  return result ? result.lastPostNumber : 0;\n}\n\nexport async function getLastPostNumbers(boardNames) {\n  if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  if (boardNames.some(boardName => !Board.board(boardName))) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let query = {\n    _id: { $in: boardNames }\n  };\n  let result = await PostCounter.find(query).toArray();\n  return result.reduce((acc, { _id, lastPostNumber }) => {\n    acc[_id] = lastPostNumber;\n    return acc;\n  }, {});\n}\n\nexport async function getPageCount(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  let threadCount = await ThreadsModel.getThreadCount(boardName);\n  let pageCount = Math.ceil(threadCount / board.threadsPerPage) || 1;\n  pageCounts.set(boardName, pageCount);\n  return pageCount;\n}\n\nexport async function nextPostNumber(boardName, incrementBy) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  incrementBy = Tools.option(incrementBy, 'number', 1, { test: (i) => { return i >= 1; } });\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOneAndUpdate({ _id: boardName }, {\n    $inc: { lastPostNumber: incrementBy }\n  }, {\n    projection: { lastPostNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastPostNumber } = result.value;\n  //TODO: improve get skipping\n  if ((1 === incrementBy) && (board.skippedGetOrder > 0) && !(lastPostNumber % Math.pow(10, board.skippedGetOrder))) {\n    return await nextPostNumber(boardName, incrementBy);\n  }\n  return lastPostNumber;\n}\n\nexport async function initialize() {\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    await getPageCount(boardName);\n  });\n  await ThreadsModel.clearDeletedThreads();\n}\n\nexport async function delall(req, ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let deletedThreads = {};\n  let updatedThreads = {};\n  let deletedPosts = {};\n  let Post = await client.collection('post');\n  await Tools.series(boardNames, async function(boardName) {\n    let posts = await Post.find({\n      boardName: boardName,\n      'user.ip': ip\n    }, {\n      number: 1,\n      threadNumber: 1\n    }).toArray();\n    posts.forEach((post) => {\n      if (post.threadNumber === post.number) {\n        deletedThreads[`${boardName}:${post.threadNumber}`] = {\n          boardName: boardName,\n          number: post.threadNumber\n        };\n      }\n    });\n    posts.filter(post => !deletedThreads.hasOwnProperty(`${boardName}:${post.threadNumber}`)).forEach((post) => {\n      updatedThreads[`${boardName}:${post.threadNumber}`] = {\n        boardName: boardName,\n        number: post.threadNumber\n      };\n      deletedPosts[`${boardName}:${post.number}`] = {\n        boardName: boardName,\n        number: post.number,\n        threadNumber: post.threadNumber\n      };\n    });\n  });\n  await Tools.series(deletedPosts, async function(post) {\n    await Post.deleteOne({\n      boardName: post.boardName,\n      number: post.number\n    });\n    await PostsModel.removePostData(post.boardName, post.number, post.threadNumber);\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await ThreadsModel.removeThread(thread.boardName, thread.number);\n  });\n  await Tools.series(updatedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'edit');\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'delete');\n  });\n}\n"],"sourceRoot":"/source/"}