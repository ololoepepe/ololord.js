{"version":3,"sources":["models/chats.js"],"names":[],"mappings":"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","file":"models/chats.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nfunction createMessagesQuery(user) {\n  let query = [{ 'sender.ip': user.ip }, { 'receiver.ip': user.ip }];\n  if (user.hashpass) {\n    query.push({ 'sender.hashpass': user.hashpass });\n    query.push({ 'receiver.hashpass': user.hashpass });\n  }\n  return query;\n}\n\nfunction usersEqual(user1, user2) {\n  return ((user1.ip === user2.ip) || (user1.hashpass && (user1.hashpass === user2.hashpass)));\n}\n\nfunction messageType(message, user) {\n  if (usersEqual(user, message.sender)) {\n    return 'out';\n  } else {\n    return 'in';\n  }\n}\n\nfunction cloneUser(user) {\n  return {\n    ip: user.ip,\n    hashpass: user.hashpass\n  };\n}\n\nasync function getChatNumber(boardName, postNumber, chatNumber) {\n  let ChatNumberCounter = await client.collection('chatNumberCounter');\n  let key = `${boardName}:${postNumber}`;\n  let counter = await ChatNumberCounter.findOne({\n    _id: key,\n    lastChatNumber: { $lte: chatNumber }\n  });\n  if (counter) {\n    return chatNumber;\n  }\n  let result = await ChatNumberCounter.findOneAndUpdate({ _id: key }, {\n    $inc: { lastChatNumber: 1 }\n  }, {\n    projection: { lastChatNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastChatNumber } = result.value;\n  return lastChatNumber;\n}\n\nasync function selectReceiver(key, user, postUser) {\n  let ChatMessage = await client.collection('chatMessage');\n  let message = await ChatMessage.findOne({ key: key }, {\n    sender: 1,\n    receiver: 1\n  });\n  if (message && !usersEqual(message.sender, user) && !usersEqual(message.receiver, user)) {\n    throw new Error(Tools.translate('Somebody is chatting here already'));\n  }\n  if (!message || !usersEqual(user, postUser)) {\n    return cloneUser(postUser);\n  }\n  return usersEqual(user, message.sender) ? message.receiver : message.sender;\n}\n\nexport async function getChatMessages(user, lastRequestDate) {\n  let ChatMessage = await client.collection('chatMessage');\n  let date = Tools.now();\n  let messages = await ChatMessage.find({\n    $and: [{\n      $or: createMessagesQuery(user)\n    }, {\n      date: { $gt: lastRequestDate }\n    }]\n  }, {\n    _id: 0\n  }).sort({ date: 1 }).toArray();\n  let chats = messages.reduce((acc, message) => {\n    let chat = acc[message.key];\n    if (!chat) {\n      chat = [];\n      acc[message.key] = chat;\n    }\n    delete message.key;\n    let list = [{\n      messageUser: message.sender,\n      type: 'out'\n    }, {\n      messageUser: message.receiver,\n      type: 'in'\n    }];\n    delete message.sender;\n    delete message.receiver;\n    message.date = message.date.toISOString();\n    list.filter(({ messageUser }) => usersEqual(user, messageUser)).forEach(({ messageUser, type }) => {\n      let msg = _.clone(message);\n      msg.type = type;\n      chat.push(msg);\n    });\n    return acc;\n  }, {});\n  return {\n    lastRequestDate: date.toISOString(),\n    chats: chats\n  };\n}\n\nexport async function addChatMessage({ user, boardName, postNumber, chatNumber, text } = {}) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  if (!text || typeof text !== 'string') {\n    throw new Error(Tools.translate('Message is empty'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    'user.ip': 1,\n    'user.hashpass': 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n  chatNumber = await getChatNumber(boardName, postNumber, chatNumber);\n  let key = `${boardName}:${postNumber}:${chatNumber}`;\n  let receiver = await selectReceiver(key, user, post.user);\n  let ChatMessage = await client.collection('chatMessage');\n  let date = Tools.now();\n  await ChatMessage.insertOne({\n    key: key,\n    text: text,\n    date: date,\n    sender: cloneUser(user),\n    receiver: receiver\n  });\n  return {\n    message: {\n      text: text,\n      date: date.toISOString()\n    },\n    chatNumber: chatNumber,\n    receiver: receiver\n  };\n}\n\nexport async function deleteChatMessages({ user, boardName, postNumber, chatNumber } = {}) {\n  let ChatMessage = await client.collection('chatMessage');\n  await ChatMessage.deleteMany({\n    $and: [{ $or: createMessagesQuery(user) }, { key: `${boardName}:${postNumber}:${chatNumber}` }]\n  });\n}\n"],"sourceRoot":"/source/"}