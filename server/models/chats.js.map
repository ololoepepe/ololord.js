{"version":3,"sources":["models/chats.js"],"names":[],"mappings":"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","file":"models/chats.js","sourcesContent":["import _ from 'underscore';\nimport Crypto from 'crypto';\n\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nfunction createUserHash(user) {\n  return Tools.crypto('sha256', user.hashpass || user.ip);\n}\n\nasync function getChatNumber(boardName, postNumber, chatNumber) {\n  let ChatNumberCounter = await client.collection('chatNumberCounter');\n  let key = `${boardName}:${postNumber}`;\n  let counter = await ChatNumberCounter.findOne({\n    _id: key,\n    lastChatNumber: { $lte: chatNumber }\n  });\n  if (counter) {\n    return chatNumber;\n  }\n  let result = await ChatNumberCounter.findOneAndUpdate({ _id: key }, {\n    $inc: { lastChatNumber: 1 }\n  }, {\n    projection: { lastChatNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastChatNumber } = result.value;\n  return lastChatNumber;\n}\n\nexport async function getChatMessages(user, lastRequestDate) {\n  let ChatMessage = await client.collection('chatMessage');\n  let hash = createUserHash(user);\n  let date = Tools.now();\n  let messages = await ChatMessage.find({\n    $or: [{\n      senderHash: hash,\n      date: { $gt: lastRequestDate }\n    }, {\n      receiverHash: hash,\n      date: { $gt: lastRequestDate }\n    }]\n  }, {\n    _id: 0,\n    receiverHash: 0\n  }).sort({ date: 1 }).toArray();\n  let chats = messages.reduce((acc, message) => {\n    message.type = (hash === message.senderHash) ? 'out' : 'in';\n    let chat = acc[message.key];\n    if (!chat) {\n      chat = [];\n      acc[message.key] = chat;\n    }\n    delete message.key;\n    delete message.senderHash;\n    message.date = message.date.toISOString();\n    chat.push(message);\n    return acc;\n  }, {});\n  return {\n    lastRequestDate: date.toISOString(),\n    chats: chats\n  };\n}\n\nexport async function addChatMessage({ user, boardName, postNumber, chatNumber, text } = {}) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  if (!text || typeof text !== 'string') {\n    throw new Error(Tools.translate('Message is empty'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    'user.ip': 1,\n    'user.hash': 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let receiver = post.user;\n  let receiverHash = createUserHash(receiver);\n  let senderHash = createUserHash(user);\n  chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n  chatNumber = await getChatNumber(boardName, postNumber, chatNumber);\n  let key = `${boardName}:${postNumber}:${chatNumber}`;\n  let ChatMessage = await client.collection('chatMessage');\n  let message = await ChatMessage.findOne({ key: key }, {\n    senderHash: 1,\n    receiverHash: 1\n  });\n  if (message && (message.senderHash !== senderHash && message.receiverHash !== receiverHash)) {\n    throw new Error(Tools.translate('Somebody is chatting here already'));\n  }\n  let date = Tools.now();\n  await ChatMessage.insertOne({\n    key: key,\n    text: text,\n    date: date,\n    senderHash: senderHash,\n    receiverHash: receiverHash\n  });\n  return {\n    message: {\n      text: text,\n      date: date.toISOString()\n    },\n    chatNumber: chatNumber,\n    senderHash: senderHash,\n    receiverHash: receiverHash,\n    receiver: receiver\n  };\n}\n\nexport async function deleteChatMessages({ user, boardName, postNumber, chatNumber } = {}) {\n  let ChatMessage = await client.collection('chatMessage');\n  let key = `${boardName}:${postNumber}:${chatNumber}`;\n  let hash = createUserHash(user);\n  await ChatMessage.deleteMany({\n    $or: [{\n      senderHash: hash,\n      key: key\n    }, {\n      receiverHash: hash,\n      key: key\n    }]\n  });\n}\n"],"sourceRoot":"/source/"}