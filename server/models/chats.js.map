{"version":3,"sources":["models/chats.js"],"names":["boardName","postNumber","chatNumber","client","collection","ChatNumberCounter","key","findOne","_id","lastChatNumber","$lte","counter","findOneAndUpdate","$inc","projection","upsert","returnOriginal","result","value","getChatNumber","user","postUser","ChatMessage","sender","receiver","message","usersEqual","Error","Tools","translate","cloneUser","selectReceiver","lastRequestDate","date","now","find","$and","$or","createMessagesQuery","$gt","sort","toArray","messages","chats","reduce","acc","chat","list","messageUser","type","toISOString","filter","forEach","msg","clone","push","getChatMessages","text","board","option","test","testPostNumber","Post","number","post","n","insertOne","addChatMessage","deleteMany","deleteChatMessages","query","ip","hashpass","user1","user2"],"mappings":"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","file":"chats.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nfunction createMessagesQuery(user) {\n  let query = [{ 'sender.ip': user.ip }, { 'receiver.ip': user.ip }];\n  if (user.hashpass) {\n    query.push({ 'sender.hashpass': user.hashpass });\n    query.push({ 'receiver.hashpass': user.hashpass });\n  }\n  return query;\n}\n\nfunction usersEqual(user1, user2) {\n  return ((user1.ip === user2.ip) || (user1.hashpass && (user1.hashpass === user2.hashpass)));\n}\n\nfunction cloneUser(user) {\n  return {\n    ip: user.ip,\n    hashpass: user.hashpass\n  };\n}\n\nasync function getChatNumber(boardName, postNumber, chatNumber) {\n  let ChatNumberCounter = await client.collection('chatNumberCounter');\n  let key = `${boardName}:${postNumber}`;\n  let counter = await ChatNumberCounter.findOne({\n    _id: key,\n    lastChatNumber: { $lte: chatNumber }\n  });\n  if (counter) {\n    return chatNumber;\n  }\n  let result = await ChatNumberCounter.findOneAndUpdate({ _id: key }, {\n    $inc: { lastChatNumber: 1 }\n  }, {\n    projection: { lastChatNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastChatNumber } = result.value;\n  return lastChatNumber;\n}\n\nasync function selectReceiver(key, user, postUser) {\n  let ChatMessage = await client.collection('chatMessage');\n  let message = await ChatMessage.findOne({ key: key }, {\n    sender: 1,\n    receiver: 1\n  });\n  if (message && !usersEqual(message.sender, user) && !usersEqual(message.receiver, user)) {\n    throw new Error(Tools.translate('Somebody is chatting here already'));\n  }\n  if (!message || !usersEqual(user, postUser)) {\n    return cloneUser(postUser);\n  }\n  return usersEqual(user, message.sender) ? message.receiver : message.sender;\n}\n\nexport async function getChatMessages(user, lastRequestDate) {\n  let ChatMessage = await client.collection('chatMessage');\n  let date = Tools.now();\n  let messages = await ChatMessage.find({\n    $and: [{\n      $or: createMessagesQuery(user)\n    }, {\n      date: { $gt: lastRequestDate }\n    }]\n  }, {\n    _id: 0\n  }).sort({ date: 1 }).toArray();\n  let chats = messages.reduce((acc, message) => {\n    let chat = acc[message.key];\n    if (!chat) {\n      chat = [];\n      acc[message.key] = chat;\n    }\n    delete message.key;\n    let list = [{\n      messageUser: message.sender,\n      type: 'out'\n    }, {\n      messageUser: message.receiver,\n      type: 'in'\n    }];\n    delete message.sender;\n    delete message.receiver;\n    message.date = message.date.toISOString();\n    list.filter(({ messageUser }) => usersEqual(user, messageUser)).forEach(({ messageUser, type }) => {\n      let msg = _.clone(message);\n      msg.type = type;\n      chat.push(msg);\n    });\n    return acc;\n  }, {});\n  return {\n    lastRequestDate: date.toISOString(),\n    chats: chats\n  };\n}\n\nexport async function addChatMessage({ user, boardName, postNumber, chatNumber, text } = {}) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  if (!text || typeof text !== 'string') {\n    throw new Error(Tools.translate('Message is empty'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    'user.ip': 1,\n    'user.hashpass': 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n  chatNumber = await getChatNumber(boardName, postNumber, chatNumber);\n  let key = `${boardName}:${postNumber}:${chatNumber}`;\n  let receiver = await selectReceiver(key, user, post.user);\n  let ChatMessage = await client.collection('chatMessage');\n  let date = Tools.now();\n  await ChatMessage.insertOne({\n    key: key,\n    text: text,\n    date: date,\n    sender: cloneUser(user),\n    receiver: receiver\n  });\n  return {\n    message: {\n      text: text,\n      date: date.toISOString()\n    },\n    chatNumber: chatNumber,\n    receiver: receiver\n  };\n}\n\nexport async function deleteChatMessages({ user, boardName, postNumber, chatNumber } = {}) {\n  let ChatMessage = await client.collection('chatMessage');\n  await ChatMessage.deleteMany({\n    $and: [{ $or: createMessagesQuery(user) }, { key: `${boardName}:${postNumber}:${chatNumber}` }]\n  });\n}\n"]}