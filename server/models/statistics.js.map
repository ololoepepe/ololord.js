{"version":3,"sources":["models/statistics.js"],"names":[],"mappings":"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","file":"models/statistics.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as BoardsModel from './boards';\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nasync function gatherBoardStatistics(board) {\n  const BOARD_PUBLIC_PATH = `${__dirname}/../../public/${board.name}`;\n  let statistics = {\n    postCount: 0,\n    postingSpeed: '-',\n    fileCount: 0,\n    diskUsage: 0\n  };\n  try {\n    let lastPostNumber = await BoardsModel.getLastPostNumber(board.name);\n    statistics.postCount = lastPostNumber;\n    statistics.postingSpeed = Renderer.postingSpeedString(board.launchDate, lastPostNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    let fileNames = await FS.list(`${BOARD_PUBLIC_PATH}/src`);\n    statistics.fileCount = fileNames.length;\n  } catch (err) {\n    if ('ENOENT' !== err.code) {\n      Logger.error(err.stack || err);\n    }\n  }\n  await Tools.series(['src', 'thumb'], async function(subpath) {\n    try {\n      let size = await Files.diskUsage(`${BOARD_PUBLIC_PATH}/${subpath}`);\n      statistics.diskUsage += size;\n    } catch (err) {\n      if ('ENOENT' !== err.code) {\n        Logger.error(err.stack || err);\n      }\n    }\n  });\n  return statistics;\n}\n\n//NOTE: Must be called from the master process only.\nexport async function generateStatistics() {\n  if (!Cluster.isMaster) {\n    Logger.error(Tools.translate('Error: generateStatistics() called from worker process.'));\n    return;\n  }\n  console.log(Tools.translate('Generating statisticsâ€¦'));\n  let statistics = {\n    boards: [],\n    total: {\n      postCount: 0,\n      fileCount: 0,\n      diskUsage: 0\n    }\n  };\n  let launchDate = _.now();\n  try {\n    let Post = await client.collection('post');\n    let ips = await Post.distinct('user.ip');\n    statistics.total.uniqueIPCount = ips.length;\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      let boardLaunchDate = board.launchDate.valueOf();\n      if (boardLaunchDate < launchDate) {\n        launchDate = boardLaunchDate;\n      }\n      let boardStatistics = await gatherBoardStatistics(board);\n      boardStatistics.name = board.name;\n      boardStatistics.title = board.title;\n      boardStatistics.hidden = board.hidden;\n      let ips = await Post.distinct('user.ip', { boardName: boardName });\n      boardStatistics.uniqueIPCount = ips.length;\n      statistics.total.postCount += boardStatistics.postCount;\n      statistics.total.fileCount += boardStatistics.fileCount;\n      statistics.total.diskUsage += boardStatistics.diskUsage;\n      statistics.boards.push(boardStatistics);\n    });\n    statistics.total.postingSpeed = Renderer.postingSpeedString(launchDate, statistics.total.postCount);\n    let data = await IPC.send('getConnectionIPs');\n    statistics.online = data.reduce((acc, ips) => {\n      _(ips).each((_1, ip) => { acc.add(ip); });\n      return acc;\n    }, new Set()).size;\n    statistics.uptime = process.uptime();\n    await Cache.writeFile('misc/statistics.json', JSON.stringify(statistics));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}