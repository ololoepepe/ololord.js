{"version":3,"sources":["models/threads.js"],"names":["boardName","threadNumber","lastPostNumber","client","collection","Post","query","Tools","option","test","testPostNumber","number","$gt","count","getThreadPostCount","archived","Thread","find","sort","toArray","threads","map","getThreadNumbers","projection","board","Error","translate","_id","findOne","thread","getThread","threadExists","limit","offset","cursor","fixed","updatedAt","skip","getThreads","getThreadCount","posts","length","getThreadLastPostNumber","postCount","newPostCount","bumpLimit","postLimit","bumpLimitReached","postLimitReached","closed","unbumpable","postingEnabled","getThreadInfo","DeletedThreads","contains","isThreadDeleted","addOne","setThreadDeleted","delete","clearDeletedThreads","threadCount","threadLimit","archivedThreadCount","removeLastArchivedThread","archiveLimit","lastThread","lastArchivedThread","deleteThread","IPC","renderArchive","updateOne","$set","updateMany","render","pushOutOldThread","req","fields","transaction","password","error","stack","date","now","BoardsModel","nextPostNumber","user","PostsModel","createPostUser","level","createdAt","toISOString","setThreadNumber","insertOne","createThread","flagName","flagValue","matchedCount","modifiedCount","setThreadFlag","setThreadFixed","setThreadClosed","setThreadUnbumpable","sourceBoardName","targetBoardName","targetBoard","originalBoardName","originalNumber","initialPostNumber","copyPosts","sourceThreadNumber","commit","moveThread","findOneAndDelete","result","value","referencedPosts","referringPosts","fileInfos","deleteMany","series","post","PostReferencesModel","removeReferringPosts","updateReferringPosts","undefined","refs","extend","flatten","rerenderReferencedPosts","FilesModel","removeFiles","getThreadRedirect","sortThreadsByDate","sortThreadsByCreationDate","sortThreadsByPostCount","mkpath","parse","stringify","t1","t2","localeCompare"],"mappings":"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","file":"threads.js","sourcesContent":["import _ from 'underscore';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as PostReferencesModel from './post-references';\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport redisClient from '../storage/redis-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\n\nconst mkpath = promisify('mkpath');\n\nlet client = mongodbClient();\nlet DeletedThreads = new UnorderedSet(redisClient(), 'deletedThreads', {\n  parse: false,\n  stringify: false\n});\n\nexport function sortThreadsByDate(t1, t2) {\n  if (!!t1.fixed === !!t2.fixed) {\n    return t2.updatedAt.localeCompare(t1.updatedAt);\n  } else {\n    return t1.fixed ? -1 : 1;\n  }\n}\n\nexport function sortThreadsByCreationDate(t1, t2) {\n  return t2.createdAt.localeCompare(t1.createdAt);\n}\n\nexport function sortThreadsByPostCount(t1, t2) {\n  return t2.postCount - t1.postCount;\n}\n\nexport async function getThreadPostCount(boardName, threadNumber, { lastPostNumber } = {}) {\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  lastPostNumber = Tools.option(lastPostNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (lastPostNumber) {\n    query.number = { $gt: lastPostNumber };\n  }\n  return await Post.count(query);\n}\n\nexport async function getThreadNumbers(boardName, { archived } = {}) {\n  let Thread = await client.collection('thread');\n  let threads = await Thread.find({\n    boardName: boardName,\n    archived: !!archived\n  }, { number: 1 }).sort({ number: -1 }).toArray();\n  return threads.map(({ number }) => number);\n}\n\nexport async function getThread(boardName, threadNumber, projection) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  if (typeof projection !== 'object') {\n    projection = { _id: 0 };\n  }\n  let thread = await Thread.findOne({\n    boardName: boardName,\n    number: threadNumber\n  }, projection);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  return thread;\n}\n\nexport async function threadExists(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  let count = await Thread.count({\n    boardName: boardName,\n    number: threadNumber\n  });\n  return (count > 0);\n}\n\nexport async function getThreads(boardName, { archived, limit, offset, sort } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  let cursor = Thread.find({\n    boardName: boardName,\n    archived: !!archived\n  }, { _id: 0 });\n  if (sort) {\n    cursor = cursor.sort({\n      fixed: sort,\n      updatedAt: sort\n    });\n  }\n  if (offset) {\n    cursor = cursor.skip(offset);\n  }\n  if (limit) {\n    cursor = cursor.limit(limit);\n  }\n  let threads = await cursor.toArray();\n  return threads;\n}\n\nexport async function getThreadCount(boardName, { archived } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  return await Thread.count({\n    boardName: boardName,\n    archived: !!archived\n  });\n}\n\nexport async function getThreadLastPostNumber(boardName, threadNumber) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    boardName: boardName,\n    threadNumber: threadNumber\n  }, { number: 1 }).sort({ number: -1 }).limit(1).toArray();\n  return (posts.length > 0) ? posts[0].number : 0;\n}\n\nexport async function getThreadInfo(boardName, threadNumber, { lastPostNumber }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    return thread;\n  }\n  let postCount = await getThreadPostCount(boardName, threadNumber);\n  let newPostCount = await getThreadPostCount(boardName, threadNumber, { lastPostNumber: lastPostNumber });\n  lastPostNumber = await getThreadLastPostNumber(boardName, threadNumber);\n  return {\n    number: thread.number,\n    bumpLimit: board.bumpLimit,\n    postLimit: board.postLimit,\n    bumpLimitReached: (postCount >= board.bumpLimit),\n    postLimitReached: (postCount >= board.postLimit),\n    closed: thread.closed,\n    fixed: thread.fixed,\n    unbumpable: thread.unbumpable,\n    postCount: postCount,\n    postingEnabled: (board.postingEnabled && !thread.closed),\n    lastPostNumber: lastPostNumber,\n    newPostCount: newPostCount\n  };\n}\n\nexport async function isThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.contains(`${boardName}:${threadNumber}`);\n}\n\nexport async function setThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.addOne(`${boardName}:${threadNumber}`);\n}\n\nexport async function clearDeletedThreads() {\n  return DeletedThreads.delete();\n}\n\nasync function pushOutOldThread(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threadCount = await getThreadCount(boardName);\n  if (threadCount < board.threadLimit) {\n    return;\n  }\n  let archivedThreadCount = await getThreadCount(boardName, { archived: true });\n  let removeLastArchivedThread = (board.archiveLimit > 0) && (archivedThreadCount >= board.archiveLimit);\n  let Thread = await client.collection('thread');\n  let [lastThread] = await getThreads(boardName, {\n    sort: 1,\n    limit: 1\n  });\n  if (removeLastArchivedThread) {\n    let [lastArchivedThread] = await getThreads(boardName, {\n      archived: true,\n      sort: 1,\n      limit: 1\n    });\n    if (lastArchivedThread) {\n      await deleteThread(boardName, lastArchivedThread.number);\n      await IPC.renderArchive(boardName);\n    }\n  }\n  if (board.archiveLimit <= 0) {\n    await deleteThread(boardName, lastThread.number);\n    return;\n  }\n  await Thread.updateOne({\n    boardName: boardName,\n    number: lastThread.number\n  }, {\n    $set: { archived: true }\n  });\n  let Post = await client.collection('post');\n  await Post.updateMany({\n    boardName: boardName,\n    threadNumber: lastThread.number\n  }, {\n    $set: { archived: true }\n  });\n  await IPC.render(boardName, lastThread.number, lastThread.number, 'edit');\n  await IPC.renderArchive(boardName);\n}\n\nexport async function createThread(req, fields, transaction) {\n  let { boardName, password } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!board.postingEnabled) {\n    throw new Error(Tools.translate('Posting is disabled at this board'));\n  }\n  try {\n    await pushOutOldThread(boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  let date = Tools.now();\n  let threadNumber = await BoardsModel.nextPostNumber(boardName);\n  let thread = {\n    boardName: boardName,\n    number: threadNumber,\n    archived: false,\n    fixed: false,\n    closed: false,\n    unbumpable: false,\n    user: PostsModel.createPostUser(req, req.level(boardName), password),\n    createdAt: date.toISOString(),\n    updatedAt: date.toISOString()\n  };\n  transaction.setThreadNumber(threadNumber);\n  let Thread = await client.collection('thread');\n  await Thread.insertOne(thread);\n  return thread;\n}\n\nasync function setThreadFlag(boardName, threadNumber, flagName, flagValue) {\n  let Thread = await client.collection('thread');\n  let { matchedCount, modifiedCount } = await Thread.updateOne({\n    boardName: boardName,\n    number: threadNumber\n  }, {\n    $set: { [flagName]: !!flagValue }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  if (modifiedCount > 0) {\n    await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n  }\n}\n\nexport async function setThreadFixed(boardName, threadNumber, fixed) {\n  return await setThreadFlag(boardName, threadNumber, 'fixed', fixed);\n}\n\nexport async function setThreadClosed(boardName, threadNumber, closed) {\n  return await setThreadFlag(boardName, threadNumber, 'closed', closed);\n}\n\nexport async function setThreadUnbumpable(boardName, threadNumber, unbumpable) {\n  return await setThreadFlag(boardName, threadNumber, 'unbumpable', unbumpable);\n}\n\nexport async function moveThread(sourceBoardName, threadNumber, targetBoardName, transaction) {\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard || !Board.board(sourceBoardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let thread = await getThread(sourceBoardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  thread.originalBoardName = thread.boardName;\n  thread.originalNumber = thread.number;\n  thread.boardName = targetBoardName;\n  let postCount = await getThreadPostCount(sourceBoardName, threadNumber);\n  let lastPostNumber = await BoardsModel.nextPostNumber(targetBoardName, postCount);\n  let initialPostNumber = lastPostNumber - postCount + 1;\n  thread.number = initialPostNumber;\n  await PostsModel.copyPosts({\n    sourceBoardName: sourceBoardName,\n    sourceThreadNumber: threadNumber,\n    targetBoardName: targetBoardName,\n    initialPostNumber: initialPostNumber,\n    transaction: transaction\n  });\n  let Thread = await client.collection('thread');\n  transaction.setThreadNumber(thread.number);\n  await Thread.insertOne(thread);\n  await IPC.render(targetBoardName, thread.number, thread.number, 'create');\n  transaction.commit();\n  await deleteThread(sourceBoardName, threadNumber);\n  return {\n    boardName: targetBoardName,\n    threadNumber: thread.number\n  };\n}\n\nexport async function deleteThread(boardName, threadNumber) {\n  let Thread = await client.collection('thread');\n  let result = await Thread.findOneAndDelete({\n    boardName: boardName,\n    number: threadNumber,\n  }, {\n    projection: { archived: 1 }\n  });\n  let thread = result.value;\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  let posts = await Post.find(query, {\n    number: 1,\n    referencedPosts: 1,\n    referringPosts: 1,\n    fileInfos: 1\n  }).toArray();\n  await Post.deleteMany(query);\n  await Tools.series(posts, async function(post) {\n    await PostReferencesModel.removeReferringPosts(boardName, post.number);\n  }, true);\n  let refs = await Tools.series(posts, (post) => {\n    return PostReferencesModel.updateReferringPosts(post.referringPosts, boardName, undefined, threadNumber);\n  }, true);\n  refs = _.extend(...refs);\n  let referencedPosts = _(posts.map(({ referencedPosts }) => referencedPosts)).flatten();\n  await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, refs, referencedPosts);\n  let fileInfos = posts.map(({ fileInfos }) => fileInfos);\n  await FilesModel.removeFiles(_(fileInfos).flatten());\n  await IPC.render(boardName, threadNumber, threadNumber, 'delete');\n  if (thread.archived) {\n    await IPC.renderArchive(boardName);\n  }\n}\n\nexport async function getThreadRedirect(boardName, threadNumber) {\n  let Thread = await client.collection('thread');\n  let thread = await Thread.findOne({\n    originalBoardName: boardName,\n    originalNumber: threadNumber\n  }, {\n    _id: 0,\n    boardName: 1,\n    number: 1\n  });\n  if (!thread) {\n    return null;\n  }\n  return {\n    boardName: thread.boardName,\n    threadNumber: thread.number\n  }\n}\n"]}