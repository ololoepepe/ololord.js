{"version":3,"sources":["models/threads.js"],"names":[],"mappings":"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","file":"models/threads.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as PostReferencesModel from './post-references';\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport BoardController from '../controllers/board';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport redisClient from '../storage/redis-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\n\nconst mkpath = promisify('mkpath');\n\nlet client = mongodbClient();\nlet DeletedThreads = new UnorderedSet(redisClient(), 'deletedThreads', {\n  parse: false,\n  stringify: false\n});\n\nexport function sortThreadsByDate(t1, t2) {\n  if (!!t1.fixed === !!t2.fixed) {\n    return t2.updatedAt.localeCompare(t1.updatedAt);\n  } else {\n    return t1.fixed ? -1 : 1;\n  }\n}\n\nexport function sortThreadsByCreationDate(t1, t2) {\n  return t2.createdAt.localeCompare(t1.createdAt);\n}\n\nexport function sortThreadsByPostCount(t1, t2) {\n  return t2.postCount - t1.postCount;\n}\n\nexport async function getThreadPostCount(boardName, threadNumber, { lastPostNumber } = {}) {\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  lastPostNumber = Tools.option(lastPostNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (lastPostNumber) {\n    query.number = { $gt: lastPostNumber };\n  }\n  return await Post.count(query);\n}\n\nexport async function getThreadNumbers(boardName, { archived } = {}) {\n  let Thread = await client.collection('thread');\n  let threads = await Thread.find({\n    boardName: boardName,\n    archived: !!archived\n  }, { number: 1 }).sort({ number: -1 }).toArray();\n  return threads.map(({ number }) => number);\n}\n\nexport async function getThread(boardName, threadNumber, projection) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  if (typeof projection !== 'object') {\n    projection = { _id: 0 };\n  }\n  let thread = await Thread.findOne({\n    boardName: boardName,\n    number: threadNumber\n  }, projection);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  return thread;\n}\n\nexport async function threadExists(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  let count = await Thread.count({\n    boardName: boardName,\n    number: threadNumber\n  });\n  return (count > 0);\n}\n\nexport async function getThreads(boardName, { archived, limit, offset, sort } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  let cursor = Thread.find({\n    boardName: boardName,\n    archived: !!archived\n  }, { _id: 0 });\n  if (sort) {\n    cursor = cursor.sort({\n      fixed: sort,\n      updatedAt: sort\n    });\n  }\n  if (offset) {\n    cursor = cursor.skip(offset);\n  }\n  if (limit) {\n    cursor = cursor.limit(limit);\n  }\n  let threads = await cursor.toArray();\n  return threads;\n}\n\nexport async function getThreadCount(boardName, { archived } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  return await Thread.count({\n    boardName: boardName,\n    archived: !!archived\n  });\n}\n\nexport async function getThreadLastPostNumber(boardName, threadNumber) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    boardName: boardName,\n    threadNumber: threadNumber\n  }, { number: 1 }).sort({ number: -1 }).limit(1).toArray();\n  return (posts.length > 0) ? posts[0].number : 0;\n}\n\nexport async function getThreadInfo(boardName, threadNumber, { lastPostNumber }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Thread = await client.collection('thread');\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    return thread;\n  }\n  let postCount = await getThreadPostCount(boardName, threadNumber);\n  let newPostCount = await getThreadPostCount(boardName, threadNumber, { lastPostNumber: lastPostNumber });\n  lastPostNumber = await getThreadLastPostNumber(boardName, threadNumber);\n  return {\n    number: thread.number,\n    bumpLimit: board.bumpLimit,\n    postLimit: board.postLimit,\n    bumpLimitReached: (postCount >= board.bumpLimit),\n    postLimitReached: (postCount >= board.postLimit),\n    closed: thread.closed,\n    fixed: thread.fixed,\n    unbumpable: thread.unbumpable,\n    postCount: postCount,\n    postingEnabled: (board.postingEnabled && !thread.closed),\n    lastPostNumber: lastPostNumber,\n    newPostCount: newPostCount\n  };\n}\n\nexport async function isThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.contains(`${boardName}:${threadNumber}`);\n}\n\nexport async function setThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.addOne(`${boardName}:${threadNumber}`);\n}\n\nexport async function clearDeletedThreads() {\n  return DeletedThreads.delete();\n}\n\nasync function pushOutOldThread(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threadCount = await getThreadCount(boardName);\n  if (threadCount < board.threadLimit) {\n    return;\n  }\n  let archivedThreadCount = await getThreadCount(boardName, { archived: true });\n  let removeLastArchivedThread = (board.archiveLimit > 0) && (archivedThreadCount >= board.archiveLimit);\n  let Thread = await client.collection('thread');\n  let [lastThread] = await getThreads(boardName, {\n    sort: 1,\n    limit: 1\n  });\n  if (removeLastArchivedThread) {\n    let [lastArchivedThread] = await getThreads(boardName, {\n      archived: true,\n      sort: 1,\n      limit: 1\n    });\n    if (lastArchivedThread) {\n      await deleteThread(boardName, lastArchivedThread.number);\n      await IPC.renderArchive(boardName);\n    }\n  }\n  if (board.archiveLimit <= 0) {\n    await deleteThread(boardName, lastThread.number);\n    return;\n  }\n  await Thread.updateOne({\n    boardName: boardName,\n    number: lastThread.number\n  }, {\n    $set: { archived: true }\n  });\n  let Post = await client.collection('post');\n  await Post.updateMany({\n    boardName: boardName,\n    threadNumber: lastThread.number\n  }, {\n    $set: { archived: true }\n  });\n  await IPC.render(boardName, lastThread.number, lastThread.number, 'edit');\n  await IPC.renderArchive(boardName);\n}\n\nexport async function createThread(req, fields, transaction) {\n  let { boardName, password } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!board.postingEnabled) {\n    throw new Error(Tools.translate('Posting is disabled at this board'));\n  }\n  try {\n    await pushOutOldThread(boardName);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  let date = Tools.now();\n  let threadNumber = await BoardsModel.nextPostNumber(boardName);\n  let thread = {\n    boardName: boardName,\n    number: threadNumber,\n    archived: false,\n    fixed: false,\n    closed: false,\n    unbumpable: false,\n    user: PostsModel.createPostUser(req, req.level(boardName), password),\n    createdAt: date.toISOString(),\n    updatedAt: date.toISOString()\n  };\n  transaction.setThreadNumber(threadNumber);\n  let Thread = await client.collection('thread');\n  await Thread.insertOne(thread);\n  return thread;\n}\n\nasync function setThreadFlag(boardName, threadNumber, flagName, flagValue) {\n  let Thread = await client.collection('thread');\n  let { matchedCount, modifiedCount } = await Thread.updateOne({\n    boardName: boardName,\n    number: threadNumber\n  }, {\n    $set: { [flagName]: !!flagValue }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  if (modifiedCount > 0) {\n    await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n  }\n}\n\nexport async function setThreadFixed(boardName, threadNumber, fixed) {\n  return await setThreadFlag(boardName, threadNumber, 'fixed', fixed);\n}\n\nexport async function setThreadClosed(boardName, threadNumber, closed) {\n  return await setThreadFlag(boardName, threadNumber, 'closed', closed);\n}\n\nexport async function setThreadUnbumpable(boardName, threadNumber, unbumpable) {\n  return await setThreadFlag(boardName, threadNumber, 'unbumpable', unbumpable);\n}\n\nexport async function moveThread(sourceBoardName, threadNumber, targetBoardName, transaction) {\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard || !Board.board(sourceBoardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let thread = await getThread(sourceBoardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  thread.originalBoardName = thread.boardName;\n  thread.boardName = targetBoardName;\n  let postCount = await getThreadPostCount(sourceBoardName, threadNumber);\n  let lastPostNumber = await BoardsModel.nextPostNumber(targetBoardName, postCount);\n  let initialPostNumber = lastPostNumber - postCount + 1;\n  thread.number = initialPostNumber;\n  await PostsModel.copyPosts({\n    sourceBoardName: sourceBoardName,\n    sourceThreadNumber: threadNumber,\n    targetBoardName: targetBoardName,\n    initialPostNumber: initialPostNumber,\n    transaction: transaction\n  });\n  let Thread = await client.collection('thread');\n  transaction.setThreadNumber(thread.number);\n  await Thread.insertOne(thread);\n  await IPC.render(targetBoardName, thread.number, thread.number, 'create');\n  transaction.commit();\n  await deleteThread(sourceBoardName, threadNumber);\n  return {\n    boardName: targetBoardName,\n    threadNumber: thread.number\n  };\n}\n\nexport async function deleteThread(boardName, threadNumber) {\n  let Thread = await client.collection('thread');\n  let result = await Thread.findOneAndDelete({\n    boardName: boardName,\n    number: threadNumber,\n  }, {\n    projection: { archived: 1 }\n  });\n  let thread = result.value;\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  let posts = await Post.find(query, {\n    number: 1,\n    referencedPosts: 1,\n    referringPosts: 1,\n    fileInfos: 1\n  }).toArray();\n  await Post.deleteMany(query);\n  await Tools.series(posts, async function(post) {\n    await PostReferencesModel.removeReferringPosts(boardName, post.number);\n  }, true);\n  let refs = await Tools.series(posts, (post) => {\n    return PostReferencesModel.updateReferringPosts(post.referringPosts, boardName, undefined, threadNumber);\n  }, true);\n  refs = _.extend(...refs);\n  let referencedPosts = _(posts.map(({ referencedPosts }) => referencedPosts)).flatten();\n  await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, refs, referencedPosts);\n  let fileInfos = posts.map(({ fileInfos }) => fileInfos);\n  await FilesModel.removeFiles(_(fileInfos).flatten());\n  await IPC.render(boardName, threadNumber, threadNumber, 'delete');\n  if (thread.archived) {\n    await IPC.renderArchive(boardName);\n  }\n}\n\nexport async function getThreadRedirect(boardName, threadNumber) {\n  let Thread = await client.collection('thread');\n  let thread = await Thread.findOne({\n    originalBoardName: boardName,\n    originalNumber: threadNumber\n  }, {\n    _id: 0,\n    boardName: 1,\n    number: 1\n  });\n  if (!thread) {\n    return null;\n  }\n  return {\n    boardName: thread.boardName,\n    threadNumber: thread.number\n  }\n}\n"],"sourceRoot":"/source/"}