{"version":3,"sources":["models/threads.js"],"names":[],"mappings":"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","file":"models/threads.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport BoardController from '../controllers/board';\nimport * as Search from '../core/search';\nimport * as Cache from '../helpers/cache';\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\nimport Hash from '../storage/hash';\nimport UnorderedSet from '../storage/unordered-set';\n\nconst mkpath = promisify('mkpath');\n\nlet ArchivedThreadPostNumbers = new UnorderedSet(sqlClient(), 'archivedThreadPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet ArchivedThreads = new Hash(sqlClient(), 'archivedThreads');\nlet ArchivedThreadUpdateTimes = new Hash(sqlClient(), 'archivedThreadUpdateTimes', {\n  parse: false,\n  stringify: false\n});\nlet DeletedThreads = new UnorderedSet(redisClient(), 'deletedThreads', {\n  parse: false,\n  stringify: false\n});\nlet ThreadPostNumbers = new UnorderedSet(redisClient(), 'threadPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet Threads = new Hash(redisClient(), 'threads');\nlet ThreadsPlannedForDeletion = new UnorderedSet(redisClient(), 'threadsPlannedForDeletion', {\n  parse: false,\n  stringify: false\n});\nlet ThreadUpdateTimes = new Hash(redisClient(), 'threadUpdateTimes', {\n  parse: false,\n  stringify: false\n});\n\nexport function sortThreadsByDate(t1, t2) {\n  if (!!t1.fixed === !!t2.fixed) {\n    return t2.updatedAt.localeCompare(t1.updatedAt);\n  } else {\n    return t1.fixed ? -1 : 1;\n  }\n}\n\nexport function sortThreadsByCreationDate(t1, t2) {\n  return t2.createdAt.localeCompare(t1.createdAt);\n}\n\nexport function sortThreadsByPostCount(t1, t2) {\n  return t2.postCount - t1.postCount;\n}\n\nexport async function getThreadPostCount(boardName, threadNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  return await source.count(`${boardName}:${threadNumber}`);\n}\n\nexport async function getThreadPostNumbers(boardName, threadNumber) {\n  let postNumbers = await ThreadPostNumbers.getAll(`${boardName}:${threadNumber}`);\n  if (!postNumbers || postNumbers.length <= 0) {\n    postNumbers = await ArchivedThreadPostNumbers.getAll(`${boardName}:${threadNumber}`);\n  }\n  return postNumbers.sort((a, b) => { return a - b; });\n}\n\nexport async function addThreadPostNumber(boardName, threadNumber, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  await source.addOne(postNumber, `${boardName}:${threadNumber}`);\n}\n\nexport async function removeThreadPostNumber(boardName, threadNumber, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  await source.deleteOne(postNumber, `${boardName}:${threadNumber}`);\n}\n\nasync function addDataToThread(thread, { withPostNumbers } = {}) {\n  let source = thread.archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  thread.updatedAt = await source.getOne(thread.number, thread.boardName);\n  if (withPostNumbers) {\n    thread.postNumbers = await getThreadPostNumbers(thread.boardName, thread.number);\n  }\n}\n\nexport async function getThreadPosts(boardName, threadNumber,\n  { reverse, limit, notOP, withExtraData, withFileInfos, withReferences } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threadPostNumbers = await getThreadPostNumbers(boardName, threadNumber);\n  let postNumbers = Tools.cloned(threadPostNumbers);\n  if (notOP) {\n    postNumbers.splice(0, 1);\n  }\n  if (reverse) {\n    postNumbers.reverse();\n  }\n  limit = Tools.option(limit, 'number', 0, { test: (l) => { return l > 0; } });\n  if (limit) {\n    postNumbers.splice(limit);\n  }\n  return await PostsModel.getPosts(boardName, postNumbers, { withExtraData, withFileInfos, withReferences });\n}\n\nexport async function getThreadNumbers(boardName, { archived } = {}) {\n  let source = archived ? ArchivedThreads : Threads;\n  return await source.keys(boardName);\n}\n\nexport async function getThread(boardName, threadNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let thread = await Threads.getOne(threadNumber, boardName);\n  if (!thread) {\n    thread = await ArchivedThreads.getOne(threadNumber, boardName);\n  }\n  if (!thread) {\n    return Promise.reject(new Error(Tools.translate('No such thread')));\n  }\n  await addDataToThread(thread, options);\n  return thread;\n}\n\nexport async function getThreads(boardName, threadNumbers, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!_(threadNumbers).isArray()) {\n    threadNumbers = [threadNumbers];\n  }\n  threadNumbers = threadNumbers.map((threadNumber) => {\n    return Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  });\n  if (threadNumbers.some(threadNumber => !threadNumber)) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threads = await Threads.getSome(threadNumbers, boardName);\n  threads = _(threads).toArray();\n  let mayBeArchivedThreadNumbers = threads.map((thread, index) => {\n    return {\n      thread: thread,\n      index: index\n    };\n  }).filter((thread) => !thread.thread).map((thread) => {\n    return {\n      index: thread.index,\n      threadNumber: threadNumbers[thread.index]\n    };\n  });\n  if (mayBeArchivedThreadNumbers.length > 0) {\n    let numbers = mayBeArchivedThreadNumbers.map(thread => thread.threadNumber);\n    let archivedThreads = await ArchivedThreads.getSome(numbers, boardName);\n    archivedThreads.forEach((thread, index) => {\n      threads[mayBeArchivedThreadNumbers[index].index] = thread;\n    });\n  }\n  if (threads.length <= 0) {\n    return [];\n  }\n  await Tools.series(threads, async function(thread) {\n    await addDataToThread(thread, options);\n  });\n  return threads;\n}\n\nexport async function getThreadInfo(boardName, threadNumber, { lastPostNumber }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let thread = await getThread(boardName, threadNumber, { withPostNumbers: true });\n  if (!thread) {\n    return thread;\n  }\n  let postCount = thread.postNumbers.length;\n  lastPostNumber = Tools.option(lastPostNumber, 'number', 0, { test: Tools.testPostNumber });\n  let newPostCount = thread.postNumbers.filter((pn) => { return pn > lastPostNumber; }).length;\n  return {\n    number: thread.number,\n    bumpLimit: board.bumpLimit,\n    postLimit: board.postLimit,\n    bumpLimitReached: (postCount >= board.bumpLimit),\n    postLimitReached: (postCount >= board.postLimit),\n    closed: thread.closed,\n    fixed: thread.fixed,\n    unbumpable: thread.unbumpable,\n    postCount: postCount,\n    postingEnabled: (board.postingEnabled && !thread.closed),\n    lastPostNumber: thread.postNumbers.pop(),\n    newPostCount: newPostCount\n  };\n}\n\nexport async function getThreadLastPostNumber(boardName, threadNumber) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threadPostNumbers = await getThreadPostNumbers(boardName, threadNumber);\n  return (threadPostNumbers.length > 0) ? _(threadPostNumbers).last() : 0;\n}\n\nexport async function setThreadUpdateTime(boardName, threadNumber, dateTme, { archived } = {}) {\n  let source = archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  await source.setOne(threadNumber, dateTme, boardName);\n}\n\nexport async function isThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.contains(`${boardName}:${threadNumber}`);\n}\n\nexport async function setThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.addOne(`${boardName}:${threadNumber}`);\n}\n\nexport async function clearDeletedThreads() {\n  return DeletedThreads.delete();\n}\n\nasync function removeThread(boardName, threadNumber, { archived, leaveFileInfos, leaveReferences } = {}) {\n  let source = archived ? ArchivedThreads : Threads;\n  let key = `${boardName}:${threadNumber}`\n  await ThreadsPlannedForDeletion.addOne(key);\n  await source.deleteOne(threadNumber, boardName);\n  let updateTimeSource = archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  await updateTimeSource.deleteOne(threadNumber, boardName);\n  setTimeout(async function() {\n    try {\n      let postNumbers = await getThreadPostNumbers(boardName, threadNumber);\n      let postNumbersSource = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n      await postNumbersSource.delete(key);\n      await Tools.series(postNumbers, async function(postNumber) {\n        return await PostsModel.removePost(boardName, postNumber, {\n          leaveFileInfos: leaveFileInfos,\n          leaveReferences: leaveReferences,\n          removingThread: true\n        });\n      });\n      await ThreadsPlannedForDeletion.deleteOne(key);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }, 5000); //TODO: This is not OK\n}\n\nasync function pushOutOldThread(boardName) {\n  try {\n    let client = await sqlClient();\n    await client.transaction();\n    let threadNumbers = await getThreadNumbers(boardName);\n    let threads = await getThreads(boardName, threadNumbers);\n    threads.sort(sortThreadsByDate);\n    if (threads.length < board.threadLimit) {\n      return;\n    }\n    let archivedThreadNumbers = await getThreadNumbers(boardName, { archived: true });\n    let archivedThreads = await getThreads(boardName, archivedThreadNumbers);\n    archivedThreads.sort(sortThreadsByDate);\n    if (archivedThreads.length > 0 && archivedThreads.length >= board.archiveLimit) {\n      await removeThread(boardName, archivedThreads.pop().number, { archived: true });\n    }\n    let thread = threads.pop();\n    if (board.archiveLimit <= 0) {\n      await removeThread(boardName, thread.number);\n      return;\n    }\n    ArchivedThreadUpdateTimes.setOne(thread.number, thread.updatedAt, boardName);\n    ThreadUpdateTimes.deleteOne(thread.number, boardName);\n    thread.archived = true;\n    delete thread.updatedAt;\n    await ArchivedThreads.setOne(thread.number, thread, boardName);\n    await Threads.deleteOne(thread.number, boardName);\n    let key = `${boardName}:${thread.number}`;\n    let postNumbers = await getThreadPostNumbers(boardName, thread.number);\n    await ArchivedThreadPostNumbers.addSome(postNumber, key);\n    await ThreadPostNumbers.delete(key);\n    await Tools.series(postNumbers, async function(postNumber) {\n      await PostsModel.pushPostToArchive(boardName, postNumber);\n    });\n    client.commit();\n    let archivePath = `${__dirname}/../../public/${boardName}/arch`;\n    let oldThreadNumber = thread.number;\n    await mkpath(archivePath);\n    let sourceId = `${boardName}/res/${oldThreadNumber}.json`;\n    let data = await Cache.readFile(sourceId);\n    let model = JSON.parse(data);\n    model.thread.archived = true;\n    await FS.write(`${archivePath}/${oldThreadNumber}.json`, JSON.stringify(model));\n    await BoardController.renderThreadHTML(model.thread, {\n      targetPath: `${archivePath}/${oldThreadNumber}.html`,\n      archived: true\n    });\n    await Cache.removeFile(sourceId);\n    await Cache.removeFile(`${boardName}/res/${oldThreadNumber}.html`);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function createThread(req, fields, transaction) {\n  let { boardName, password } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!board.postingEnabled) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled at this board')));\n  }\n  pushOutOldThread(); //NOTE: No, \"await\" should not be here. Executing in parallel. This is for the sake of speed.\n  let date = Tools.now();\n  password = Tools.sha1(password);\n  let hashpass = (req.hashpass || null);\n  let threadNumber = await BoardsModel.nextPostNumber(boardName);\n  let thread = {\n    archived: false,\n    boardName: boardName,\n    closed: false,\n    createdAt: date.toISOString(),\n    fixed: false,\n    unbumpable: false,\n    number: threadNumber,\n    user: {\n      hashpass: hashpass,\n      ip: req.ip,\n      level: req.level(boardName),\n      password: password\n    }\n  };\n  transaction.setThreadNumber(threadNumber);\n  await Threads.setOne(threadNumber, thread, boardName);\n  return thread;\n}\n\nexport async function moveThread(sourceBoardName, threadNumber, targetBoardName) {\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard || !Board.board(sourceBoardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let thread = await getThread(sourceBoardName, threadNumber, { withPostNumbers: true });\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  let sourcePath = `${__dirname}/../../public/${sourceBoardName}/src`;\n  let sourceThumbPath = `${__dirname}/../../public/${sourceBoardName}/thumb`;\n  let targetPath = `${__dirname}/../../public/${targetBoardName}/src`;\n  let targetThumbPath = `${__dirname}/../../public/${targetBoardName}/thumb`;\n  await mkpath(targetPath);\n  await mkpath(targetThumbPath);\n  delete thread.updatedAt;\n  let posts = await PostsModel.getPosts(sourceBoardName, thread.postNumbers, {\n    withFileInfos: true,\n    withReferences: true,\n    withExtraData: true\n  });\n  delete thread.postNumbers;\n  let lastPostNumber = await BoardsModel.nextPostNumber(targetBoardName, posts.length);\n  lastPostNumber = lastPostNumber - posts.length + 1;\n  thread.number = lastPostNumber;\n  let postNumberMap = posts.reduce((acc, post) => {\n    acc.set(post.number, lastPostNumber++);\n    return acc;\n  }, new Map());\n  let { toRerender, toUpdate } = await PostsModel.processMovedThreadPosts({\n    posts: posts,\n    postNumberMap: postNumberMap,\n    threadNumber: thread.number,\n    targetBoard: targetBoard,\n    sourceBoardName: sourceBoardName,\n    sourcePath: sourcePath,\n    sourceThumbPath: sourceThumbPath,\n    targetPath: targetPath,\n    targetThumbPath: targetThumbPath\n  });\n  thread.boardName = targetBoardName;\n  await Threads.setOne(thead.number, thread, targetBoardName);\n  await ThreadUpdateTimes.setOne(thread.number, Tools.now().toISOString(), targetBoardName);\n  await ThreadPostNumbers.addSome(_(postNumberMap).toArray(), `${targetBoardName}:${thread.number}`);\n  await PostsModel.processMovedThreadRelatedPosts({\n    posts: toRerender,\n    sourceBoardName: sourceBoardName,\n    postNumberMap: postNumberMap\n  });\n  await Tools.series(toUpdate, async function(o) {\n    return await IPC.render(o.boardName, o.threadNumber, o.threadNumber, 'create');\n  });\n  await removeThread(sourceBoardName, threadNumber, {\n    leaveFileInfos: true,\n    leaveReferences: true\n  });\n  IPC.render(sourceBoardName, threadNumber, threadNumber, 'delete');\n  await IPC.render(targetBoardName, thread.number, thread.number, 'create');\n  return {\n    boardName: targetBoardName,\n    threadNumber: thread.number\n  };\n}\n\nexport async function setThreadFixed(boardName, threadNumber, fixed) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  fixed = !!fixed;\n  if (fixed === !!thread.fixed) {\n    return;\n  }\n  thread.fixed = fixed;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n\nexport async function setThreadClosed(boardName, threadNumber, closed) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  closed = !!closed;\n  if (closed === !!thread.closed) {\n    return;\n  }\n  thread.closed = closed;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n\nexport async function setThreadUnbumpable(boardName, threadNumber, unbumpable) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  unbumpable = !!unbumpable;\n  if (unbumpable === !!thread.unbumpable) {\n    return;\n  }\n  thread.unbumpable = unbumpable;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n"],"sourceRoot":"/source/"}