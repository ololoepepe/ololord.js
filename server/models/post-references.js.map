{"version":3,"sources":["models/post-references.js"],"names":["boardName","postNumber","client","collection","Post","updateMany","referringPosts","$elemMatch","$pull","removeReferringPosts","referencedPosts","threadNumber","Tools","series","ref","updateOne","number","$push","createdAt","addReferringPosts","console","log","translate","query","findOne","rawText","markup","post","Error","oldReferencedPosts","markupModes","accessLevel","user","level","text","$set","toArray","matchedCount","newReferencedPosts","updatePostMarkup","pickNumber","pickFunction","pickPostsToRerender","pickThreadsToRerender","refs","extend","error","stack","reduce","acc","updateReferringPosts","newRefs","oldRefs","IPC","render","rerenderReferencedPosts","replacePostLinks","replacePostReferences","filter","sourceBoardName","postNumberMap","forEach","newPostNumber","replacement","replace","RegExp","references","source","target","sourceThreadNumber","targetBoardName","targetThreadNumber","map"],"mappings":"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","file":"post-references.js","sourcesContent":["import _ from 'underscore';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nexport async function removeReferringPosts(boardName, postNumber) {\n  let Post = await client.collection('post');\n  return await Post.updateMany({\n    referringPosts: {\n      $elemMatch: {\n        boardName: boardName,\n        postNumber: postNumber\n      }\n    }\n  }, {\n    $pull: {\n      referringPosts: {\n        boardName: boardName,\n        postNumber: postNumber\n      }\n    }\n  });\n}\n\nexport async function addReferringPosts(referencedPosts, boardName, postNumber, threadNumber) {\n  let Post = await client.collection('post');\n  await Tools.series(referencedPosts, (ref) => {\n    return Post.updateOne({\n      boardName: ref.boardName,\n      number: ref.postNumber\n    }, {\n      $push: {\n        referringPosts: {\n          boardName: boardName,\n          postNumber: postNumber,\n          threadNumber: threadNumber,\n          createdAt: ref.createdAt\n        }\n      }\n    });\n  });\n}\n\nfunction pickPostsToRerender(referencedPosts, boardName, postNumber) {\n  return _(referencedPosts).filter((ref) => {\n    return (boardName !== ref.boardName) || (postNumber !== ref.postNumber);\n  }).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nfunction pickThreadsToRerender(referencedPosts, boardName, threadNumber) {\n  return _(referencedPosts).filter((ref) => {\n    return (boardName !== ref.boardName) || (threadNumber !== ref.threadNumber);\n  }).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nasync function updatePostMarkup(boardName, postNumber) {\n  console.log(Tools.translate('Rendering post text: >>/$[1]/$[2]', '', boardName, postNumber));\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    number: postNumber\n  };\n  let post = await Post.findOne(query, {\n    threadNumber: 1,\n    rawText: 1,\n    markup: 1,\n    'user.level': 1,\n    referencedPosts: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let oldReferencedPosts = post.referencedPosts;\n  let referencedPosts = {};\n  let text = await markup(boardName, post.rawText, {\n    markupModes: post.markup,\n    referencedPosts: referencedPosts,\n    accessLevel: post.user.level\n  });\n  let { matchedCount } = await Post.updateOne(query, {\n    $set: {\n      text: text,\n      referencedPosts: _(referencedPosts).toArray()\n    }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return {\n    oldReferencedPosts: oldReferencedPosts,\n    newReferencedPosts: referencedPosts\n  };\n}\n\nexport async function updateReferringPosts(referringPosts, boardName, postNumber, threadNumber) {\n  let pickNumber = postNumber || threadNumber;\n  let pickFunction = postNumber ? pickPostsToRerender : pickThreadsToRerender;\n  let refs = pickFunction(referringPosts, boardName, pickNumber);\n  refs = await Tools.series(refs, async function(ref) {\n    try {\n      let { oldReferencedPosts, newReferencedPosts } = await updatePostMarkup(ref.boardName, ref.postNumber);\n      oldReferencedPosts = pickFunction(oldReferencedPosts, boardName, pickNumber);\n      await removeReferringPosts(ref.boardName, ref.postNumber);\n      newReferencedPosts = pickFunction(newReferencedPosts, boardName, pickNumber);\n      await addReferringPosts(newReferencedPosts, ref.boardName, ref.postNumber, ref.threadNumber);\n      return _.extend(oldReferencedPosts, newReferencedPosts);\n    } catch (err) {\n      Logger.error(err.stack || err);\n      return {};\n    }\n  }, true);\n  return _(_.extend({}, ...refs)).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nexport async function rerenderReferencedPosts(boardName, threadNumber, newReferencedPosts, oldReferencedPosts) {\n  let newRefs = pickThreadsToRerender(newReferencedPosts, boardName, threadNumber);\n  let oldRefs = pickThreadsToRerender(oldReferencedPosts, boardName, threadNumber);\n  try {\n    await Tools.series(_.extend(newRefs, oldRefs), (ref) => {\n      return IPC.render(ref.boardName, ref.threadNumber, ref.threadNumber, 'edit');\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport function replacePostLinks(text, sourceBoardName, referencedPosts, postNumberMap) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter((ref) => { return ref.boardName === sourceBoardName; }).forEach((ref) => {\n    let newPostNumber = postNumberMap[ref.postNumber];\n    let replacement = newPostNumber ? `>>${newPostNumber}` : `>>/${sourceBoardName}/${ref.postNumber}`;\n    text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replacePostReferences(references, source, target, postNumberMap) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber],\n        createdAt: ref.createdAt\n      };\n    } else {\n      return ref;\n    }\n  });\n}\n"]}