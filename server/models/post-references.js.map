{"version":3,"sources":["models/post-references.js"],"names":[],"mappings":"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","file":"models/post-references.js","sourcesContent":["import _ from 'underscore';\n\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from './posts';\nimport Hash from '../storage/hash';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\n\nlet ArchivedReferringPosts = new Hash(sqlClient(), 'archivedReferringPosts');\nlet ArchivedReferencedPosts = new Hash(sqlClient(), 'archivedReferencedPosts');\nlet ReferringPosts = new Hash(redisClient(), 'referringPosts');\nlet ReferencedPosts = new Hash(redisClient(), 'referencedPosts');\n\nfunction sortedReferences(references) {\n  return _(references).toArray().sort((a, b) => {\n    return (a.createdAt && b.createdAt && a.createdAt.localeCompare(b.createdAt))\n      || a.boardName.localeCompare(b.boardName) || (a.postNumber - b.postNumber);\n  }).map((reference) => {\n    delete reference.createdAt;\n    return reference;\n  });\n}\n\nexport async function addReferencesToPost(post) {\n  let key = `${post.boardName}:${post.number}`;\n  let referringSource = post.archived ? ArchivedReferringPosts : ReferringPosts;\n  let referencedSource = post.archived ? ArchivedReferencedPosts : ReferencedPosts;\n  let referringPosts = await referringSource.getAll(key);\n  let referencedPosts = await referencedSource.getAll(key);\n  post.referringPosts = sortedReferences(referringPosts);\n  post.referencedPosts = sortedReferences(referencedPosts);\n}\n\nexport async function addReferencedPosts(post, referencedPosts, { nogenerate, archived } = {}) {\n  let key = `${post.boardName}:${post.number}`;\n  let referringSource = post.archived ? ArchivedReferringPosts : ReferringPosts;\n  let referencedSource = post.archived ? ArchivedReferencedPosts : ReferencedPosts;\n  //TODO: Optimise (hmset)\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    await referencedSource.setOne(refKey, ref, key);\n    await referringSource.setOne(key, {\n      boardName: post.boardName,\n      postNumber: post.number,\n      threadNumber: post.threadNumber,\n      createdAt: refKey.createdAt\n    }, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).each((ref, refKey) => {\n      if (ref.boardName !== post.boardName || ref.threadNumber !== post.threadNumber) {\n        IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n      }\n    });\n  }\n}\n\nexport async function removeReferencedPosts({ boardName, number, threadNumber, archived }, { nogenerate } = {}) {\n  let key = `${boardName}:${number}`;\n  let referencedSource = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  let referringSource = archived ? ArchivedReferringPosts : ReferringPosts;\n  let referencedPosts = await referencedSource.getAll(key);\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    return await referringSource.deleteOne(key, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).filter((ref) => {\n      return (ref.boardName !== boardName) || (ref.threadNumber !== threadNumber);\n    }).forEach((ref) => {\n      IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n    });\n  }\n  referencedSource.delete(key);\n}\n\nexport async function rerenderReferringPosts({ boardName, number, threadNumber, archived }, { removingThread } = {}) {\n  let referringSource = archived ? ArchivedReferringPosts : ReferringPosts;\n  let referringPosts = await referringSource.getAll(`${boardName}:${number}`);\n  referringPosts = _(referringPosts).filter((ref) => {\n    return !removingThread || ref.boardName !== boardName || ref.threadNumber !== threadNumber;\n  });\n  await Tools.series(referringPosts, async function(ref) {\n    return await PostsModel.rerenderPost(ref.boardName, ref.postNumber);\n  });\n}\n\nexport function replacePostLinks(text, sourceBoardName, referencedPosts, postNumberMap) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter((ref) => { return ref.boardName === sourceBoardName; }).forEach((ref) => {\n    let newPostNumber = postNumberMap[ref.postNumber];\n    let replacement = newPostNumber ? `>>${newPostNumber}` : `>>/${sourceBoardName}/${ref.postNumber}`;\n    text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replaceRelatedPostLinks({ text, sourceBoardName, targetBoardName, postBoardName, referencedPosts,\n  postNumberMap }) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter(ref => postNumberMap.hasOwnProperty(ref.postNumber)).forEach((ref) => {\n    let replacement = `>>/${targetBoardName}/${postNumberMap[ref.postNumber]}`;\n    if (postBoardName === sourceBoardName) {\n      text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n    }\n    text = text.replace(new RegExp(`>>/${sourceBoardName}/${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replacePostReferences(references, source, target, postNumberMap, related) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber]\n      };\n    } else {\n      related.push(ref);\n      return ref;\n    }\n  });\n}\n\nexport function replaceRelatedPostReferences(references, source, target, postNumberMap) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber]\n      };\n    } else {\n      return ref;\n    }\n  });\n}\n\nexport async function storeReferencedPosts(boardName, postNumber, referencedPosts, { archived } = {}) {\n  let source = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  await Tools.series(referencedPosts, async function(ref) {\n    await source.setOne(`${ref.boardName}:${ref.postNumber}`, ref, `${boardName}:${postNumber}`);\n  });\n}\n\nexport async function storeReferringPosts(boardName, postNumber, referringPosts, { archived } = {}) {\n  let source = archived ? ArchivedReferringPosts : ReferringPosts;\n  await Tools.series(referringPosts, async function(ref) {\n    source.setOne(`${ref.boardName}:${ref.postNumber}`, ref, `${boardName}:${postNumber}`);\n  });\n}\n\nexport async function removeReferencedPosts(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  source.delete(`${boardName}:${postNumber}`);\n}\n\nexport async function removeReferringPosts(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedReferringPosts : ReferringPosts;\n  source.delete(`${boardName}:${postNumber}`);\n}\n"],"sourceRoot":"/source/"}