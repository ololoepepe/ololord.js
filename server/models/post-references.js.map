{"version":3,"sources":["models/post-references.js"],"names":[],"mappings":"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","file":"models/post-references.js","sourcesContent":["import _ from 'underscore';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from './posts';\nimport markup from '../markup';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nexport async function removeReferringPosts(boardName, postNumber) {\n  let Post = await client.collection('post');\n  return await Post.updateMany({\n    referringPosts: {\n      $elemMatch: {\n        boardName: boardName,\n        postNumber: postNumber\n      }\n    }\n  }, {\n    $pull: {\n      referringPosts: {\n        boardName: boardName,\n        postNumber: postNumber\n      }\n    }\n  });\n}\n\nexport async function addReferringPosts(referencedPosts, boardName, postNumber, threadNumber) {\n  let Post = await client.collection('post');\n  await Tools.series(referencedPosts, (ref) => {\n    return Post.updateOne({\n      boardName: ref.boardName,\n      number: ref.postNumber\n    }, {\n      $push: {\n        referringPosts: {\n          boardName: boardName,\n          postNumber: postNumber,\n          threadNumber: threadNumber,\n          createdAt: ref.createdAt\n        }\n      }\n    });\n  });\n}\n\nfunction pickPostsToRerender(referencedPosts, boardName, postNumber) {\n  return _(referencedPosts).filter((ref) => {\n    return (boardName !== ref.boardName) || (postNumber !== ref.postNumber);\n  }).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.postNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nfunction pickThreadsToRerender(referencedPosts, boardName, threadNumber) {\n  return _(referencedPosts).filter((ref) => {\n    return (boardName !== ref.boardName) || (threadNumber !== ref.threadNumber);\n  }).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nasync function updatePostMarkup(boardName, postNumber) {\n  console.log(Tools.translate('Rendering post text: >>/$[1]/$[2]', '', boardName, postNumber));\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    number: postNumber\n  };\n  let post = await Post.findOne(query, {\n    threadNumber: 1,\n    rawText: 1,\n    markup: 1,\n    'user.level': 1,\n    referencedPosts: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let oldReferencedPosts = post.referencedPosts;\n  let referencedPosts = {};\n  let text = await markup(boardName, post.rawText, {\n    markupModes: post.markup,\n    referencedPosts: referencedPosts,\n    accessLevel: post.user.level\n  });\n  let { matchedCount } = await Post.updateOne(query, {\n    $set: {\n      text: text,\n      referencedPosts: _(referencedPosts).toArray()\n    }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return {\n    oldReferencedPosts: oldReferencedPosts,\n    newReferencedPosts: referencedPosts\n  };\n}\n\nexport async function updateReferringPosts(referringPosts, boardName, postNumber, threadNumber) {\n  let shouldAddReferringPosts = (boardName && postNumber && threadNumber);\n  let refs = await Tools.series(referringPosts, async function(ref) {\n    try {\n      let { oldReferencedPosts, newReferencedPosts } = await updatePostMarkup(ref.boardName, ref.postNumber);\n      oldReferencedPosts = pickPostsToRerender(oldReferencedPosts, boardName, postNumber);\n      await removeReferringPosts(ref.boardName, ref.postNumber);\n      newReferencedPosts = pickPostsToRerender(newReferencedPosts, boardName, postNumber);\n      await addReferringPosts(newReferencedPosts, ref.boardName, ref.postNumber, ref.threadNumber);\n      return _.extend(oldReferencedPosts, newReferencedPosts);\n    } catch (err) {\n      Logger.error(err.stack || err);\n      return {};\n    }\n  }, true);\n  return _(_.extend({}, ...refs)).reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n}\n\nexport async function rerenderReferencedPosts(boardName, threadNumber, newReferencedPosts, oldReferencedPosts) {\n  let newRefs = pickThreadsToRerender(newReferencedPosts, boardName, threadNumber);\n  let oldRefs = pickThreadsToRerender(oldReferencedPosts, boardName, threadNumber);\n  try {\n    await Tools.series(_.extend(newRefs, oldRefs), (ref) => {\n      return IPC.render(ref.boardName, ref.threadNumber, ref.threadNumber, 'edit');\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport function replacePostLinks(text, sourceBoardName, referencedPosts, postNumberMap) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter((ref) => { return ref.boardName === sourceBoardName; }).forEach((ref) => {\n    let newPostNumber = postNumberMap[ref.postNumber];\n    let replacement = newPostNumber ? `>>${newPostNumber}` : `>>/${sourceBoardName}/${ref.postNumber}`;\n    text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replaceRelatedPostLinks({ text, sourceBoardName, targetBoardName, postBoardName, referencedPosts,\n  postNumberMap }) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter(ref => postNumberMap.hasOwnProperty(ref.postNumber)).forEach((ref) => {\n    let replacement = `>>/${targetBoardName}/${postNumberMap[ref.postNumber]}`;\n    if (postBoardName === sourceBoardName) {\n      text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n    }\n    text = text.replace(new RegExp(`>>/${sourceBoardName}/${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replacePostReferences(references, source, target, postNumberMap, related) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber],\n        createdAt: ref.createdAt\n      };\n    } else {\n      related.push(ref);\n      return ref;\n    }\n  });\n}\n\nexport function replaceRelatedPostReferences(references, source, target, postNumberMap) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber],\n        createdAt: ref.createdAt\n      };\n    } else {\n      return ref;\n    }\n  });\n}\n"],"sourceRoot":"/source/"}