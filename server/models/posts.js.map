{"version":3,"sources":["models/posts.js"],"names":["boardName","postNumber","options","board","Error","Tools","translate","option","test","testPostNumber","client","collection","Post","findOne","number","createPostProjection","getPost","threadNumber","lastPostNumber","query","$lt","count","getPostCount","oldPostCount","newPostCount","updateOne","$inc","sequenceNumber","adjustPostSequenceNumber","dateTime","Thread","$set","updatedAt","toISOString","matchedCount","setThreadUpdateTime","req","fields","files","transaction","date","unbumpable","archived","text","markupMode","name","subject","sage","signAsOp","tripcode","password","now","getPostBoard","postCount","postLimit","rawText","markupModes","referencedPosts","accessLevel","level","getPostExtraData","extraData","BoardsModel","nextPostNumber","fileInfos","FilesModel","createFileInfos","ip","geolocationInfo","post","plainText","Renderer","brToNewline","markup","createPostOptions","user","createPostUser","geolocation","fileInfoCount","length","toArray","referringPosts","createdAt","addPostNumber","insertOne","postCountNew","bumpLimit","PostReferencesModel","addReferringPosts","IPC","render","rerenderReferencedPosts","createPost","oldReferencedPosts","editPostExtraData","findOneAndUpdate","projection","withFileInfos","withExtraData","withReferences","returnOriginal","result","value","removeReferringPosts","editPost","findOneAndDelete","$ne","updateMany","$gt","updateReferringPosts","refs","removeFiles","deletePost","targets","boardNames","isArray","reduce","acc","series","postNumbers","error","find","posts","map","filter","indexOf","flatten","undefined","markupPosts","sourceBoardName","sourceThreadNumber","targetBoardName","initialPostNumber","sourceBoard","targetBoard","_id","postNumberMap","index","replacePostLinks","transformPostExtraData","replacePostReferences","copyFiles","newFileInfos","copyPosts","limit","offset","sort","cursor","l","o","reverse","splice","getThreadPosts","page","q","$text","$search","score","$meta","skip","max","total","findPosts","postingEnabled","showTripcode","hashpass","bannedFor","sha1"],"mappings":"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","file":"posts.js","sourcesContent":["import _ from 'underscore';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as PostReferencesModel from './post-references';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nfunction createPostProjection({ withExtraData, withFileInfos, withReferences } = {}) {\n  let projection = { _id: 0 };\n  if (!withExtraData) {\n    projection.extraData = 0;\n  }\n  if (!withFileInfos) {\n    projection.fileInfos = 0;\n  }\n  if (!withReferences) {\n    projection.referencedPosts = 0;\n    projection.referringPosts = 0;\n  }\n  return projection;\n}\n\nexport async function getPost(boardName, postNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  return await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, createPostProjection(options));\n}\n\nfunction getPostBoard(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!board.postingEnabled) {\n    throw new Error(Tools.translate('Posting is disabled at this board'));\n  }\n  return board;\n}\n\nasync function getPostCount(boardName, threadNumber, lastPostNumber) {\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  if (lastPostNumber) {\n    query.number = { $lt: lastPostNumber };\n  }\n  return await Post.count(query);\n}\n\nfunction createPostOptions(req, sage, tripcode, signAsOp) {\n  return {\n    sage: sage,\n    showTripcode: !!req.hashpass && ('true' === tripcode),\n    signAsOp: ('true' === signAsOp),\n    bannedFor: false\n  };\n}\n\nexport function createPostUser(req, accessLevel, password) {\n  return {\n    hashpass: (req.hashpass || null),\n    ip: req.ip,\n    level: accessLevel,\n    password: Tools.sha1(password)\n  };\n}\n\nasync function adjustPostSequenceNumber(boardName, postNumber, oldPostCount, newPostCount) {\n  let Post = await client.collection('post');\n  await Post.updateOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $inc: { sequenceNumber: (newPostCount - oldPostCount) }\n  });\n}\n\nasync function setThreadUpdateTime(boardName, threadNumber, dateTime) {\n  let Thread = await client.collection('thread');\n  let { matchedCount } = await Thread.updateOne({\n    boardName: boardName,\n    number: threadNumber\n  }, {\n    $set: { updatedAt: dateTime.toISOString() }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n}\n\nexport async function createPost(req, fields, files, transaction, { postNumber, date, unbumpable, archived } = {}) {\n  let { boardName, threadNumber, text, markupMode, name, subject, sage, signAsOp, tripcode, password } = fields;\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  date = date || Tools.now();\n  unbumpable = !!unbumpable;\n  let board = getPostBoard(boardName);\n  if (postNumber) {\n    threadNumber = postNumber;\n  }\n  let Post = await client.collection('post');\n  let postCount = await getPostCount(boardName, threadNumber);\n  if (postCount >= board.postLimit) {\n    throw new Error(Tools.translate('Post limit reached'));\n  }\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  let accessLevel = (name? req.level(boardName): null) || null;\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    accessLevel: accessLevel,\n    referencedPosts: referencedPosts\n  });\n  let extraData = await board.getPostExtraData(req, fields, files);\n  if (!postNumber) {\n    postNumber = await BoardsModel.nextPostNumber(boardName);\n  }\n  let fileInfos = FilesModel.createFileInfos(files, boardName, postNumber);\n  const geolocationInfo = await geolocation(req.ip);\n  let post = {\n    boardName: boardName,\n    number: postNumber,\n    threadNumber: threadNumber,\n    sequenceNumber: postCount + 1,\n    archived: !!archived,\n    name: name || null,\n    subject: subject || null,\n    rawText: rawText,\n    text: text || null,\n    plainText: (text ? Renderer.plainText(text, { brToNewline: true }) : null),\n    markup: markupModes,\n    options: createPostOptions(req, sage, tripcode, signAsOp),\n    user: createPostUser(req, accessLevel, password),\n    geolocation: geolocationInfo,\n    fileInfos: fileInfos,\n    fileInfoCount: fileInfos.length,\n    extraData: extraData,\n    referencedPosts: _(referencedPosts).toArray(),\n    referringPosts: [],\n    createdAt: date.toISOString(),\n    updatedAt: null\n  };\n  transaction.addPostNumber(postNumber);\n  await Post.insertOne(post);\n  let postCountNew = await getPostCount(boardName, threadNumber, postNumber);\n  if (postCountNew !== postCount) {\n    await adjustPostSequenceNumber(boardName, postNumber, postCount, postCountNew);\n    //TODO: Get new sequenceNumber\n  }\n  if (!sage && (postCount < board.bumpLimit) && !unbumpable) {\n    await setThreadUpdateTime(boardName, threadNumber, date);\n  }\n  await PostReferencesModel.addReferringPosts(referencedPosts, boardName, postNumber, threadNumber);\n  await IPC.render(boardName, threadNumber, postNumber, 'create');\n  (async function() {\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, referencedPosts);\n  })();\n  return post;\n}\n\nexport async function editPost(req, fields) {\n  let { boardName, postNumber, text, name, subject, markupMode } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    number: postNumber\n  };\n  let post = await Post.findOne(query, {\n    threadNumber: 1,\n    referencedPosts: 1,\n    extraData: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let threadNumber = post.threadNumber;\n  let oldReferencedPosts = post.referencedPosts;\n  let date = Tools.now();\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    accessLevel: req.level(boardName),\n    referencedPosts: referencedPosts\n  });\n  let extraData = await board.editPostExtraData(req, fields, post.extraData);\n  let result = await Post.findOneAndUpdate(query, {\n    $set: {\n      markup: markupModes,\n      name: name || null,\n      rawText: rawText,\n      subject: subject || null,\n      text: text || null,\n      plainText: (text ? Renderer.plainText(text, { brToNewline: true }) : null),\n      referencedPosts: _(referencedPosts).toArray(),\n      updatedAt: date\n    }\n  }, {\n    projection: createPostProjection({\n      withFileInfos: true,\n      withExtraData: true,\n      withReferences: true\n    }),\n    returnOriginal: false\n  });\n  post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  await PostReferencesModel.removeReferringPosts(boardName, postNumber);\n  await PostReferencesModel.addReferringPosts(referencedPosts, boardName, postNumber, threadNumber);\n  (async function() {\n    await IPC.render(boardName, threadNumber, postNumber, 'edit');\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, referencedPosts, oldReferencedPosts);\n  })();\n  return post;\n}\n\nexport async function deletePost(boardName, postNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndDelete({\n    boardName: boardName,\n    threadNumber: { $ne: postNumber },\n    number: postNumber,\n    archived: false\n  }, {\n    projection: {\n      threadNumber: 1,\n      referencedPosts: 1,\n      referringPosts: 1,\n      fileInfos: 1\n    }\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let threadNumber = post.threadNumber;\n  let oldReferencedPosts = post.referencedPosts;\n  let referringPosts = post.referringPosts;\n  await Post.updateMany({\n    boardName: boardName,\n    threadNumber: threadNumber,\n    number: { $gt: postNumber }\n  }, {\n    $inc: { sequenceNumber: -1 }\n  });\n  await PostReferencesModel.removeReferringPosts(boardName, postNumber);\n  await IPC.render(boardName, threadNumber, postNumber, 'edit');\n  (async function() {\n    let refs = await PostReferencesModel.updateReferringPosts(referringPosts, boardName, postNumber, threadNumber);\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, refs, oldReferencedPosts);\n    await FilesModel.removeFiles(post.fileInfos);\n  })();\n}\n\nexport async function markupPosts(targets) {\n  if (typeof targets !== 'object') {\n    return;\n  }\n  if (_(targets).toArray().length <= 0) {\n    targets = Board.boardNames();\n  }\n  if (_(targets).isArray()) {\n    targets = targets.reduce((acc, boardName) => {\n      acc[boardName] = '*';\n      return acc;\n    }, {});\n  }\n  let Post = await client.collection('post');\n  let posts = await Tools.series(targets, async function(postNumbers, boardName) {\n    if (typeof postNumbers !== 'string' && !_(postNumbers).isArray()) {\n      return [];\n    }\n    if (!Board.board(boardName)) {\n      Logger.error(new Error(Tools.translate('Invalid board name: $[1]', '', boardName)));\n      return [];\n    }\n    let posts = await Post.find({ boardName: boardName }, {\n      number: 1,\n      threadNumber: 1\n    }).toArray();\n    posts = posts.map(({ number, threadNumber }) => {\n      return {\n        boardName: boardName,\n        postNumber: number,\n        threadNumber: threadNumber\n      };\n    });\n    if ('*' !== postNumbers) {\n      posts = posts.filter(({ postNumber }) => { return (postNumbers.indexOf(postNumber) >= 0); });\n    }\n    return posts;\n  }, true);\n  let refs = await PostReferencesModel.updateReferringPosts(_(posts).flatten());\n  await PostReferencesModel.rerenderReferencedPosts(undefined, undefined, refs);\n}\n\nexport async function copyPosts({ sourceBoardName, sourceThreadNumber, targetBoardName, initialPostNumber,\n  transaction }) {\n  let sourceBoard = Board.board(sourceBoardName);\n  if (!sourceBoard) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    boardName: sourceBoardName,\n    threadNumber: sourceThreadNumber\n  }, { _id: 0 }).toArray();\n  let postNumberMap = posts.reduce((acc, post, index) => {\n    acc[post.number] = initialPostNumber + index;\n    return acc;\n  }, {});\n  posts = await Tools.series(posts, async function(post) {\n    post.number = postNumberMap[post.number];\n    post.boardName = targetBoardName;\n    post.threadNumber = initialPostNumber;\n    if (post.rawText) {\n      let text = PostReferencesModel.replacePostLinks(post.rawText, sourceBoardName, post.referencedPosts,\n        postNumberMap);\n      if (text !== post.rawText) {\n        post.rawText = text;\n        post.text = await markup(targetBoardName, text, {\n          markupModes: post.markup,\n          accessLevel: post.user.level\n        });\n        post.plainText = Renderer.plainText(post.text, { brToNewline: true });\n      }\n    }\n    post.extraData = await targetBoard.transformPostExtraData(post.extraData, sourceBoard);\n    post.referencedPosts = PostReferencesModel.replacePostReferences(post.referencedPosts, {\n      boardName: sourceBoardName,\n      threadNumber: post.threadNumber\n    }, {\n      boardName: targetBoardName,\n      threadNumber: initialPostNumber\n    }, postNumberMap);\n    posts.referringPosts = [];\n    await PostReferencesModel.addReferringPosts(post.referencedPosts, targetBoardName, post.number, post.threadNumber);\n    let newFileInfos = await FilesModel.copyFiles(post.fileInfos, sourceBoardName, targetBoardName, transaction);\n    post.fileInfos = FilesModel.createFileInfos(newFileInfos, targetBoardName, post.number);\n    transaction.addPostNumber(post.number);\n    await Post.insertOne(post);\n    return post;\n  }, true);\n}\n\nexport async function getThreadPosts(boardName, threadNumber, { limit, offset, sort } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Post = await client.collection('post');\n  let cursor = Post.find({\n    boardName: boardName,\n    threadNumber: threadNumber\n  }, createPostProjection({\n    withExtraData: true,\n    withFileInfos: true,\n    withReferences: true\n  }));\n  if (sort) {\n    cursor = cursor.sort({ number: -1 });\n  }\n  limit = Tools.option(limit, 'number', 0, { test: (l) => { return l > 0; } });\n  offset = Tools.option(offset, 'number', 0, { test: (o) => { return o > 0; } });\n  if (limit || offset) {\n    cursor = cursor.limit(limit + offset);\n  }\n  let posts = await cursor.toArray();\n  if (sort) {\n    posts.reverse();\n  }\n  if (limit) {\n    if (posts.length > limit) {\n      posts.splice(0, posts.length - limit);\n    } else if (offset) {\n      posts.splice(0, offset);\n    }\n  }\n  return posts;\n}\n\nexport async function findPosts(query, boardName, page) {\n  let Post = await client.collection('post');\n  let q = {\n    $text: { $search: query }\n  };\n  if (boardName) {\n    q.boardName = boardName;\n  }\n  let limit = config('system.search.maxResultCount');\n  let score = { $meta: 'textScore' };\n  let posts = await Post.find(q, {\n    boardName: 1,\n    number: 1,\n    threadNumber: 1,\n    archived: 1,\n    subject: 1,\n    plainText: 1,\n    score: score\n  }).sort({\n    score: score,\n    boardName: 1,\n    number: 1\n  }).skip(page * limit).limit(limit).toArray();\n  let count = await Post.count(q);\n  return {\n    posts: posts,\n    max: limit,\n    total: count\n  };\n}\n"]}