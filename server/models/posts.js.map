{"version":3,"sources":["models/posts.js"],"names":[],"mappings":"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","file":"models/posts.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as PostReferencesModel from './post-references';\nimport * as ThreadsModel from './threads';\nimport * as UsersModel from './users';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as Search from '../core/search';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nfunction createPostProjection({ withExtraData, withFileInfos, withReferences } = {}) {\n  let projection = { _id: 0 };\n  if (!withExtraData) {\n    projection.extraData = 0;\n  }\n  if (!withFileInfos) {\n    projection.fileInfos = 0;\n  }\n  if (!withReferences) {\n    projection.referencedPosts = 0;\n    projection.referringPosts = 0;\n  }\n  return projection;\n}\n\nexport async function getPost(boardName, postNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  return await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, createPostProjection(options));\n}\n\nfunction getPostBoard(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!board.postingEnabled) {\n    throw new Error(Tools.translate('Posting is disabled at this board'));\n  }\n  return board;\n}\n\nasync function getPostCount(boardName, threadNumber, lastPostNumber) {\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    threadNumber: threadNumber\n  };\n  if (lastPostNumber) {\n    query.number = { $lt: lastPostNumber };\n  }\n  return await Post.count(query);\n}\n\nfunction createPostOptions(req, sage, tripcode, signAsOp) {\n  return {\n    sage: sage,\n    showTripcode: !!req.hashpass && ('true' === tripcode),\n    signAsOp: ('true' === signAsOp),\n    bannedFor: false\n  };\n}\n\nexport function createPostUser(req, accessLevel, password) {\n  return {\n    hashpass: (req.hashpass || null),\n    ip: req.ip,\n    level: accessLevel,\n    password: Tools.sha1(password)\n  };\n}\n\nasync function adjustPostSequenceNumber(boardName, postNumber, oldPostCount, newPostCount) {\n  let Post = await client.collection('post');\n  await Post.updateOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $inc: { sequenceNumber: (newPostCount - oldPostCount) }\n  });\n}\n\nasync function setThreadUpdateTime(boardName, threadNumber, dateTime) {\n  let Thread = await client.collection('thread');\n  let { matchedCount } = await Thread.updateOne({\n    boardName: boardName,\n    number: threadNumber\n  }, {\n    $set: { updatedAt: dateTime.toISOString() }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n}\n\nexport async function createPost(req, fields, files, transaction, { postNumber, date, unbumpable } = {}) {\n  let { boardName, threadNumber, text, markupMode, name, subject, sage, signAsOp, tripcode, password } = fields;\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  date = date || Tools.now();\n  unbumpable = !!unbumpable;\n  let board = getPostBoard(boardName);\n  if (postNumber) {\n    threadNumber = postNumber;\n  }\n  let Post = await client.collection('post');\n  let postCount = await getPostCount(boardName, threadNumber);\n  if (postCount >= board.postLimit) {\n    throw new Error(Tools.translate('Post limit reached'));\n  }\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  let accessLevel = req.level(boardName) || null;\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    accessLevel: accessLevel,\n    referencedPosts: referencedPosts\n  });\n  let extraData = await board.getPostExtraData(req, fields, files);\n  if (!postNumber) {\n    postNumber = await BoardsModel.nextPostNumber(boardName);\n  }\n  let fileInfos = FilesModel.createFileInfos(files, boardName, postNumber);\n  let post = {\n    boardName: boardName,\n    number: postNumber,\n    threadNumber: threadNumber,\n    sequenceNumber: postCount + 1,\n    archived: false,\n    name: name || null,\n    subject: subject || null,\n    rawText: rawText,\n    text: text || null,\n    markup: markupModes,\n    options: createPostOptions(req, sage, tripcode, signAsOp),\n    user: createPostUser(req, accessLevel, password),\n    geolocation: req.geolocationInfo,\n    fileInfos: fileInfos,\n    fileInfoCount: fileInfos.length,\n    extraData: extraData,\n    referencedPosts: _(referencedPosts).toArray(),\n    referringPosts: [],\n    createdAt: date.toISOString(),\n    updatedAt: null\n  };\n  transaction.addPostNumber(postNumber);\n  await Post.insertOne(post);\n  let postCountNew = await getPostCount(boardName, threadNumber, postNumber);\n  if (postCountNew !== postCount) {\n    await adjustPostSequenceNumber(boardName, postNumber, postCount, postCountNew);\n    //TODO: Get new sequenceNumber\n  }\n  if (!sage && (postCount < board.bumpLimit) && !unbumpable) {\n    await setThreadUpdateTime(boardName, threadNumber, date);\n  }\n  await PostReferencesModel.addReferringPosts(referencedPosts, boardName, postNumber, threadNumber);\n  await IPC.render(boardName, threadNumber, postNumber, 'create');\n  (async function() {\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, referencedPosts);\n  })();\n  return post;\n}\n\nexport async function editPost(req, fields) {\n  let { boardName, postNumber, text, name, subject, sage, markupMode } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  let query = {\n    boardName: boardName,\n    number: postNumber\n  };\n  let post = await Post.findOne(query, {\n    threadNumber: 1,\n    referencedPosts: 1,\n    extraData: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let threadNumber = post.threadNumber;\n  let oldReferencedPosts = post.referencedPosts;\n  let date = Tools.now();\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    accessLevel: req.level(boardName),\n    referencedPosts: referencedPosts\n  });\n  let extraData = await board.editPostExtraData(req, fields, post.extraData);\n  let result = await Post.findOneAndUpdate(query, {\n    $set: {\n      markup: markupModes,\n      name: name || null,\n      rawText: rawText,\n      subject: subject || null,\n      text: text || null,\n      referencedPosts: _(referencedPosts).toArray(),\n      updatedAt: date\n    }\n  }, {\n    projection: createPostProjection({\n      withFileInfos: true,\n      withExtraData: true,\n      withReferences: true\n    }),\n    returnOriginal: false\n  });\n  post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  await PostReferencesModel.removeReferringPosts(boardName, postNumber);\n  await PostReferencesModel.addReferringPosts(referencedPosts, boardName, postNumber, threadNumber);\n  (async function() {\n    await IPC.render(boardName, threadNumber, postNumber, 'edit');\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, referencedPosts, oldReferencedPosts);\n  })();\n  return post;\n}\n\nexport async function deletePost(boardName, postNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndDelete({\n    boardName: boardName,\n    threadNumber: { $ne: postNumber },\n    number: postNumber,\n    archived: false\n  }, {\n    projection: {\n      threadNumber: 1,\n      referencedPosts: 1,\n      referringPosts: 1,\n      fileInfos: 1\n    }\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let threadNumber = post.threadNumber;\n  let oldReferencedPosts = post.referencedPosts;\n  let referringPosts = post.referringPosts;\n  await Post.updateMany({\n    boardName: boardName,\n    threadNumber: threadNumber,\n    number: { $gt: postNumber }\n  }, {\n    $inc: { sequenceNumber: -1 }\n  });\n  await PostReferencesModel.removeReferringPosts(boardName, postNumber);\n  await IPC.render(boardName, threadNumber, postNumber, 'edit');\n  (async function() {\n    let refs = await PostReferencesModel.updateReferringPosts(referringPosts, boardName, postNumber, threadNumber);\n    await PostReferencesModel.rerenderReferencedPosts(boardName, threadNumber, refs, oldReferencedPosts);\n    await FilesModel.removeFiles(post.fileInfos);\n  })();\n}\n\nexport async function markupPosts(targets) {\n  if (typeof targets !== 'object') {\n    return;\n  }\n  if (_(targets).toArray().length <= 0) {\n    targets = Board.boardNames();\n  }\n  if (_(targets).isArray()) {\n    targets = targets.reduce((acc, boardName) => {\n      acc[boardName] = '*';\n      return acc;\n    }, {});\n  }\n  let Post = await client.collection('post');\n  let posts = await Tools.series(targets, async function(postNumbers, boardName) {\n    if (typeof postNumbers !== 'string' && !_(postNumbers).isArray()) {\n      return [];\n    }\n    if (!Board.board(boardName)) {\n      Logger.error(new Error(Tools.translate('Invalid board name: $[1]', '', boardName)));\n      return [];\n    }\n    let posts = await Post.find({ boardName: boardName }, {\n      number: 1,\n      threadNumber: 1\n    });\n    posts = posts.map(({ number, threadNumber }) => {\n      return {\n        boardName: boardName,\n        postNumber: postNumber,\n        threadNumber: threadNumber\n      };\n    });\n    if ('*' !== postNumbers) {\n      posts = posts.filter(({ postNumber }) => postNumber.hasOwnProperty(postNumber));\n    }\n    return posts;\n  }, true);\n  let refs = await PostReferencesModel.updateReferringPosts(posts);\n  await PostReferencesModel.rerenderReferencedPosts(undefined, undefined, refs);\n}\n\nexport async function copyPosts({ sourceBoardName, sourceThreadNumber, targetBoardName, initialPostNumber,\n  transaction }) {\n  let sourceBoard = Board.board(sourceBoardName);\n  if (!sourceBoard) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    boardName: sourceBoardName,\n    threadNumber: sourceThreadNumber\n  }, { _id: 0 }).toArray();\n  let postNumberMap = posts.reduce((acc, post, index) => {\n    acc[post.number] = initialPostNumber + index;\n    return acc;\n  }, {});\n  posts = await Tools.series(posts, async function(post) {\n    post.number = postNumberMap[post.number];\n    post.boardName = targetBoardName;\n    post.threadNumber = initialPostNumber;\n    if (post.rawText) {\n      let text = PostReferencesModel.replacePostLinks(post.rawText, sourceBoardName, post.referencedPosts,\n        postNumberMap);\n      if (text !== post.rawText) {\n        post.rawText = text;\n        post.text = await markup(targetBoardName, text, {\n          markupModes: post.markup,\n          accessLevel: post.user.level\n        });\n      }\n    }\n    post.extraData = await targetBoard.transformPostExtraData(post.extraData, sourceBoard);\n    post.referencedPosts = PostReferencesModel.replacePostReferences(post.referencedPosts, {\n      boardName: sourceBoardName,\n      threadNumber: post.threadNumber\n    }, {\n      boardName: targetBoardName,\n      threadNumber: initialPostNumber\n    }, postNumberMap);\n    posts.referringPosts = [];\n    await PostReferencesModel.addReferringPosts(post.referencedPosts, targetBoardName, post.number, post.threadNumber);\n    let newFileInfos = await FilesModel.copyFiles(post.fileInfos, sourceBoardName, targetBoardName, transaction);\n    post.fileInfos = FilesModel.createFileInfos(newFileInfos, targetBoardName, post.number);\n    transaction.addPostNumber(post.number);\n    await Post.insertOne(post);\n    return post;\n  }, true);\n}\n\nexport async function getThreadPosts(boardName, threadNumber, { limit, offset, sort } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let Post = await client.collection('post');\n  let cursor = Post.find({\n    boardName: boardName,\n    threadNumber: threadNumber\n  }, createPostProjection({\n    withExtraData: true,\n    withFileInfos: true,\n    withReferences: true\n  }));\n  if (sort) {\n    cursor = cursor.sort({ number: -1 });\n  }\n  limit = Tools.option(limit, 'number', 0, { test: (l) => { return l > 0; } });\n  offset = Tools.option(offset, 'number', 0, { test: (o) => { return o > 0; } });\n  if (limit || offset) {\n    cursor = cursor.limit(limit + offset);\n  }\n  let posts = await cursor.toArray();\n  if (sort) {\n    posts.reverse();\n  }\n  if (limit) {\n    if (posts.length > limit) {\n      posts.splice(0, posts.length - limit);\n    } else if (offset) {\n      posts.splice(0, offset);\n    }\n  }\n  return posts;\n}\n"],"sourceRoot":"/source/"}