{"version":3,"sources":["server-renderer.js"],"names":[],"mappings":"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","file":"server-renderer.js","sourcesContent":["\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport Cluster from 'cluster';\n\nimport Board from './boards/board';\nimport commands from './commands';\nimport BoardController from './controllers/board';\nimport * as Renderer from './core/renderer';\nimport * as RenderScheduler from './core/render-scheduler';\nimport config from './helpers/config';\nimport * as IPC from './helpers/ipc';\nimport Logger from './helpers/logger';\nimport Queue from './helpers/queue';\nimport * as Tools from './helpers/tools';\nimport * as BoardsModel from './models/boards';\n\nfunction onReady() {\n  try {\n    if (!onReady.ready) {\n      onReady.ready = 0;\n    }\n    ++onReady.ready;\n    if (config('system.rendererWorkerCount') === onReady.ready) {\n      commands(true, 'ololord.js-rend>');\n    }\n  } catch (err) {\n    console.error(err);\n    try {\n      Logger.error(err.stack || err);\n    } catch (err) {\n      console.error(err);\n    }\n    process.exit(1);\n  }\n}\n\nfunction initializeMaster() {\n  //NOTE: Overcoming Babel bug\n  (async function() {\n    try {\n      console.log(Tools.translate('Spawning renderer workers, please, wait…'));\n      Cluster.on('exit', (worker) => {\n        Logger.error(Tools.translate('[$[1]] Renderer died, respawning…', '', worker.process.pid));\n        Cluster.fork();\n      });\n      for (let i = 0; i < config('system.rendererWorkerCount'); ++i) {\n        Cluster.fork();\n      }\n      IPC.on('ready', onReady);\n      IPC.on('reloadBoards', async function() {\n        Board.initialize();\n        await IPC.send('reloadBoards');\n      });\n      IPC.on('reloadTemplates', async function() {\n        await Renderer.compileTemplates();\n        await IPC.send('reloadTemplates');\n      });\n      Queue.process('reloadBoards', async function(_1, done) {\n        try {\n          Board.initialize();\n          await IPC.send('reloadBoards');\n        } catch (err) {\n          Logger.error(err.stack || err);\n        }\n        done();\n      });\n      Queue.process('reloadTemplates', async function(_1, done) {\n        try {\n          await Renderer.reloadTemplates();\n          await IPC.send('reloadTemplates');\n        } catch (err) {\n          Logger.error(err.stack || err);\n        }\n        done();\n      });\n      Queue.process('render', async function(job, done) {\n        try {\n          Logger.info(Tools.translate('Task: $[1]', '', 'render'), job.data);\n          await RenderScheduler.scheduleRender(job.data);\n          done();\n        } catch (err) {\n          Logger.error(err.stack || err);\n          done(err);\n        }\n      });\n      Queue.process('renderArchive', async function(job, done) {\n        try {\n          Logger.info(Tools.translate('Task: $[1]', '', 'renderArchive'), job.data);\n          await RenderScheduler.scheduleRenderArchive(job.data);\n          done();\n        } catch (err) {\n          Logger.error(err.stack || err);\n          done(err);\n        }\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n      process.exit(1);\n    }\n  })();\n}\n\nfunction initializeWorker() {\n  //NOTE: Overcoming Babel bug\n  (async function() {\n    console.log(Tools.translate('[$[1]] Initializing renderer…', '', process.pid));\n    try {\n      await BoardsModel.initialize();\n      await Renderer.reloadTemplates();\n      console.log(Tools.translate('[$[1]] Rendered initialized', '', process.pid));\n      IPC.on('exit', (status) => { process.exit(status); });\n      IPC.on('reloadBoards', () => {\n        Board.initialize();\n      });\n      IPC.on('reloadTemplates', async function() {\n        return await Renderer.reloadTemplates();\n      });\n      IPC.on('render', async function(data) {\n        let f = BoardController[`${data.type}`];\n        if (typeof f !== 'function') {\n          throw new Error(Tools.translate('Invalid render function'));\n        }\n        return await f.call(BoardController, data.key, data.data);\n      });\n      IPC.send('ready').catch((err) => {\n        Logger.error(err);\n      });\n    } catch (err) {\n      console.error(err);\n      try {\n        Logger.error(err.stack || err);\n      } catch (err) {\n        console.error(err);\n      }\n      process.exit(1);\n    }\n  })();\n}\n\nBoard.initialize();\n\nif (Cluster.isMaster) {\n  initializeMaster();\n} else {\n  initializeWorker();\n}\n"],"sourceRoot":"/source/"}