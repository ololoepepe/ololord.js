{"version":3,"sources":["helpers/fs-watcher.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqB,S;;;;;0CACU,I,EAAM,W,EAAa,Y,EAAc;AAC5D,UAAI,CAAC,aAAO,UAAP,CAAkB,IAAlB,CAAL,EAA8B;AAC5B;AACD;AACD,UAAI,OAAO,YAAP,KAAwB,UAA5B,EAAwC;AACrC,YAAI,SAAJ,CAAc,IAAd,CAAD,CAAsB,EAAtB,CAAyB,QAAzB,4CAAmC;AAAA,cAE3B,MAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEZ,aAAG,MAAH,CAAU,IAAV,CAFY;;AAAA;AAE3B,wBAF2B;;AAAA,uBAG3B,MAH2B;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAIvB,aAAa,IAAb,CAJuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAO/B,0BAAQ,UAAR,EAAoB,OAApB,CAA4B,KAA5B,CAAkC,YAAI,KAAJ,eAAlC;;AAP+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;AAUD;AACD,aAAO,YAAY,IAAZ,CAAP;AACD;;;AAED,qBAAY,QAAZ,EAAsB;AAAA;;AAAA;;AAEpB,UAAK,QAAL,GAAgB,QAAhB;AACA,UAAK,YAAL;AAHoB;AAIrB;;;;;;;;YAOK,M;;;;;AAJJ,oBAAI,KAAK,OAAT,EAAkB;AAChB,uBAAK,OAAL,CAAa,kBAAb,CAAgC,QAAhC;AACA,uBAAK,OAAL,CAAa,KAAb;AACD;;uBACkB,aAAG,MAAH,CAAU,KAAK,QAAf,C;;;AAAf,sB;;oBACC,M;;;;;;;;AAGL,qBAAK,OAAL,GAAe,aAAO,KAAP,CAAa,KAAK,QAAlB,CAAf;AACA,qBAAK,OAAL,CAAa,EAAb,CAAgB,QAAhB,EAA0B,UAAC,IAAD,EAAO,QAAP,EAAoB;AAC5C,sBAAI,aAAa,IAAjB,EAAuB;AACrB,wBAAI,OAAK,QAAL,CAAc,KAAd,CAAoB,GAApB,EAAyB,GAAzB,OAAmC,QAAvC,EAAiD;AAC/C;AACD;AACD,2BAAK,YAAL;AACD,mBALD,MAKO,IAAI,aAAa,IAAjB,EAAuB;AAC5B,2BAAK,IAAL,CAAU,QAAV;AACD;AACF,iBATD;;;;;;;;;;;;;;;;;;;;;kBApCiB,S","file":"helpers/fs-watcher.js","sourcesContent":["import { EventEmitter } from 'events';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\n\nexport default class FSWatcher extends EventEmitter {\n  static createWatchedResource(path, synchronous, asynchronous) {\n    if (!FSSync.existsSync(path)) {\n      return;\n    }\n    if (typeof asynchronous === 'function') {\n      (new FSWatcher(path)).on('change', async function() {\n        try {\n          let exists = await FS.exists(path);\n          if (exists) {\n            await asynchronous(path);\n          }\n        } catch (err) {\n          require('./logger').default.error(err.stack || err);\n        }\n      });\n    }\n    return synchronous(path);\n  }\n\n  constructor(fileName) {\n    super();\n    this.fileName = fileName;\n    this.resetWatcher();\n  }\n\n  async resetWatcher() {\n    if (this.watcher) {\n      this.watcher.removeAllListeners('change');\n      this.watcher.close();\n    }\n    let exists = await FS.exists(this.fileName);\n    if (!exists) {\n      return;\n    }\n    this.watcher = FSSync.watch(this.fileName);\n    this.watcher.on('change', (type, fileName) => {\n      if ('rename' === type) {\n        if (this.fileName.split('/').pop() !== fileName) {\n          return;\n        }\n        this.resetWatcher();\n      } else if ('change' === type) {\n        this.emit('change');\n      }\n    });\n  }\n}\n"],"sourceRoot":"/source/"}