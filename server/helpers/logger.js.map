{"version":3,"sources":["helpers/logger.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAY,G;;;;;;;;;;;;;;AAEZ,IAAM,OAAO,yBAAb;;IAEM,uB;;;AACJ,qCAA0B;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA,2GAClB,OADkB;;AAExB,UAAK,IAAL,GAAY,SAAZ;AAFwB;AAGzB;;;;;2EAES,K,EAAO,G,EAAK,I,EAAM,Q;YAOtB,O;;;;;qBANA,KAAK,M;;;;;iDACA,SAAS,IAAT,EAAe,IAAf,C;;;AAET,oBAAI,KAAK,WAAT,EAAsB;AACpB,wBAAM,CAAC,KAAK,GAAN,EAAW,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAN;AACD;AACG,uB,GAAU;AACZ,uBAAK,KADO;AAEZ,0BAAQ,kBAAQ,MAAR,CAAe,EAAf,IAAqB,IAFjB;AAGZ,yBAAO,KAHK;AAIZ,uBAAK,GAJO;AAKZ,wBAAM;AALM,iB;;;uBAQN,IAAI,IAAJ,CAAS,KAAT,EAAgB,OAAhB,C;;;;;;;;;;AAEN,wBAAQ,KAAR,CAAc,YAAI,KAAJ,eAAd;iDACO,qB;;;AAET,qBAAK,IAAL,CAAU,QAAV;AACA,yBAAS,IAAT,EAAe,IAAf;iDACO,O;;;;;;;;;;;;;;;;;;2BAGF,I,EAAM,Q,EAAU,CAAG;;;0BAEpB,O,EAAS,Q,EAAU,CAAG;;;2BAErB,O,EAAS,CAAG;;;yBAEd,Q,EAAU;AACb;AACD;;;4BAEO,CAAG;;;4BAEH,CAAG;;;;EA3CyB,kBAAQ,S;;AA8C9C,kBAAQ,UAAR,CAAmB,OAAnB,GAA6B,uBAA7B;;AAEA,IAAM,gBAAgB;AACpB,aAAW;AACT,UAAM,kBAAQ,UAAR,CAAmB,OADhB;AAET,UAAM;AACJ,iBAAW,IADP;AAEJ,gBAAU;AAFN;AAFG,GADS;AAQpB,UAAQ;AACN,0CADM;AAEN,UAAM;AACJ,gBAAa,SAAb,4BADI;AAEJ,eAAS,sBAAO,oBAAP,CAFL;AAGJ,gBAAU,sBAAO,qBAAP;AAHN;AAFA;AARY,CAAtB;;AAkBA,IAAI,aAAa,sBAAO,uBAAP,EAAgC,GAAhC,CAAoC,UAAC,IAAD,EAAU;AAC7D,SAAO,cAAc,IAAd,CAAP;AACD,CAFgB,EAEd,MAFc,CAEP;AAAA,SAAa,CAAC,CAAC,SAAf;AAAA,CAFO,CAAjB;;AAIA,IAAI,WAAW,MAAX,IAAqB,CAAzB,EAA4B;AAC1B,eAAa,0BAAE,aAAF,EAAiB,OAAjB,EAAb;AACD;;AAED,IAAI,eAAJ;;AAEA,IAAI,kBAAQ,QAAZ,EAAsB;AACpB,WAAS,IAAI,kBAAQ,MAAZ,CAAmB,EAAE,YAAY,WAAW,GAAX,CAAe;AAAA,UAAG,IAAH,QAAG,IAAH;AAAA,UAAS,IAAT,QAAS,IAAT;AAAA,aAAoB,IAAI,IAAJ,CAAS,IAAT,CAApB;AAAA,KAAf,CAAd,EAAnB,CAAT;AACD,CAFD,MAEO;AACL,WAAS,IAAI,kBAAQ,MAAZ,CAAmB,EAAE,YAAY,CAAC,IAAI,uBAAJ,EAAD,CAAd,EAAnB,CAAT;AACD;;AAED,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,MAAI,IAAJ,CAAS,MAAT,GAAkB,IAAI,MAAtB;AACA,SAAO,GAAP,CAAW,IAAI,KAAf,EAAsB,IAAI,GAA1B,EAA+B,IAAI,IAAnC;AACD;;AAED,OAAO,UAAP,GAAoB,YAAM;AACxB,MAAI,kBAAQ,QAAZ,EAAsB;AACpB,QAAI,EAAJ,CAAO,KAAP,EAAc,aAAd;AACD;AACF,CAJD;;kBAMe,M","file":"helpers/logger.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport Winston from 'winston';\nimport WinstonDailyRotateFileTransport from 'winston-daily-rotate-file';\n\nimport config from './config';\nimport * as IPC from './ipc';\n\nconst CODE = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n\nclass WinstonClusterTransport extends Winston.Transport {\n  constructor(options = {}) {\n    super(options);\n    this.name = 'cluster';\n  }\n\n  async log(level, msg, meta, callback) {\n    if (this.silent) {\n      return callback(null, true);\n    }\n    if (this.stripColors) {\n      msg = ('' + msg).replace(code, '');\n    }\n    let message = {\n      cmd: 'log',\n      worker: Cluster.worker.id || null,\n      level: level,\n      msg: msg,\n      meta: meta\n    };\n    try {\n      await IPC.send('log', message);\n    } catch (err) {\n      console.error(err.stack || err);\n      return callback(err);\n    }\n    this.emit('logged');\n    callback(null, true);\n    return message;\n  }\n\n  _write(data, callback) { }\n\n  query(options, callback) { }\n\n  stream(options) { }\n\n  open(callback) {\n    callback();\n  }\n\n  close() { }\n\n  flush() { }\n}\n\nWinston.transports.Cluster = WinstonClusterTransport;\n\nconst TRANSPORT_MAP = {\n  'console': {\n    ctor: Winston.transports.Console,\n    opts: {\n      timestamp: true,\n      colorize: true\n    }\n  },\n  'file': {\n    ctor: WinstonDailyRotateFileTransport,\n    opts: {\n      filename: `${__dirname}/../../logs/ololord.log`,\n      maxsize: config('system.log.maxSize'),\n      maxFiles: config('system.log.maxFiles')\n    }\n  }\n};\n\nlet transports = config('system.log.transports').map((name) => {\n  return TRANSPORT_MAP[name];\n}).filter(transport => !!transport);\n\nif (transports.length <= 0) {\n  transports = _(TRANSPORT_MAP).toArray();\n}\n\nlet Logger;\n\nif (Cluster.isMaster) {\n  Logger = new Winston.Logger({ transports: transports.map(({ ctor, opts }) => new ctor(opts)) });\n} else {\n  Logger = new Winston.Logger({ transports: [new WinstonClusterTransport()] });\n}\n\nfunction handleMessage(msg) {\n  msg.meta.worker = msg.worker;\n  Logger.log(msg.level, msg.msg, msg.meta);\n}\n\nLogger.initialize = () => {\n  if (Cluster.isMaster) {\n    IPC.on('log', handleMessage);\n  }\n}\n\nexport default Logger;\n"],"sourceRoot":"/source/"}