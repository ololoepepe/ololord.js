{"version":3,"sources":["helpers/post-creation-transaction.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;AACA;;IAAY,K;;AACZ;;;;;;;;;;;;AAEA,IAAI,SAAS,qCAAb;;IAEqB,uB;AACnB,mCAAY,SAAZ,EAAuB;AAAA;;AACrB,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,WAAL,GAAmB,EAAnB;AACD;;;;4BAEO,I,EAAM;AACZ,WAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACD;;;oCAEe,Y,EAAc;AAC5B,WAAK,YAAL,GAAoB,YAApB;AACD;;;kCAEa,U,EAAY;AACxB,WAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACD;;;6BAEQ;AACP,WAAK,SAAL,GAAiB,IAAjB;AACD;;;;;;;;;qBAGK,KAAK,S;;;;;;;;;;uBAID,KAAK,cAAL,E;;;sBACF,KAAK,YAAL,GAAoB,C;;;;;;uBAChB,KAAK,eAAL,E;;;sBAEJ,KAAK,WAAL,CAAiB,MAAjB,GAA0B,C;;;;;;uBACtB,KAAK,cAAL,E;;;;;;;;;;AAGR,iCAAO,KAAP,CAAa,YAAI,KAAJ,eAAb;;;;;;;;;;;;;;;;;;;;;;;;;uBAKI,MAAM,MAAN,CAAa,KAAK,KAAlB;AAAA,sEAAyB,kBAAe,IAAf;AAAA,wBAEvB,MAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAER,aAAG,MAAH,CAAU,IAAV,CAFQ;;AAAA;AAEvB,kCAFuB;;AAAA,iCAGvB,MAHuB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAInB,aAAG,MAAH,CAAU,IAAV,CAJmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAO3B,6CAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAP2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzB;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;;;;;;;;;;;;;;YAcA,M;;;;;;;uBAAe,OAAO,UAAP,CAAkB,QAAlB,C;;;AAAf,sB;;uBACE,OAAO,SAAP,CAAiB;AACrB,6BAAW,KAAK,SADK;AAErB,0BAAQ,KAAK;AAFQ,iBAAjB,C;;;;;;;;;;AAKN,iCAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;;;;;;;;;;;;;;;;;;;YAMI,I;;;;;;;uBAAa,OAAO,UAAP,CAAkB,MAAlB,C;;;AAAb,oB;;uBACE,KAAK,UAAL,CAAgB;AACpB,6BAAW,KAAK,SADI;AAEpB,0BAAQ,EAAE,KAAK,KAAK,WAAZ;AAFY,iBAAhB,C;;;;;;;;;;AAKN,iCAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;;;;;;;;;;;;;;;;;;;;kBAzEe,uB","file":"helpers/post-creation-transaction.js","sourcesContent":["import FS from 'q-io/fs';\n\nimport Logger from './logger';\nimport * as Tools from './tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nexport default class PostCreationTransaction {\n  constructor(boardName) {\n    this.boardName = boardName;\n    this.files = [];\n    this.postNumbers = [];\n  }\n\n  addFile(path) {\n    this.files.push(path);\n  }\n\n  setThreadNumber(threadNumber) {\n    this.threadNumber = threadNumber;\n  }\n\n  addPostNumber(postNumber) {\n    this.postNumbers.push(postNumber);\n  }\n\n  commit() {\n    this.committed = true;\n  }\n\n  async rollback() {\n    if (this.committed) {\n      return;\n    }\n    try {\n      await this._rollbackFiles();\n      if (this.threadNumber > 0) {\n        await this._rollbackThread();\n      }\n      if (this.postNumbers.length > 0) {\n        await this._rollbackPosts();\n      }\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  async _rollbackFiles() {\n    await Tools.series(this.files, async function(path) {\n      try {\n        let exists = await FS.exists(path);\n        if (exists) {\n          await FS.remove(path);\n        }\n      } catch (err) {\n        Logger.error(err.stack || err);\n      }\n    });\n  }\n\n  async _rollbackThread() {\n    try {\n      let Thread = await client.collection('thread');\n      await Thread.deleteOne({\n        boardName: this.boardName,\n        number: this.threadNumber\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  async _rollbackPosts() {\n    try {\n      let Post = await client.collection('post');\n      await Post.deleteMany({\n        boardName: this.boardName,\n        number: { $in: this.postNumbers }\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}