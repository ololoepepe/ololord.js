{"version":3,"sources":["helpers/ipc.js"],"names":[],"mappings":"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","file":"helpers/ipc.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport UUID from 'uuid';\n\nimport Logger from './logger';\nimport Queue from './queue';\nimport * as Tools from './tools';\n\nconst DEFAULT_TASK_TIMEOUT = 30 * Tools.SECOND;\n\nlet handlers = new Map();\nlet tasks = new Map();\n\nasync function handleMessage(message, workerID) {\n  let task = tasks.get(message.id);\n  if (task) {\n    tasks.delete(message.id);\n    if (!message.error) {\n      task.resolve(message.data);\n    } else {\n      task.reject(message.error);\n    }\n  } else {\n    let handler = handlers.get(message.type);\n    let proc = workerID ? Cluster.workers[workerID] : process;\n    if (typeof handler !== 'function') {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: Tools.translate('Method not found: $[1]', '', message.type)\n      });\n    }\n    try {\n      let data = await handler(message.data);\n      proc.send({\n        id: message.id,\n        type: message.type,\n        data: data || null\n      });\n    } catch (err) {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: err.stack || err.toString()\n      });\n    }\n  }\n}\n\nfunction sendMessage(proc, type, data, nowait) {\n  return new Promise((resolve, reject) => {\n    let id = UUID.v4();\n    tasks.set(id, {\n      resolve: resolve,\n      reject: reject\n    });\n    proc.send({\n      id: id,\n      type: type,\n      data: data || null\n    }, (err) => {\n      if (err) {\n        tasks.delete(id);\n        reject(err);\n        return;\n      }\n      if (nowait) {\n        tasks.delete(id);\n        resolve();\n      }\n    });\n  });\n}\n\nif (Cluster.isMaster) {\n  Cluster.on('online', (worker) => {\n    worker.process.on('message', (message) => {\n      handleMessage(message, worker.id);\n    });\n  });\n} else {\n  process.on('message', (message) => {\n    handleMessage(message);\n  });\n}\n\nexport async function send(type, data, nowait, workerID) {\n  if (Cluster.isMaster) {\n    if (workerID) {\n      let worker = Cluster.workers[workerID];\n      if (!worker) {\n        throw new Error(Tools.translate('Invalid worker ID'));\n      }\n      return await sendMessage(worker.process, type, data, nowait);\n    } else {\n      let promises = _(Cluster.workers).map((worker) => {\n        return sendMessage(worker.process, type, data, nowait);\n      });\n      return await Promise.all(promises);\n    }\n  } else {\n    return await sendMessage(process, type, data, nowait);\n  }\n}\n\nexport function on(type, handler) {\n  handlers.set(type, handler);\n  return module.exports;\n}\n\nexport async function enqueueTask(task, data, timeout) {\n  timeout = Tools.option(timeout, 'number', DEFAULT_TASK_TIMEOUT, { test: (t) => { return t > 0; } });\n  return new Promise((resolve, reject) => {\n    let job = Queue.create(task, data).ttl(timeout).save((err) => {\n      if (err) {\n        reject(err);\n      }\n    });\n    job.on('complete', (result) => {\n      resolve(result);\n    }).on('failed', (err) => {\n      reject(new Error(err));\n    });\n    setTimeout(() => {\n      reject(new Error('Rendering task timed out'));\n    }, timeout);\n  });\n}\n\nexport async function render(boardName, threadNumber, postNumber, action, timeout) {\n  if (Cluster.isMaster) {\n    throw new Error('Rendering requested from master process');\n  }\n  try {\n    await enqueueTask('render', {\n      boardName: boardName,\n      threadNumber: threadNumber,\n      postNumber: postNumber,\n      action: action\n    }, timeout);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function renderArchive(boardName, timeout) {\n  if (Cluster.isMaster) {\n    throw new Error('Rendering requested from master process');\n  }\n  try {\n    await enqueueTask('renderArchive', boardName, timeout);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}