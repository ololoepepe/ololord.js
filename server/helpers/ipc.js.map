{"version":3,"sources":["helpers/ipc.js"],"names":["message","workerID","task","tasks","get","id","delete","error","resolve","data","reject","handler","handlers","type","proc","workers","process","send","Tools","translate","stack","toString","handleMessage","nowait","isMaster","worker","Error","sendMessage","promises","map","Promise","all","timeout","option","DEFAULT_TASK_TIMEOUT","test","t","job","create","ttl","save","err","on","result","setTimeout","enqueueTask","boardName","threadNumber","postNumber","action","warn","render","renderArchive","renderRSS","SECOND","Map","v4","set","module","exports"],"mappings":"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","file":"ipc.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport UUID from 'uuid';\n\nimport Logger from './logger';\nimport Queue from './queue';\nimport * as Tools from './tools';\n\nconst DEFAULT_TASK_TIMEOUT = 30 * Tools.SECOND;\n\nlet handlers = new Map();\nlet tasks = new Map();\n\nasync function handleMessage(message, workerID) {\n  let task = tasks.get(message.id);\n  if (task) {\n    tasks.delete(message.id);\n    if (!message.error) {\n      task.resolve(message.data);\n    } else {\n      task.reject(message.error);\n    }\n  } else {\n    let handler = handlers.get(message.type);\n    let proc = workerID ? Cluster.workers[workerID] : process;\n    if (typeof handler !== 'function') {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: Tools.translate('Method not found: $[1]', '', message.type)\n      });\n      return;\n    }\n    try {\n      let data = await handler(message.data);\n      proc.send({\n        id: message.id,\n        type: message.type,\n        data: data || null\n      });\n    } catch (err) {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: err.stack || err.toString()\n      });\n    }\n  }\n}\n\nfunction sendMessage(proc, type, data, nowait) {\n  return new Promise((resolve, reject) => {\n    let id = UUID.v4();\n    tasks.set(id, {\n      resolve: resolve,\n      reject: reject\n    });\n    proc.send({\n      id: id,\n      type: type,\n      data: data || null\n    }, (err) => {\n      if (err) {\n        tasks.delete(id);\n        reject(err);\n        return;\n      }\n      if (nowait) {\n        tasks.delete(id);\n        resolve();\n      }\n    });\n  });\n}\n\nif (Cluster.isMaster) {\n  Cluster.on('online', (worker) => {\n    worker.process.on('message', (message) => {\n      handleMessage(message, worker.id);\n    });\n  });\n} else {\n  process.on('message', (message) => {\n    handleMessage(message);\n  });\n}\n\nexport async function send(type, data, nowait, workerID) {\n  if (Cluster.isMaster) {\n    if (workerID) {\n      let worker = Cluster.workers[workerID];\n      if (!worker) {\n        throw new Error(Tools.translate('Invalid worker ID'));\n      }\n      return await sendMessage(worker.process, type, data, nowait);\n    } else {\n      let promises = _(Cluster.workers).map((worker) => {\n        return sendMessage(worker.process, type, data, nowait);\n      });\n      return await Promise.all(promises);\n    }\n  } else {\n    return await sendMessage(process, type, data, nowait);\n  }\n}\n\nexport function on(type, handler) {\n  handlers.set(type, handler);\n  return module.exports;\n}\n\nexport async function enqueueTask(task, data, timeout) {\n  timeout = Tools.option(timeout, 'number', DEFAULT_TASK_TIMEOUT, { test: (t) => { return t > 0; } });\n  return new Promise((resolve, reject) => {\n    let job = Queue.create(task, data).ttl(timeout).save((err) => {\n      if (err) {\n        reject(err);\n      }\n    });\n    job.on('complete', (result) => {\n      resolve(result);\n    }).on('failed', (err) => {\n      reject(new Error(err));\n    });\n    setTimeout(() => {\n      reject(new Error('Rendering task timed out'));\n    }, timeout);\n  });\n}\n\nexport async function render(boardName, threadNumber, postNumber, action, timeout) {\n  if (Cluster.isMaster) {\n    Logger.warn('Rendering requested from master process');\n  }\n  try {\n    await enqueueTask('render', {\n      boardName: boardName,\n      threadNumber: threadNumber,\n      postNumber: postNumber,\n      action: action\n    }, timeout);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function renderArchive(boardName, timeout) {\n  if (Cluster.isMaster) {\n    Logger.warn('Rendering requested from master process');\n  }\n  try {\n    await enqueueTask('renderArchive', boardName, timeout);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function renderRSS(timeout) {\n  try {\n    await enqueueTask('renderRSS', null, timeout);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"]}