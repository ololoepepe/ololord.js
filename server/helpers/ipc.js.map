{"version":3,"sources":["helpers/ipc.js"],"names":[],"mappings":";;;;;;;;sDAsBA,iBAA6B,OAA7B,EAAsC,QAAtC;AAAA,QACM,IADN,EAUQ,OAVR,EAWQ,IAXR,EAoBU,IApBV;AAAA;AAAA;AAAA;AAAA;AACM,gBADN,GACa,MAAM,GAAN,CAAU,QAAQ,EAAlB,CADb;;AAAA,iBAEM,IAFN;AAAA;AAAA;AAAA;;AAGI,kBAAM,MAAN,CAAa,QAAQ,EAArB;AACA,gBAAI,CAAC,QAAQ,KAAb,EAAoB;AAClB,mBAAK,OAAL,CAAa,QAAQ,IAArB;AACD,aAFD,MAEO;AACL,mBAAK,MAAL,CAAY,QAAQ,KAApB;AACD;AARL;AAAA;;AAAA;AAUQ,mBAVR,GAUkB,SAAS,GAAT,CAAa,QAAQ,IAArB,CAVlB;AAWQ,gBAXR,GAWe,WAAW,kBAAQ,OAAR,CAAgB,QAAhB,CAAX,GAAuC,OAXtD;;AAYI,gBAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,mBAAK,IAAL,CAAU;AACR,oBAAI,QAAQ,EADJ;AAER,sBAAM,QAAQ,IAFN;AAGR,uBAAO,MAAM,SAAN,CAAgB,wBAAhB,EAA0C,EAA1C,EAA8C,QAAQ,IAAtD;AAHC,eAAV;AAKD;AAlBL;AAAA;AAAA,mBAoBuB,QAAQ,QAAQ,IAAhB,CApBvB;;AAAA;AAoBU,gBApBV;;AAqBM,iBAAK,IAAL,CAAU;AACR,kBAAI,QAAQ,EADJ;AAER,oBAAM,QAAQ,IAFN;AAGR,oBAAM,QAAQ;AAHN,aAAV;AArBN;AAAA;;AAAA;AAAA;AAAA;;AA2BM,iBAAK,IAAL,CAAU;AACR,kBAAI,QAAQ,EADJ;AAER,oBAAM,QAAQ,IAFN;AAGR,qBAAO,YAAI,KAAJ,IAAa,YAAI,QAAJ;AAHZ,aAAV;;AA3BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,a;;;;;;sDAiGf,kBAA2B,IAA3B,EAAiC,GAAjC,EAAsC,IAAtC;AAAA,QACM,QADN,EAaQ,MAbR;AAAA;AAAA;AAAA;AAAA;AACM,oBADN,GACiB,OAAO,IAAP,CAAY,kBAAQ,OAApB,EAA6B,GAA7B,CAAiC,UAAC,EAAD,EAAQ;AACtD,qBAAO;AACL,oBAAI,EADC;AAEL,sBAAM,YAAY,GAAZ,CAAgB,EAAhB,KAAuB;AAFxB,eAAP;AAID,aALc,EAKZ,IALY,CAKP,UAAC,EAAD,EAAK,EAAL,EAAY;AAAE,qBAAO,GAAG,IAAH,GAAU,GAAG,IAApB;AAA2B,aALlC,EAKoC,KALpC,GAK4C,EAN7D;;AAOE,gBAAI,YAAY,GAAZ,CAAgB,QAAhB,CAAJ,EAA+B;AAC7B,0BAAY,GAAZ,CAAgB,QAAhB,EAA0B,YAAY,GAAZ,CAAgB,QAAhB,IAA4B,CAAtD;AACD,aAFD,MAEO;AACL,0BAAY,GAAZ,CAAgB,QAAhB,EAA0B,CAA1B;AACD;AAXH;AAAA;AAAA,mBAauB,KAAK,QAAL,EAAe;AAChC,oBAAM,IAD0B;AAEhC,mBAAK,GAF2B;AAGhC,oBAAM;AAH0B,aAAf,EAIhB,KAJgB,EAIT,QAJS,CAbvB;;AAAA;AAaQ,kBAbR;;AAkBI,wBAAY,GAAZ,CAAgB,QAAhB,EAA0B,YAAY,GAAZ,CAAgB,QAAhB,IAA4B,CAAtD;AAlBJ,8CAmBW,MAnBX;;AAAA;AAAA;AAAA;;AAqBI,wBAAY,GAAZ,CAAgB,QAAhB,EAA0B,YAAY,GAAZ,CAAgB,QAAhB,IAA4B,CAAtD;AArBJ,8CAsBW,QAAQ,MAAR,cAtBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,W;;;;;;sDA0Bf,kBAAwB,IAAxB,EAA8B,GAA9B,EAAmC,GAAnC;AAAA,QACM,SADN,EAEM,IAFN;AAAA;AAAA;AAAA;AAAA;AACM,qBADN,GACkB,IAAI,GAAJ,CAAQ,GAAR,CADlB;AAEM,gBAFN,GAEa,UAAU,IAFvB;;AAAA,kBAGM,CAAC,IAAD,IAAS,KAAK,MAAL,IAAe,CAH9B;AAAA;AAAA;AAAA;;AAII,gBAAI,MAAJ,CAAW,GAAX;AAJJ;;AAAA;AAOE,mBAAO,UAAU,IAAjB;AAPF;AAAA;AAAA,mBASU,YAAY,IAAZ,EAAkB,GAAlB,EAAuB,KAAK,GAAL,CAAS;AAAA,qBAAK,EAAE,IAAP;AAAA,aAAT,CAAvB,CATV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWI,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAXJ;AAaE;AACA,iBAAK,OAAL,CAAa,UAAC,CAAD,EAAO;AAAE,gBAAE,OAAF;AAAc,aAApC;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,Q;;;;;;sDAiBf,kBAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC;AAAA,QACM,GADN,EAEM,SAFN;AAAA;AAAA;AAAA;AAAA;AACM,eADN,GACY,aAAa,GAAb,CAAiB,IAAjB,CADZ;AAEM,qBAFN,GAEkB,IAAI,GAAJ,CAAQ,GAAR,CAFlB;;AAAA,iBAGM,SAHN;AAAA;AAAA;AAAA;;AAAA,8CAIW,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,kBAAI,CAAC,UAAU,IAAf,EAAqB;AACnB,0BAAU,IAAV,GAAiB,EAAjB;AACD;AACD,wBAAU,IAAV,CAAe,IAAf,CAAoB;AAClB,yBAAS,OADS;AAElB,sBAAM;AAFY,eAApB;AAID,aARM,CAJX;;AAAA;AAcI,gBAAI,GAAJ,CAAQ,GAAR,EAAa,IAAI,GAAJ,EAAb;AAdJ;AAAA;AAAA,mBAgBY,YAAY,IAAZ,EAAkB,GAAlB,EAAuB,IAAvB,CAhBZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkBM,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAlBN;AAoBI,qBAAS,IAAT,EAAe,GAAf,EAAoB,GAApB;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,O;;;;;;sDAwBf,kBAA4B,SAA5B,EAAuC,YAAvC,EAAqD,UAArD,EAAiE,MAAjE;AAAA,QACM,SADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACwB,aAAa,eAAb,CAA6B,SAA7B,EAAwC,YAAxC,CADxB;;AAAA;AACM,qBADN;;AAAA,iBAEM,SAFN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKE,gBAAI,iBAAiB,UAArB,EAAiC;AAC/B,kBAAI,WAAW,MAAf,EAAuB;AACrB,yBAAS,QAAT;AACD;AACF,aAJD,MAIO;AACL,uBAAS,MAAT;AACD;AAXH;AAAA,mBAYe,QAAQ,cAAR,EAA2B,SAA3B,SAAwC,YAAxC,EAAwD;AACnE,yBAAW,SADwD;AAEnE,4BAAc,YAFqD;AAGnE,sBAAQ;AAH2D,aAAxD,CAZf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,Y;;;;;;sDAmBR,kBAA2B,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,QAAQ,aAAR,EAAuB,SAAvB,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,W;;;;;;sDAIf,kBAA6B,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,QAAQ,eAAR,EAAyB,SAAzB,CADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,a;;;;;;sDAIf,kBAA6B,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEC,kBAAQ,QAFT;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGY,QAAQ,eAAR,EAAyB,SAAzB,CAHZ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAKK,KAAK,eAAL,EAAsB,SAAtB,CALL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQH,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,a;;;;;;sDAYf,mBAAsB,SAAtB,EAAiC,YAAjC,EAA+C,UAA/C,EAA2D,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEC,kBAAQ,QAFT;AAAA;AAAA;AAAA;;AAAA,4BAGO,MAHP;AAAA,gDAII,QAJJ,yBAYI,MAZJ,yBAaI,QAbJ;AAAA;;AAAA;AAAA;AAAA,mBAKO,aAAa,SAAb,EAAwB,YAAxB,EAAsC,UAAtC,EAAkD,MAAlD,CALP;;AAAA;AAMC,sDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO,YAAY,SAAZ,CADP;;AAAA;AAAA;AAAA,6BAEO,cAAc,SAAd,CAFP;;AAAA;AAAA;AAAA,6BAGO,cAAc,SAAd,CAHP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;AAND;;AAAA;AAAA,kBAcK,iBAAiB,UAdtB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAeS,aAAa,SAAb,EAAwB,YAAxB,EAAsC,UAAtC,EAAkD,MAAlD,CAfT;;AAAA;AAAA;AAAA,mBAgBS,YAAY,SAAZ,CAhBT;;AAAA;AAiBG,sDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO,cAAc,SAAd,CADP;;AAAA;AAAA;AAAA,6BAEO,cAAc,SAAd,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;AAjBH;AAAA;;AAAA;AAsBG,sDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO,aAAa,SAAb,EAAwB,YAAxB,EAAsC,UAAtC,EAAkD,MAAlD,CADP;;AAAA;AAAA;AAAA,6BAEO,YAAY,SAAZ,CAFP;;AAAA;AAGC,gEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACO,cAAc,SAAd,CADP;;AAAA;AAAA;AAAA,uCAEO,cAAc,SAAd,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAD;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;;AAtBH;AAAA;;AAAA;AAiCC,sDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO,aAAa,SAAb,EAAwB,YAAxB,EAAsC,UAAtC,EAAkD,MAAlD,CADP;;AAAA;AAAA;AAAA,6BAEO,YAAY,SAAZ,CAFP;;AAAA;AAGC,gEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACO,cAAc,SAAd,CADP;;AAAA;AAAA;AAAA,uCAEO,cAAc,SAAd,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAD;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;AAjCD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA4CK,KAAK,QAAL,EAAe;AACnB,yBAAW,SADQ;AAEnB,4BAAc,YAFK;AAGnB,0BAAY,UAHO;AAInB,sBAAQ;AAJW,aAAf,CA5CL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoDH,6BAAO,KAAP,CAAa,cAAI,KAAJ,iBAAb;;AApDG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,M;;;;;QAlIN,I,GAAA,I;QAmBA,E,GAAA,E;;AAlHhB;;;;AACA;;;;AACA;;;;AAEA;;IAAY,Y;;AACZ;;;;AACA;;IAAY,K;;;;;;;;AAEZ,IAAI,WAAW,IAAI,GAAJ,EAAf;AACA,IAAI,QAAQ,IAAI,GAAJ,EAAZ;AACA,IAAI,uBAAuB,IAAI,GAAJ,EAA3B;AACA,IAAI,wBAAwB,IAAI,GAAJ,EAA5B;AACA,IAAI,yBAAyB,IAAI,GAAJ,EAA7B;AACA,IAAI,yBAAyB,IAAI,GAAJ,EAA7B;AACA,IAAI,eAAe,IAAI,GAAJ,CAAQ,CACzB,CAAC,aAAD,EAAgB,oBAAhB,CADyB,EAEzB,CAAC,cAAD,EAAiB,qBAAjB,CAFyB,EAGzB,CAAC,eAAD,EAAkB,sBAAlB,CAHyB,EAIzB,CAAC,eAAD,EAAkB,sBAAlB,CAJyB,CAAR,CAAnB;AAMA,IAAI,cAAc,IAAI,GAAJ,EAAlB;;AAsCA,SAAS,WAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,MAAvC,EAA+C;AAC7C,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,KAAK,eAAK,EAAL,EAAT;AACA,UAAM,GAAN,CAAU,EAAV,EAAc;AACZ,eAAS,OADG;AAEZ,cAAQ;AAFI,KAAd;AAIA,SAAK,IAAL,CAAU;AACR,UAAI,EADI;AAER,YAAM,IAFE;AAGR,YAAM,QAAQ;AAHN,KAAV,EAIG,UAAC,GAAD,EAAS;AACV,UAAI,GAAJ,EAAS;AACP,cAAM,MAAN,CAAa,EAAb;AACA,eAAO,GAAP;AACA;AACD;AACD,UAAI,MAAJ,EAAY;AACV,cAAM,MAAN,CAAa,EAAb;AACA;AACD;AACF,KAdD;AAeD,GArBM,CAAP;AAsBD;;AAED,IAAI,kBAAQ,QAAZ,EAAsB;AACpB,oBAAQ,EAAR,CAAW,QAAX,EAAqB,UAAC,MAAD,EAAY;AAC/B,WAAO,OAAP,CAAe,EAAf,CAAkB,SAAlB,EAA6B,UAAC,OAAD,EAAa;AACxC,oBAAc,OAAd,EAAuB,OAAO,EAA9B;AACD,KAFD;AAGD,GAJD;AAKD,CAND,MAMO;AACL,UAAQ,EAAR,CAAW,SAAX,EAAsB,UAAC,OAAD,EAAa;AACjC,kBAAc,OAAd;AACD,GAFD;AAGD;;AAEM,SAAS,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0B,MAA1B,EAAkC,QAAlC,EAA4C;AACjD,MAAI,kBAAQ,QAAZ,EAAsB;AACpB,QAAI,QAAJ,EAAc;AACZ,UAAI,SAAS,kBAAQ,OAAR,CAAgB,QAAhB,CAAb;AACA,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,mBAAhB,CAAV,CAAf,CAAP;AACD;AACD,aAAO,YAAY,OAAO,OAAnB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,MAAxC,CAAP;AACD,KAND,MAMO;AACL,UAAI,WAAW,0BAAE,kBAAQ,OAAV,EAAmB,GAAnB,CAAuB,UAAC,MAAD,EAAY;AAChD,eAAO,YAAY,OAAO,OAAnB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,MAAxC,CAAP;AACD,OAFc,CAAf;AAGA,aAAO,QAAQ,GAAR,CAAY,QAAZ,CAAP;AACD;AACF,GAbD,MAaO;AACL,WAAO,YAAY,OAAZ,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,MAAjC,CAAP;AACD;AACF;;AAEM,SAAS,EAAT,CAAY,IAAZ,EAAkB,OAAlB,EAA2B;AAChC,WAAS,GAAT,CAAa,IAAb,EAAmB,OAAnB;AACA,SAAO,OAAO,OAAd;AACD","file":"helpers/ipc.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport UUID from 'uuid';\n\nimport * as ThreadsModel from '../models/threads';\nimport Logger from './logger';\nimport * as Tools from './tools';\n\nlet handlers = new Map();\nlet tasks = new Map();\nlet scheduledRenderPages = new Map();\nlet scheduledRenderThread = new Map();\nlet scheduledRenderCatalog = new Map();\nlet scheduledRenderArchive = new Map();\nlet scheduledMap = new Map([\n  ['renderPages', scheduledRenderPages],\n  ['renderThread', scheduledRenderThread],\n  ['renderCatalog', scheduledRenderCatalog],\n  ['renderArchive', scheduledRenderArchive]\n]);\nlet workerLoads = new Map();\n\nasync function handleMessage(message, workerID) {\n  let task = tasks.get(message.id);\n  if (task) {\n    tasks.delete(message.id);\n    if (!message.error) {\n      task.resolve(message.data);\n    } else {\n      task.reject(message.error);\n    }\n  } else {\n    let handler = handlers.get(message.type);\n    let proc = workerID ? Cluster.workers[workerID] : process;\n    if (typeof handler !== 'function') {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: Tools.translate('Method not found: $[1]', '', message.type)\n      });\n    }\n    try {\n      let data = await handler(message.data);\n      proc.send({\n        id: message.id,\n        type: message.type,\n        data: data || null\n      });\n    } catch (err) {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: err.stack || err.toString()\n      });\n    }\n  }\n}\n\nfunction sendMessage(proc, type, data, nowait) {\n  return new Promise((resolve, reject) => {\n    let id = UUID.v4();\n    tasks.set(id, {\n      resolve: resolve,\n      reject: reject\n    });\n    proc.send({\n      id: id,\n      type: type,\n      data: data || null\n    }, (err) => {\n      if (err) {\n        tasks.delete(id);\n        reject(err);\n        return;\n      }\n      if (nowait) {\n        tasks.delete(id);\n        resolve();\n      }\n    });\n  });\n}\n\nif (Cluster.isMaster) {\n  Cluster.on('online', (worker) => {\n    worker.process.on('message', (message) => {\n      handleMessage(message, worker.id);\n    });\n  });\n} else {\n  process.on('message', (message) => {\n    handleMessage(message);\n  });\n}\n\nexport function send(type, data, nowait, workerID) {\n  if (Cluster.isMaster) {\n    if (workerID) {\n      let worker = Cluster.workers[workerID];\n      if (!worker) {\n        return Promise.reject(new Error(Tools.translate('Invalid worker ID')));\n      }\n      return sendMessage(worker.process, type, data, nowait);\n    } else {\n      let promises = _(Cluster.workers).map((worker) => {\n        return sendMessage(worker.process, type, data, nowait);\n      });\n      return Promise.all(promises);\n    }\n  } else {\n    return sendMessage(process, type, data, nowait);\n  }\n}\n\nexport function on(type, handler) {\n  handlers.set(type, handler);\n  return module.exports;\n}\n\nasync function performTask(type, key, data) {\n  let workerID = Object.keys(Cluster.workers).map((id) => {\n    return {\n      id: id,\n      load: workerLoads.get(id) || 0\n    };\n  }).sort((w1, w2) => { return w1.load - w2.load; }).shift().id;\n  if (workerLoads.has(workerID)) {\n    workerLoads.set(workerID, workerLoads.get(workerID) + 1);\n  } else {\n    workerLoads.set(workerID, 1);\n  }\n  try {\n    let result = await send('render', {\n      type: type,\n      key: key,\n      data: data\n    }, false, workerID);\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return result;\n  } catch (err) {\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return Promise.reject(err);\n  }\n}\n\nasync function nextTask(type, key, map) {\n  let scheduled = map.get(key);\n  let next = scheduled.next;\n  if (!next || next.length <= 0) {\n    map.delete(key);\n    return;\n  }\n  delete scheduled.next;\n  try {\n    await performTask(type, key, next.map(n => n.data));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  nextTask();\n  next.forEach((n) => { n.resolve(); });\n}\n\nasync function addTask(type, key, data) {\n  let map = scheduledMap.get(type);\n  let scheduled = map.get(key);\n  if (scheduled) {\n    return new Promise((resolve) => {\n      if (!scheduled.next) {\n        scheduled.next = [];\n      }\n      scheduled.next.push({\n        resolve: resolve,\n        data: data\n      });\n    });\n  } else {\n    map.set(key, new Map());\n    try {\n      await performTask(type, key, data);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n    nextTask(type, key, map);\n  }\n}\n\nasync function renderThread(boardName, threadNumber, postNumber, action) {\n  let isDeleted = await ThreadsModel.isThreadDeleted(boardName, threadNumber);\n  if (isDeleted) {\n    return;\n  }\n  if (threadNumber === postNumber) {\n    if ('edit' === action) {\n      action = 'create';\n    }\n  } else {\n    action = 'edit';\n  }\n  return await addTask('renderThread', `${boardName}:${threadNumber}`, {\n    boardName: boardName,\n    threadNumber: threadNumber,\n    action: action\n  });\n}\n\nexport async function renderPages(boardName) {\n  return await addTask('renderPages', boardName);\n}\n\nexport async function renderCatalog(boardName) {\n  return await addTask('renderCatalog', boardName);\n}\n\nexport async function renderArchive(boardName) { //TODO\n  try {\n    if (Cluster.isMaster) {\n      return await addTask('renderArchive', boardName);\n    } else {\n      await send('renderArchive', boardName);\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function render(boardName, threadNumber, postNumber, action) {\n  try {\n    if (Cluster.isMaster) {\n      switch (action) {\n      case 'create':\n        await renderThread(boardName, threadNumber, postNumber, action);\n        (async function() {\n          await renderPages(boardName);\n          await renderCatalog(boardName);\n          await renderArchive(boardName);\n        })();\n        break;\n      case 'edit':\n      case 'delete':\n        if (threadNumber === postNumber) {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName);\n          (async function() {\n            await renderCatalog(boardName);\n            await renderArchive(boardName);\n          })();\n        } else {\n          (async function() {\n            await renderThread(boardName, threadNumber, postNumber, action);\n            await renderPages(boardName);\n            (async function() {\n              await renderCatalog(boardName);\n              await renderArchive(boardName);\n            })();\n          })();\n        }\n        break;\n      default:\n        (async function() {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName);\n          (async function() {\n            await renderCatalog(boardName);\n            await renderArchive(boardName);\n          })();\n        });\n        break;\n      }\n    } else {\n      await send('render', {\n        boardName: boardName,\n        threadNumber: threadNumber,\n        postNumber: postNumber,\n        action: action\n      });\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}