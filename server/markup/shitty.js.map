{"version":3,"sources":["markup/shitty.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;IAAY,Q;;;;;;AAEZ,IAAM,YAAY,UAAlB;AACA,IAAM,UAAU,UAAhB;;AAEA,SAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACrC,MAAI,QAAQ,KAAK,IAAL,CAAU,SAAV,CAAZ;AACA,SAAO,KAAP,EAAc;AACZ,QAAI,IAAI,MAAM,KAAN,GAAe,MAAM,CAAN,EAAS,MAAT,GAAkB,CAAzC;AACA,QAAI,IAAI,CAAR,EAAW;AACT,cAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,MAAM,KAAN,GAAc,MAAM,CAAN,EAAS,MAA5C,CAAR;AACA;AACD;AACD,SAAK,OAAL,CAAa,MAAM,KAAnB,EAA0B,MAAM,CAAN,EAAS,MAAnC,EAA2C,MAA3C,EAAmD,CAAnD;AACA,SAAK,MAAL,CAAY,CAAZ,EAAe,KAAf;AACA,YAAQ,KAAK,IAAL,CAAU,SAAV,EAAqB,MAAM,KAAN,GAAc,CAAnC,CAAR;AACD;AACF;;AAED,SAAS,2BAAT,CAAqC,IAArC,EAA2C;AACzC,MAAI,QAAQ,KAAK,IAAL,CAAU,OAAV,CAAZ;AACA,MAAI,MAAM,KAAK,IAAf;AACA,SAAO,KAAP,EAAc;AACZ,QAAI,QAAQ,MAAM,CAAN,EAAS,MAAT,GAAkB,CAA9B;AACA,QAAI,SAAS,KAAb;AACA,QAAI,IAAI,MAAM,KAAN,GAAc,CAAtB;AACA,WAAO,QAAQ,CAAf,EAAkB;AAChB,aAAO,KAAK,CAAL,IAAU,KAAK,IAAL,CAAU,IAAI,CAAJ,CAAV,CAAjB,EAAoC;AAClC,UAAE,CAAF;AACD;AACD,aAAO,KAAK,CAAL,IAAU,CAAC,KAAK,IAAL,CAAU,IAAI,CAAJ,CAAV,CAAlB,EAAqC;AACnC,UAAE,CAAF;AACD;AACD,QAAE,KAAF;AACD;AACD,SAAK,OAAL,CAAa,MAAM,KAAnB,EAA0B,MAAM,CAAN,EAAS,MAAnC,EAA2C,MAA3C,EAAmD,CAAnD;AACA,SAAK,MAAL,CAAY,IAAI,CAAhB,EAAmB,KAAnB;AACA,YAAQ,KAAK,IAAL,CAAU,OAAV,EAAmB,MAAM,KAAN,GAAe,IAAI,MAAtC,CAAR;AACD;AACF;;AAED,SAAS,oBAAT,CAA8B,EAA9B,EAAkC,EAAlC,EAAsC,MAAtC,EAA8C,EAA9C,EAAkD,OAAlD,EAA2D;AACzD,UAAQ,IAAR,GAAe,4BAAkB,OAAjC;AACA,MAAI,UAAU,SAAS,MAAT,CAAgB,OAAO,CAAP,CAAhB,CAAd;AACA,UAAQ,EAAR,wDAA6D,OAA7D;AACA,UAAQ,EAAR,GAAa,SAAb;AACA,SAAO,OAAO,CAAP,CAAP;AACD;;kBAEc,CAAC;AACd,YAAU,IADI;AAEd,eAAa,CAAC,sBAAD,EAAyB,SAAzB,CAFC;AAGd,WAAS;AAHK,CAAD,EAIZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,sBAAD,EAAyB,SAAzB,CAFZ;AAGD,WAAS;AAHR,CAJY,EAQZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,sBAAD,EAAyB,SAAzB,CAFZ;AAGD,WAAS,oBAHR;AAID,MAAI,4BAJH;AAKD,MAAI;AALH,CARY,C","file":"markup/shitty.js","sourcesContent":["import ProcessingContext from './processing-context';\nimport * as Renderer from '../core/renderer';\n\nconst RX_SYMBOL = /(\\^H)+/gi;\nconst RX_WORD = /(\\^W)+/gi;\n\nfunction processStrikedOutShitty(info) {\n  let match = info.find(RX_SYMBOL);\n  while (match) {\n    let s = match.index - (match[0].length / 2);\n    if (s < 0) {\n      match = info.find(RX_SYMBOL, match.index + match[0].length);\n      continue;\n    }\n    info.replace(match.index, match[0].length, '</s>', 0);\n    info.insert(s, '<s>');\n    match = info.find(RX_SYMBOL, match.index + 7);\n  }\n}\n\nfunction processStrikedOutShittyWord(info) {\n  let match = info.find(RX_WORD);\n  let txt = info.text;\n  while (match) {\n    let count = match[0].length / 2;\n    let pcount = count;\n    let s = match.index - 1;\n    while (count > 0) {\n      while (s >= 0 && /\\s/.test(txt[s])) {\n        --s;\n      }\n      while (s >= 0 && !/\\s/.test(txt[s])) {\n        --s;\n      }\n      --count;\n    }\n    info.replace(match.index, match[0].length, '</s>', 0);\n    info.insert(s + 1, '<s>');\n    match = info.find(RX_WORD, match.index + (7 * pcount));\n  }\n}\n\nfunction convertTooltipShitty(_1, _2, matchs, _3, options) {\n  options.type = ProcessingContext.NO_SKIP;\n  let tooltip = Renderer.toHTML(matchs[2]);\n  options.op = `<span class='tooltip js-with-tooltip' title='${tooltip}'>`;\n  options.cl = '</span>';\n  return matchs[1];\n}\n\nexport default [{\n  priority: 1900,\n  markupModes: ['EXTENDED_WAKABA_MARK', 'BB_CODE'],\n  process: processStrikedOutShitty\n}, {\n  priority: 2000,\n  markupModes: ['EXTENDED_WAKABA_MARK', 'BB_CODE'],\n  process: processStrikedOutShittyWord\n}, {\n  priority: 2100,\n  markupModes: ['EXTENDED_WAKABA_MARK', 'BB_CODE'],\n  convert: convertTooltipShitty,\n  op: /([^\\?\\s]+)\\?{3}\"([^\"]+)\"/gi,\n  cl: null\n}];\n"],"sourceRoot":"/source/"}