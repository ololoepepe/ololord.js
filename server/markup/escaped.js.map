{"version":3,"sources":["markup/escaped.js"],"names":["Renderer","convertMonospace","_1","text","_2","_3","options","op","cl","type","CODE_SKIP","toHTML","convertNomarkup","convertPre","priority","markupModes","convert","escapable","pre"],"mappings":";;;;;;AAAA;;;;AACA;;IAAYA,Q;;;;;;AAEZ,SAASC,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4CC,OAA5C,EAAqD;AACnDA,UAAQC,EAAR,GAAa,yBAAb;AACAD,UAAQE,EAAR,GAAa,SAAb;AACAF,UAAQG,IAAR,GAAe,4BAAkBC,SAAjC;AACA,SAAOV,SAASW,MAAT,CAAgBR,IAAhB,CAAP;AACD;;AAED,SAASS,eAAT,CAAyBV,EAAzB,EAA6BC,IAA7B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2CC,OAA3C,EAAoD;AAClDA,UAAQG,IAAR,GAAe,4BAAkBC,SAAjC;AACA,SAAOV,SAASW,MAAT,CAAgBR,IAAhB,CAAP;AACD;;AAED,SAASU,UAAT,CAAoBX,EAApB,EAAwBC,IAAxB,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,OAAtC,EAA+C;AAC7CA,UAAQC,EAAR,GAAa,OAAb;AACAD,UAAQE,EAAR,GAAa,QAAb;AACAF,UAAQG,IAAR,GAAe,4BAAkBC,SAAjC;AACA,SAAOP,IAAP;AACD;;kBAEc,CAAC;AACdW,YAAU,CADI;AAEdC,eAAa,CAAC,sBAAD,CAFC;AAGdC,WAASf,gBAHK;AAIdM,MAAI,IAJU;AAKdU,aAAW;AALG,CAAD,EAMZ;AACDH,YAAU,GADT;AAEDC,eAAa,CAAC,sBAAD,CAFZ;AAGDC,WAASJ,eAHR;AAIDL,MAAI,IAJH;AAKDU,aAAW;AALV,CANY,EAYZ;AACDH,YAAU,GADT;AAEDC,eAAa,CAAC,sBAAD,CAFZ;AAGDC,WAASH,UAHR;AAIDN,MAAI,iBAJH;AAKDC,MAAI,gBALH;AAMDS,aAAW,IANV;AAODC,OAAK;AAPJ,CAZY,EAoBZ;AACDJ,YAAU,GADT;AAEDC,eAAa,CAAC,SAAD,CAFZ;AAGDC,WAASH,UAHR;AAIDN,MAAI,OAJH;AAKDC,MAAI,QALH;AAMDS,aAAW,IANV;AAODC,OAAK;AAPJ,CApBY,EA4BZ;AACDJ,YAAU,IADT;AAEDC,eAAa,CAAC,SAAD,CAFZ;AAGDC,WAASf,gBAHR;AAIDM,MAAI,KAJH;AAKDC,MAAI;AALH,CA5BY,EAkCZ;AACDM,YAAU,IADT;AAEDC,eAAa,CAAC,SAAD,CAFZ;AAGDC,WAASJ,eAHR;AAIDL,MAAI,KAJH;AAKDC,MAAI;AALH,CAlCY,C","file":"escaped.js","sourcesContent":["import ProcessingContext from './processing-context';\nimport * as Renderer from '../core/renderer';\n\nfunction convertMonospace(_1, text, _2, _3, options) {\n  options.op = \"<font face='monospace'>\";\n  options.cl = '</font>';\n  options.type = ProcessingContext.CODE_SKIP;\n  return Renderer.toHTML(text);\n}\n\nfunction convertNomarkup(_1, text, _2, _3, options) {\n  options.type = ProcessingContext.CODE_SKIP;\n  return Renderer.toHTML(text);\n}\n\nfunction convertPre(_1, text, _2, _3, options) {\n  options.op = '<pre>';\n  options.cl = '</pre>';\n  options.type = ProcessingContext.CODE_SKIP;\n  return text;\n}\n\nexport default [{\n  priority: 0,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertMonospace,\n  op: '``',\n  escapable: true,\n}, {\n  priority: 100,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertNomarkup,\n  op: \"''\",\n  escapable: true,\n}, {\n  priority: 200,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertPre,\n  op: /\\/\\\\-\\\\-pre\\s+/g,\n  cl: /\\s+\\\\\\\\\\\\-\\\\-/g,\n  escapable: true,\n  pre: true\n}, {\n  priority: 700,\n  markupModes: ['BB_CODE'],\n  convert: convertPre,\n  op: '[pre]',\n  cl: '[/pre]',\n  escapable: true,\n  pre: true\n}, {\n  priority: 1100,\n  markupModes: ['BB_CODE'],\n  convert: convertMonospace,\n  op: '[m]',\n  cl: '[/m]'\n}, {\n  priority: 1200,\n  markupModes: ['BB_CODE'],\n  convert: convertNomarkup,\n  op: '[n]',\n  cl: '[/n]'\n}];\n"]}