{"version":3,"sources":["markup/escaped.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;IAAY,Q;;;;;;AAEZ,SAAS,gBAAT,CAA0B,EAA1B,EAA8B,IAA9B,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,OAA5C,EAAqD;AACnD,UAAQ,EAAR,GAAa,yBAAb;AACA,UAAQ,EAAR,GAAa,SAAb;AACA,UAAQ,IAAR,GAAe,4BAAkB,SAAjC;AACA,SAAO,SAAS,MAAT,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAS,eAAT,CAAyB,EAAzB,EAA6B,IAA7B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,OAA3C,EAAoD;AAClD,UAAQ,IAAR,GAAe,4BAAkB,SAAjC;AACA,SAAO,SAAS,MAAT,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAS,UAAT,CAAoB,EAApB,EAAwB,IAAxB,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,OAAtC,EAA+C;AAC7C,UAAQ,EAAR,GAAa,OAAb;AACA,UAAQ,EAAR,GAAa,QAAb;AACA,UAAQ,IAAR,GAAe,4BAAkB,SAAjC;AACA,SAAO,IAAP;AACD;;kBAEc,CAAC;AACd,YAAU,CADI;AAEd,eAAa,CAAC,sBAAD,CAFC;AAGd,WAAS,gBAHK;AAId,MAAI,IAJU;AAKd,aAAW;AALG,CAAD,EAMZ;AACD,YAAU,GADT;AAED,eAAa,CAAC,sBAAD,CAFZ;AAGD,WAAS,eAHR;AAID,MAAI,IAJH;AAKD,aAAW;AALV,CANY,EAYZ;AACD,YAAU,GADT;AAED,eAAa,CAAC,sBAAD,CAFZ;AAGD,WAAS,UAHR;AAID,MAAI,iBAJH;AAKD,MAAI,gBALH;AAMD,aAAW,IANV;AAOD,OAAK;AAPJ,CAZY,EAoBZ;AACD,YAAU,GADT;AAED,eAAa,CAAC,SAAD,CAFZ;AAGD,WAAS,UAHR;AAID,MAAI,OAJH;AAKD,MAAI,QALH;AAMD,aAAW,IANV;AAOD,OAAK;AAPJ,CApBY,EA4BZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,SAAD,CAFZ;AAGD,WAAS,gBAHR;AAID,MAAI,KAJH;AAKD,MAAI;AALH,CA5BY,EAkCZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,SAAD,CAFZ;AAGD,WAAS,eAHR;AAID,MAAI,KAJH;AAKD,MAAI;AALH,CAlCY,C","file":"markup/escaped.js","sourcesContent":["import ProcessingContext from './processing-context';\nimport * as Renderer from '../core/renderer';\n\nfunction convertMonospace(_1, text, _2, _3, options) {\n  options.op = \"<font face='monospace'>\";\n  options.cl = '</font>';\n  options.type = ProcessingContext.CODE_SKIP;\n  return Renderer.toHTML(text);\n}\n\nfunction convertNomarkup(_1, text, _2, _3, options) {\n  options.type = ProcessingContext.CODE_SKIP;\n  return Renderer.toHTML(text);\n}\n\nfunction convertPre(_1, text, _2, _3, options) {\n  options.op = '<pre>';\n  options.cl = '</pre>';\n  options.type = ProcessingContext.CODE_SKIP;\n  return text;\n}\n\nexport default [{\n  priority: 0,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertMonospace,\n  op: '``',\n  escapable: true,\n}, {\n  priority: 100,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertNomarkup,\n  op: \"''\",\n  escapable: true,\n}, {\n  priority: 200,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertPre,\n  op: /\\/\\\\-\\\\-pre\\s+/g,\n  cl: /\\s+\\\\\\\\\\\\-\\\\-/g,\n  escapable: true,\n  pre: true\n}, {\n  priority: 700,\n  markupModes: ['BB_CODE'],\n  convert: convertPre,\n  op: '[pre]',\n  cl: '[/pre]',\n  escapable: true,\n  pre: true\n}, {\n  priority: 1100,\n  markupModes: ['BB_CODE'],\n  convert: convertMonospace,\n  op: '[m]',\n  cl: '[/m]'\n}, {\n  priority: 1200,\n  markupModes: ['BB_CODE'],\n  convert: convertNomarkup,\n  op: '[n]',\n  cl: '[/n]'\n}];\n"],"sourceRoot":"/source/"}