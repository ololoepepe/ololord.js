{"version":3,"sources":["markup/processing-context.js"],"names":["Renderer","Tools","ProcessingContext","s","pos","length","n","i","text","escapableSequencesRegExp","ind","lastIndexOf","isEscaped","remove","boardName","referencedPosts","deletedPost","skipList","rx","start","escapable","option","test","indexOf","isIn","some","inf","index","lastIndex","match","exec","type","NO_SKIP","CODE_SKIP","x","txt","HTML_SKIP","info","found","splice","unshift","substr","correction","dlength","postProcessors","last","forEach","withoutEscaped","toHTML","reduce","acc","processor"],"mappings":"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","file":"processing-context.js","sourcesContent":["import * as Renderer from '../core/renderer';\nimport * as Tools from '../helpers/tools';\n\nexport default class ProcessingContext {\n  static get NO_SKIP() { return 'NO_SKIP'; }\n  static get HTML_SKIP() { return 'HTML_SKIP'; }\n  static get CODE_SKIP() { return 'CODE_SKIP'; }\n\n  static isEscaped(s, pos) {\n    if (pos <= 0 || pos >= s.length) {\n      return false;\n    }\n    let n = 0;\n    let i = pos - 1;\n    while (i >= 0 && s[i] === '\\\\') {\n      ++n;\n      --i;\n    }\n    return (n % 2);\n  }\n\n  static withoutEscaped(text, escapableSequencesRegExp) {\n    if (!escapableSequencesRegExp) {\n      return text;\n    }\n    let ind = text.lastIndexOf(escapableSequencesRegExp);\n    while (ind >= 0) {\n      if (ProcessingContext.isEscaped(text, ind)) {\n        text.remove(ind - 1, 1);\n        ind = text.lastIndexOf(escapableSequencesRegExp, ind - text.length - 3);\n        continue;\n      }\n      ind = text.lastIndexOf(escapableSequencesRegExp, ind - text.length - 2);\n    }\n    return text;\n  }\n\n  constructor(text, boardName, referencedPosts, deletedPost) {\n    this.boardName = boardName;\n    this.deletedPost = deletedPost;\n    this.referencedPosts = referencedPosts;\n    this.text = text;\n    this.skipList = [];\n  }\n\n  find(rx, start, escapable) {\n    start = Tools.option(start, 'number', 0, { test: (s) => { return s > 0; } });\n    if (typeof rx === 'string') {\n      let ind = this.text.indexOf(rx, start);\n      while (ind >= 0) {\n        let isIn = this.skipList.some((inf) => {\n          if (ind >= inf.start && ind < (inf.start + inf.length)) {\n            ind = this.text.indexOf(rx, inf.start + inf.length);\n            return true;\n          }\n        });\n        if (!isIn) {\n          if (escapable && ProcessingContext.isEscaped(this.text, ind)) {\n            ind = this.text.indexOf(rx, ind + 1);\n          } else {\n            return {\n              0: rx,\n              index: ind\n            };\n          }\n        }\n      }\n    } else {\n      rx.lastIndex = start;\n      let match = rx.exec(this.text);\n      while (match) {\n        let isIn = this.skipList.some((inf) => {\n          if (match && match.index >= inf.start && match.index < (inf.start + inf.length)) {\n            rx.lastIndex = inf.start + inf.length;\n            match = rx.exec(this.text);\n            return true;\n          }\n        });\n        if (!isIn && match) {\n          if (escapable && ProcessingContext.isEscaped(this.text, match.index)) {\n            rx.lastIndex = match.index + 1;\n            match = rx.exec(this.text);\n          } else {\n            return match;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  isIn(start, length, type) {\n    if (start < 0 || length <= 0 || (start + length) > this.text.length || ProcessingContext.NO_SKIP === type) {\n      return false;\n    }\n    type = type || ProcessingContext.CODE_SKIP;\n    for (let i = 0; i < this.skipList.length; ++i) {\n      let inf = this.skipList[i];\n      if (inf.type !== type) {\n        continue;\n      }\n      let x = start;\n      while (x < start + length) {\n        if (x >= inf.start && x <= (inf.start + inf.length)) {\n          return true;\n        }\n        ++x;\n      }\n    }\n    return false;\n  }\n\n  insert(start, txt, type) {\n    if (start < 0 || txt.length <= 0 || start > this.text.length) {\n      return;\n    }\n    type = type || ProcessingContext.HTML_SKIP;\n    let info = {\n      start: start,\n      length: txt.length,\n      type: type\n    };\n    let found = false;\n    for (let i = this.skipList.length - 1; i >= 0; --i) {\n      let inf = this.skipList[i];\n      if (start > inf.start) {\n        if (ProcessingContext.NO_SKIP !== type) {\n          this.skipList.splice(i + 1, 0, info);\n        }\n        found = true;\n        break;\n      }\n      inf.start += txt.length;\n    }\n    if (!found && ProcessingContext.NO_SKIP !== type) {\n      this.skipList.unshift(info);\n    }\n    this.text = this.text.substr(0, start) + txt + this.text.substr(start);\n  }\n\n  replace(start, length, txt, correction, type) {\n    if (start < 0 || length <= 0 || (txt.length < 1) || (length + start) > this.text.length) {\n      return;\n    }\n    type = type || ProcessingContext.HTML_SKIP;\n    let info = {\n      start: start,\n      length: txt.length,\n      type: type\n    };\n    let dlength = txt.length - length;\n    let found = false;\n    for (let i = this.skipList.length - 1; i >= 0; --i) {\n      let inf = this.skipList[i];\n      if (start >= inf.start) {\n        if (ProcessingContext.NO_SKIP !== type) {\n          this.skipList.splice(i + 1, 0, info);\n        }\n        found = true;\n        break;\n      }\n      if (inf.start < (start + length)) {\n        inf.start -= correction;\n      } else {\n        inf.start += dlength;\n      }\n    }\n    if (!found && ProcessingContext.NO_SKIP !== type) {\n      this.skipList.unshift(info);\n    }\n    this.text = this.text.substr(0, start) + txt + this.text.substr(start + length);\n  }\n\n  toHTML(escapableSequencesRegExp, postProcessors) {\n    let s = '';\n    let last = 0;\n    this.skipList.forEach((inf) => {\n      let txt = ProcessingContext.withoutEscaped(this.text.substr(last, inf.start - last), escapableSequencesRegExp);\n      s += Renderer.toHTML(txt);\n      s += this.text.substr(inf.start, inf.length);\n      last = inf.start + inf.length;\n    });\n    s += Renderer.toHTML(this.text.substr(last));\n    return postProcessors.reduce((acc, processor) => { return processor(acc); }, s);\n  }\n}\n"]}