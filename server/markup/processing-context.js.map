{"version":3,"sources":["markup/processing-context.js"],"names":[],"mappings":"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","file":"markup/processing-context.js","sourcesContent":["import * as Renderer from '../core/renderer';\nimport * as Tools from '../helpers/tools';\n\nexport default class ProcessingContext {\n  static get NO_SKIP() { return 'NO_SKIP'; }\n  static get HTML_SKIP() { return 'HTML_SKIP'; }\n  static get CODE_SKIP() { return 'CODE_SKIP'; }\n\n  static isEscaped(s, pos) {\n    if (pos <= 0 || pos >= s.length) {\n      return false;\n    }\n    let n = 0;\n    let i = pos - 1;\n    while (i >= 0 && s[i] === '\\\\') {\n      ++n;\n      --i;\n    }\n    return (n % 2);\n  }\n\n  static withoutEscaped(text, escapableSequencesRegExp) {\n    if (!escapableSequencesRegExp) {\n      return text;\n    }\n    let ind = text.lastIndexOf(escapableSequencesRegExp);\n    while (ind >= 0) {\n      if (ProcessingContext.isEscaped(text, ind)) {\n        text.remove(ind - 1, 1);\n        ind = text.lastIndexOf(escapableSequencesRegExp, ind - text.length - 3);\n        continue;\n      }\n      ind = text.lastIndexOf(escapableSequencesRegExp, ind - text.length - 2);\n    }\n    return text;\n  }\n\n  constructor(text, boardName, referencedPosts, deletedPost) {\n    this.boardName = boardName;\n    this.deletedPost = deletedPost;\n    this.referencedPosts = referencedPosts;\n    this.text = text;\n    this.skipList = [];\n  }\n\n  find(rx, start, escapable) {\n    start = Tools.option(start, 'number', 0, { test: (s) => { return s > 0; } });\n    if (typeof rx === 'string') {\n      let ind = this.text.indexOf(rx, start);\n      while (ind >= 0) {\n        let isIn = this.skipList.some((inf) => {\n          if (ind >= inf.start && ind < (inf.start + inf.length)) {\n            ind = this.text.indexOf(rx, inf.start + inf.length);\n            return true;\n          }\n        });\n        if (!isIn) {\n          if (escapable && ProcessingContext.isEscaped(this.text, ind)) {\n            ind = this.text.indexOf(rx, ind + 1);\n          } else {\n            return {\n              0: rx,\n              index: ind\n            };\n          }\n        }\n      }\n    } else {\n      rx.lastIndex = start;\n      let match = rx.exec(this.text);\n      while (match) {\n        let isIn = this.skipList.some((inf) => {\n          if (match && match.index >= inf.start && match.index < (inf.start + inf.length)) {\n            rx.lastIndex = inf.start + inf.length;\n            match = rx.exec(this.text);\n            return true;\n          }\n        });\n        if (!isIn && match) {\n          if (escapable && ProcessingContext.isEscaped(this.text, match.index)) {\n            rx.lastIndex = match.index + 1;\n            match = rx.exec(this.text);\n          } else {\n            return match;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  isIn(start, length, type) {\n    if (start < 0 || length <= 0 || (start + length) > this.text.length || ProcessingContext.NO_SKIP === type) {\n      return false;\n    }\n    type = type || ProcessingContext.CODE_SKIP;\n    for (let i = 0; i < this.skipList.length; ++i) {\n      let inf = this.skipList[i];\n      if (inf.type !== type) {\n        continue;\n      }\n      let x = start;\n      while (x < start + length) {\n        if (x >= inf.start && x <= (inf.start + inf.length)) {\n          return true;\n        }\n        ++x;\n      }\n    }\n    return false;\n  }\n\n  insert(start, txt, type) {\n    if (start < 0 || txt.length <= 0 || start > this.text.length) {\n      return;\n    }\n    type = type || ProcessingContext.HTML_SKIP;\n    let info = {\n      start: start,\n      length: txt.length,\n      type: type\n    };\n    let found = false;\n    for (let i = this.skipList.length - 1; i >= 0; --i) {\n      let inf = this.skipList[i];\n      if (start > inf.start) {\n        if (ProcessingContext.NO_SKIP !== type) {\n          this.skipList.splice(i + 1, 0, info);\n        }\n        found = true;\n        break;\n      }\n      inf.start += txt.length;\n    }\n    if (!found && ProcessingContext.NO_SKIP !== type) {\n      this.skipList.unshift(info);\n    }\n    this.text = this.text.substr(0, start) + txt + this.text.substr(start);\n  }\n\n  replace(start, length, txt, correction, type) {\n    if (start < 0 || length <= 0 || (txt.length < 1) || (length + start) > this.text.length) {\n      return;\n    }\n    type = type || ProcessingContext.HTML_SKIP;\n    let info = {\n      start: start,\n      length: txt.length,\n      type: type\n    };\n    let dlength = txt.length - length;\n    let found = false;\n    for (let i = this.skipList.length - 1; i >= 0; --i) {\n      let inf = this.skipList[i];\n      if (start >= inf.start) {\n        if (ProcessingContext.NO_SKIP !== type) {\n          this.skipList.splice(i + 1, 0, info);\n        }\n        found = true;\n        break;\n      }\n      if (inf.start < (start + length)) {\n        inf.start -= correction;\n      } else {\n        inf.start += dlength;\n      }\n    }\n    if (!found && ProcessingContext.NO_SKIP !== type) {\n      this.skipList.unshift(info);\n    }\n    this.text = this.text.substr(0, start) + txt + this.text.substr(start + length);\n  }\n\n  toHTML(escapableSequencesRegExp, postProcessors) {\n    let s = '';\n    let last = 0;\n    this.skipList.forEach((inf) => {\n      let txt = ProcessingContext.withoutEscaped(this.text.substr(last, inf.start - last), escapableSequencesRegExp);\n      s += Renderer.toHTML(txt);\n      s += this.text.substr(inf.start, inf.length);\n      last = inf.start + inf.length;\n    });\n    s += Renderer.toHTML(this.text.substr(last));\n    return postProcessors.reduce((acc, processor) => { return processor(acc); }, s);\n  }\n}\n"],"sourceRoot":"/source/"}