{"version":3,"sources":["markup/lists.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAM,aAAa;AACjB,KAAG,MADc;AAEjB,KAAG,QAFc;AAGjB,KAAG;AAHc,CAAnB;;AAMA,SAAS,oBAAT,CAA8B,EAA9B,EAAkC,IAAlC,EAAwC,MAAxC,EAAgD,EAAhD,EAAoD,OAApD,EAA6D;AAC3D,MAAI,IAAI,OAAO,CAAP,CAAR;AACA,MAAI,CAAC,CAAL,EAAQ;AACN,QAAI,MAAJ;AACD,GAFD,MAEO,IAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AACzB,QAAI,WAAW,CAAX,CAAJ;AACD;AACD,MAAI,CAAC,CAAL,EAAQ;AACN,WAAO,EAAP;AACD;AACD,UAAQ,IAAR,GAAe,4BAAkB,OAAjC;AACA,UAAQ,EAAR,mBAA0B,CAA1B;AACA,UAAQ,EAAR,GAAa,OAAb;AACA,SAAO,IAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,EAA5B,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,EAA9C,EAAkD,OAAlD,EAA2D;AACzD,MAAI,IAAI,OAAO,CAAP,CAAR;AACA,MAAI,CAAC,CAAL,EAAQ;AACN,QAAI,GAAJ;AACD;AACD,UAAQ,IAAR,GAAe,4BAAkB,OAAjC;AACA,UAAQ,EAAR,mBAA0B,CAA1B;AACA,UAAQ,EAAR,GAAa,OAAb;AACA,SAAO,IAAP;AACD;;AAED,SAAS,eAAT,CAAyB,EAAzB,EAA6B,IAA7B,EAAmC,MAAnC,EAA2C,EAA3C,EAA+C,OAA/C,EAAwD;AACtD,UAAQ,IAAR,GAAe,4BAAkB,OAAjC;AACA,UAAQ,EAAR,GAAa,KAAb;AACA,MAAI,OAAO,CAAP,CAAJ,EAAe;AACb,YAAQ,EAAR,kBAAyB,OAAO,CAAP,CAAzB;AACD;AACD,UAAQ,EAAR,IAAc,GAAd;AACA,UAAQ,EAAR,GAAa,OAAb;AACA,SAAO,IAAP;AACD;;AAED,SAAS,aAAT,CAAuB,CAAvB,EAA0B;AACxB,MAAI,EAAE,OAAF,CAAU,gCAAV,EAA4C,UAA5C,CAAJ;AACA,MAAI,EAAE,OAAF,CAAU,kCAAV,EAA8C,WAA9C,CAAJ;AACA,MAAI,EAAE,OAAF,CAAU,kCAAV,EAA8C,WAA9C,CAAJ;AACA,MAAI,EAAE,OAAF,CAAU,8BAAV,EAA0C,SAA1C,CAAJ;AACA,MAAI,KAAK,2DAAT;AACA,MAAI,QAAQ,GAAG,IAAH,CAAQ,CAAR,CAAZ;AACA,SAAO,KAAP,EAAc;AACZ,QAAI,qBAAkB,MAAM,CAAN,CAAlB,WAAJ;AACA,QAAI,EAAE,MAAF,CAAS,CAAT,EAAY,MAAM,KAAlB,IAA2B,EAA3B,GAAgC,EAAE,MAAF,CAAS,MAAM,KAAN,GAAc,MAAM,CAAN,EAAS,MAAhC,CAApC;AACA,OAAG,SAAH,GAAe,GAAG,MAAlB;AACA,YAAQ,GAAG,IAAH,CAAQ,CAAR,CAAR;AACD;AACD,SAAO,CAAP;AACD;;kBAEc,CAAC;AACd,YAAU,IADI;AAEd,eAAa,CAAC,SAAD,CAFC;AAGd,WAAS,oBAHK;AAId,MAAI,uDAJU;AAKd,MAAI,OALU;AAMd,YAAU;AANI,CAAD,EAOZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,SAAD,CAFZ;AAGD,WAAS,kBAHR;AAID,MAAI,wCAJH;AAKD,MAAI,OALH;AAMD,YAAU;AANT,CAPY,EAcZ;AACD,YAAU,IADT;AAED,eAAa,CAAC,SAAD,CAFZ;AAGD,WAAS,eAHR;AAID,MAAI,mCAJH;AAKD,MAAI,OALH;AAMD,YAAU,IANT;AAOD,iBAAe;AAPd,CAdY,C","file":"markup/lists.js","sourcesContent":["import ProcessingContext from './processing-context';\n\nconst LIST_TYPES = {\n  d: 'disc',\n  c: 'circle',\n  s: 'square'\n};\n\nfunction convertUnorderedList(_1, text, matchs, _2, options) {\n  let t = matchs[2];\n  if (!t) {\n    t = 'disc';\n  } else if (t.length === 1) {\n    t = LIST_TYPES[t];\n  }\n  if (!t) {\n    return '';\n  }\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = `<ul type='${t}'>`;\n  options.cl = '</ul>';\n  return text;\n}\n\nfunction convertOrderedList(_1, text, matchs, _2, options) {\n  let t = matchs[2];\n  if (!t) {\n    t = '1';\n  }\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = `<ol type='${t}'>`;\n  options.cl = '</ol>';\n  return text;\n}\n\nfunction convertListItem(_1, text, matchs, _2, options) {\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = '<li';\n  if (matchs[2]) {\n    options.op += ` value='${matchs[2]}'`;\n  }\n  options.op += '>';\n  options.cl = '</li>';\n  return text;\n}\n\nfunction postProcessor(s) {\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<li/g, '</li><li');\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<\\/ul/g, '</li></ul');\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<\\/ol/g, '</li></ol');\n  s = s.replace(/<ol>(\\s|&nbsp;|<br \\/>)+<li/g, '<ol><li');\n  let rx = /<ul type\\=\"(disc|circle|square)\">(\\s|&nbsp;|<br \\/>)+<li/g;\n  let match = rx.exec(s);\n  while (match) {\n    let ns = `<ul type='${match[1]}'><li`;\n    s = s.substr(0, match.index) + ns + s.substr(match.index + match[0].length);\n    rx.lastIndex = ns.length;\n    match = rx.exec(s);\n  }\n  return s;\n}\n\nexport default [{\n  priority: 4600,\n  markupModes: ['BB_CODE'],\n  convert: convertUnorderedList,\n  op: /\\[ul(\\s+type\\=\"?(disc|circle|square|d|c|s)\"?)?\\s*\\]/gi,\n  cl: '[/ul]',\n  nestable: true\n}, {\n  priority: 4700,\n  markupModes: ['BB_CODE'],\n  convert: convertOrderedList,\n  op: /\\[ol(\\s+type\\=\"?(A|a|I|i|1)\"?)?\\s*\\]/gi,\n  cl: '[/ol]',\n  nestable: true\n}, {\n  priority: 4800,\n  markupModes: ['BB_CODE'],\n  convert: convertListItem,\n  op: /\\[li(\\s+value\\=\"?(\\d+)\"?\\s*)?\\]/gi,\n  cl: '[/li]',\n  nestable: true,\n  postProcessor: postProcessor\n}];\n"],"sourceRoot":"/source/"}