{"version":3,"sources":["markup/lists.js"],"names":["LIST_TYPES","d","c","s","convertUnorderedList","_1","text","matchs","_2","options","t","length","type","NO_SKIP","op","cl","convertOrderedList","convertListItem","postProcessor","replace","rx","match","exec","ns","substr","index","lastIndex","priority","markupModes","convert","nestable"],"mappings":"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","file":"lists.js","sourcesContent":["import ProcessingContext from './processing-context';\n\nconst LIST_TYPES = {\n  d: 'disc',\n  c: 'circle',\n  s: 'square'\n};\n\nfunction convertUnorderedList(_1, text, matchs, _2, options) {\n  let t = matchs[2];\n  if (!t) {\n    t = 'disc';\n  } else if (t.length === 1) {\n    t = LIST_TYPES[t];\n  }\n  if (!t) {\n    return '';\n  }\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = `<ul type='${t}'>`;\n  options.cl = '</ul>';\n  return text;\n}\n\nfunction convertOrderedList(_1, text, matchs, _2, options) {\n  let t = matchs[2];\n  if (!t) {\n    t = '1';\n  }\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = `<ol type='${t}'>`;\n  options.cl = '</ol>';\n  return text;\n}\n\nfunction convertListItem(_1, text, matchs, _2, options) {\n  options.type = ProcessingContext.NO_SKIP;\n  options.op = '<li';\n  if (matchs[2]) {\n    options.op += ` value='${matchs[2]}'`;\n  }\n  options.op += '>';\n  options.cl = '</li>';\n  return text;\n}\n\nfunction postProcessor(s) {\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<li/g, '</li><li');\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<\\/ul/g, '</li></ul');\n  s = s.replace(/<\\/li>(\\s|&nbsp;|<br \\/>)+<\\/ol/g, '</li></ol');\n  s = s.replace(/<ol>(\\s|&nbsp;|<br \\/>)+<li/g, '<ol><li');\n  let rx = /<ul type\\=\"(disc|circle|square)\">(\\s|&nbsp;|<br \\/>)+<li/g;\n  let match = rx.exec(s);\n  while (match) {\n    let ns = `<ul type='${match[1]}'><li`;\n    s = s.substr(0, match.index) + ns + s.substr(match.index + match[0].length);\n    rx.lastIndex = ns.length;\n    match = rx.exec(s);\n  }\n  return s;\n}\n\nexport default [{\n  priority: 4600,\n  markupModes: ['BB_CODE'],\n  convert: convertUnorderedList,\n  op: /\\[ul(\\s+type\\=\"?(disc|circle|square|d|c|s)\"?)?\\s*\\]/gi,\n  cl: '[/ul]',\n  nestable: true\n}, {\n  priority: 4700,\n  markupModes: ['BB_CODE'],\n  convert: convertOrderedList,\n  op: /\\[ol(\\s+type\\=\"?(A|a|I|i|1)\"?)?\\s*\\]/gi,\n  cl: '[/ol]',\n  nestable: true\n}, {\n  priority: 4800,\n  markupModes: ['BB_CODE'],\n  convert: convertListItem,\n  op: /\\[li(\\s+value\\=\"?(\\d+)\"?\\s*)?\\]/gi,\n  cl: '[/li]',\n  nestable: true,\n  postProcessor: postProcessor\n}];\n"]}