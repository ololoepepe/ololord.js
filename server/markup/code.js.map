{"version":3,"sources":["markup/code.js"],"names":[],"mappings":"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","file":"markup/code.js","sourcesContent":["import _ from 'underscore';\nimport Highlight from 'highlight.js';\nimport MathJax from 'mathjax-node/lib/mj-single.js';\n\nimport ProcessingContext from './processing-context';\nimport * as Tools from '../helpers/tools';\nimport * as MiscModel from '../models/misc';\n\nHighlight.configure({\n  tabReplace: '    ',\n  useBR: true\n});\n\nMathJax.config({ MathJax: {} });\nMathJax.start();\n\nlet langs = Highlight.listLanguages().map((lang) => {\n  let aliases = Highlight.getLanguage(lang).aliases || [];\n  aliases.unshift(lang);\n  return aliases;\n});\nlangs = _(langs).flatten().map(lang => Tools.escapeRegExp(lang)).join('|');\n\nfunction markupCode(text, lang) {\n  let result = lang ? Highlight.highlight(lang, text, true) : Highlight.highlightAuto(text);\n  text = result.value;\n  lang = result.language || lang;\n  let langClass = lang ? ` ${lang}` : '';\n  let langNames = MiscModel.codeLangNames();\n  let langName = langNames.hasOwnProperty(lang) ? langNames[lang] : lang;\n  return {\n    op: `<div class='code-block${langClass} hljs js-with-tooltip' title='${langName || ''}'>`,\n    cl: '</div>',\n    text: Highlight.fixMarkup(text)\n  };\n}\n\nasync function markupLaTeX(text, inline) {\n  return await new Promise(function(resolve, reject) {\n    MathJax.typeset({\n      math: text,\n      format: inline ? 'inline-TeX' : 'TeX',\n      svg: true\n    }, (data) => {\n      if (data.errors) {\n        return reject(data.errors[0] || data.errors);\n      }\n      let tagName = inline ? 'span' : 'div';\n      resolve(`<${tagName} class='latex-${inline ? 'inline' : 'block'}'>${data.svg}</${tagName}>`);\n    });\n  });\n}\n\nfunction convertCode(_1, text, matchs, _2, options) {\n  options.type = ProcessingContext.CODE_SKIP;\n  let result = markupCode(text, matchs[1]);\n  options.op = result.op;\n  options.cl = result.cl;\n  return result.text;\n}\n\nfunction convertLatex(inline, _1, text, _2, _3, options) {\n  options.type = ProcessingContext.HTML_SKIP;\n  return markupLaTeX(text, inline);\n}\n\nfunction checkLangsMatch(info, matchs, matche) {\n  return matchs && matche && matchs[1] && matchs[1] === matche[1];\n}\n\nlet elements = [{\n  priority: 300,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertCode,\n  op: new RegExp(`/\\\\-\\\\-code\\\\s+(${langs})\\\\s+`, 'gi'),\n  cl: /\\s+\\\\\\\\\\\\-\\\\-/g\n}, {\n  priority: 400,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertLatex.bind(null, false),\n  op: '$$$'\n}, {\n  priority: 500,\n  markupModes: ['EXTENDED_WAKABA_MARK'],\n  convert: convertLatex.bind(null, true),\n  op: '$$'\n}, {\n  priority: 800,\n  markupModes: ['BB_CODE'],\n  convert: convertCode,\n  op: '[code]',\n  cl: '[/code]'\n}, {\n  priority: 900,\n  markupModes: ['BB_CODE'],\n  convert: convertCode,\n  op: new RegExp(`\\\\[code\\\\s+lang\\\\=\\\"?('${langs})\\\"?\\\\s*\\\\]`, 'gi'),\n  cl: '[/code]'\n}, {\n  priority: 1000,\n  markupModes: ['BB_CODE'],\n  convert: convertCode,\n  op: new RegExp(`\\\\[(${langs})\\\\]`, 'gi'),\n  cl: new RegExp(`\\\\[/(${langs})\\\\]`, 'gi'),\n  check: checkLangsMatch\n}, {\n  priority: 1300,\n  markupModes: ['BB_CODE'],\n  convert: convertLatex.bind(null, false),\n  op: '[latex]',\n  cl: '[/latex]'\n}, {\n  priority: 1400,\n  markupModes: ['BB_CODE'],\n  convert: convertLatex.bind(null, true),\n  op: '[l]',\n  cl: '[/l]'\n}];\n\nObject.defineProperty(elements, \"markupCode\", { value: markupCode });\nObject.defineProperty(elements, 'markupLaTeX', { value: markupLaTeX });\n\nexport default elements;\n"],"sourceRoot":"/source/"}