{"version":3,"sources":["storage/geolocation.js"],"names":[],"mappings":";;;;;;;sDAUA,iBAA2B,EAA3B;AAAA,QACM,IADN,EAaM,OAbN,EAiBM,IAjBN,EAkBM,KAlBN,EAmBM,SAnBN,EA0BM,MA1BN,EA+BM,MA/BN;AAAA;AAAA;AAAA;AAAA;AACM,gBADN,GACa;AACT,wBAAU,IADD;AAET,2BAAa,IAFJ;AAGT,2BAAa;AAHJ,aADb;;AAAA,gBAMO,EANP;AAAA;AAAA;AAAA;;AAOI,6BAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,yDAAhB,CAAV,CAAb;AAPJ,6CAQW,IARX;;AAAA;AAAA,gBAUO,EAVP;AAAA;AAAA;AAAA;;AAAA,6CAWW,IAXX;;AAAA;AAaM,mBAbN,GAagB,MAAM,cAAN,CAAqB,EAArB,CAbhB;;AAAA,gBAcO,OAdP;AAAA;AAAA;AAAA;;AAAA,6CAeW,IAfX;;AAAA;AAiBM,gBAjBN,GAiBa,MAAM,UAAN,CAAiB,EAAjB,CAjBb;AAkBM,iBAlBN,GAkBc,4FAlBd;AAmBM,qBAnBN,GAmBkB,GAAG,OAAH,CAAW,KAAX,CAnBlB;;AAoBE,sBAAU,IAAV,GAAiB,6BAAU,UAAU,GAApB,CAAjB;AACA,gBAAI,IAAJ,EAAU;AACR,wBAAU,0BAAO,IAAI,oBAAU,QAAd,CAAuB,IAAvB,EAA6B,UAA7B,GAA0C,QAA1C,EAAP,CAAV;AACD,aAFD,MAEO;AACL,wBAAU,0BAAO,IAAI,oBAAU,QAAd,CAAuB,OAAvB,EAAgC,UAAhC,GAA6C,QAA7C,EAAP,CAAV;AACD;AAzBH;AAAA,mBA0BqB,UAAU,IAAV,CAAe,QAAQ,QAAR,EAAf,CA1BrB;;AAAA;AA0BM,kBA1BN;;AA2BE,sBAAU,QAAV;;AA3BF,gBA4BO,MA5BP;AAAA;AAAA;AAAA;;AAAA,6CA6BW,IA7BX;;AAAA;AA+BM,kBA/BN;AAAA;;AAiCI,qBAAS,0BAAO,OAAO,MAAd,CAAT;AAjCJ;AAAA;;AAAA;AAAA;AAAA;;AAmCI,6BAAO,KAAP,CAAa,YAAI,KAAJ,eAAb;AAnCJ,6CAoCW,IApCX;;AAAA;AAAA,iBAsCM,OAAO,OAAP,CAAe,OAAf,CAtCN;AAAA;AAAA;AAAA;;AAAA,6CAuCW,IAvCX;;AAAA;AAyCE,iBAAK,QAAL,GAAgB,OAAO,QAAvB;AACA,iBAAK,WAAL,GAAmB,OAAO,WAA1B;AACA,iBAAK,WAAL,GAAmB,OAAO,WAA1B;AA3CF,6CA4CS,IA5CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,W;;;;;AAVf;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAY,K;;;;;;;;AAEZ,IAAI,KAAK,IAAT;;AAiDA,YAAY,UAAZ,6CAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACjB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC7B,iBAAK,IAAI,iBAAQ,QAAZ,CAAwB,SAAxB,oCAAkE,iBAAQ,aAA1E,EAAyF,UAAC,GAAD,EAAS;AACrG,kBAAI,GAAJ,EAAS;AACP,qBAAK,IAAL;AACA,iCAAO,KAAP,CAAa,IAAI,KAAJ,IAAa,GAA1B;AACA,iCAAO,KAAP,CAAa,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,8DAAhB,CAAV,CAAb;AACD;AACD;AACD,aAPI,CAAL;AAQD,WATK,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;kBAae,W","file":"storage/geolocation.js","sourcesContent":["import bigInt from 'big-integer';\nimport IPAddress from 'ip-address';\nimport promisify from 'promisify-node';\nimport SQLite3 from 'sqlite3';\n\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet db = null;\n\nasync function geolocation(ip) {\n  let info = {\n    cityName: null,\n    countryCode: null,\n    countryName: null\n  };\n  if (!db) {\n    Logger.error(new Error(Tools.translate('No geolocation database found. Geolocation is disabled.')));\n    return info;\n  }\n  if (!ip) {\n    return info;\n  }\n  let address = Tools.correctAddress(ip);\n  if (!address) {\n    return info;\n  }\n  let ipv4 = Tools.preferIPv4(ip);\n  let query = 'SELECT ipFrom, countryCode, countryName, cityName FROM ip2location WHERE ipTo >= ? LIMIT 1';\n  let statement = db.prepare(query);\n  statement.pget = promisify(statement.get);\n  if (ipv4) {\n    address = bigInt(new IPAddress.Address4(ipv4).bigInteger().toString());\n  } else {\n    address = bigInt(new IPAddress.Address6(address).bigInteger().toString());\n  }\n  let result = await statement.pget(address.toString());\n  statement.finalize();\n  if (!result) {\n    return info;\n  }\n  let ipFrom;\n  try {\n    ipFrom = bigInt(result.ipFrom);\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return info;\n  }\n  if (ipFrom.greater(address)) {\n    return info;\n  }\n  info.cityName = result.cityName;\n  info.countryCode = result.countryCode;\n  info.countryName = result.countryName;\n  return info;\n}\n\ngeolocation.initialize = async function() {\n  await new Promise((resolve) => {\n    db = new SQLite3.Database(`${__dirname}/../sqlite/ip2location.sqlite`, SQLite3.OPEN_READONLY, (err) => {\n      if (err) {\n        db = null;\n        Logger.error(err.stack || err);\n        Logger.error(new Error(Tools.translate('No geolocation database found. Geolocation will be disabled.')));\n      }\n      resolve();\n    });\n  });\n};\n\nexport default geolocation;\n"],"sourceRoot":"/source/"}