{"version":3,"sources":["storage/search.js"],"names":[],"mappings":";;;;;;;;sDAaO;AAAA,QAA2B,SAA3B,QAA2B,SAA3B;AAAA,QAAsC,UAAtC,QAAsC,UAAtC;AAAA,QAAkD,YAAlD,QAAkD,YAAlD;AAAA,QAAgE,SAAhE,QAAgE,SAAhE;AAAA,QAA2E,OAA3E,QAA2E,OAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEG,GAAG,KAAH,CAAS;AACb,qBAAO,UADM;AAEb,oBAAM,OAFO;AAGb,kBAAO,SAAP,SAAoB,UAHP;AAIb,oBAAM;AACJ,2BAAW,SADP;AAEJ,yBAAS,OAFL;AAGJ,2BAAW,SAHP;AAIJ,8BAAc;AAJV;AAJO,aAAT,CAFH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcH,6BAAO,KAAP,CAAa,YAAI,KAAJ,eAAb;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,S;;;;;;sDAkBf,kBAA4B,SAA5B,EAAuC,UAAvC;AAAA,QAEC,IAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEc,GAAG,GAAH,CAAO;AACtB,qBAAO,UADe;AAEtB,oBAAM,OAFgB;AAGtB,kBAAO,SAAP,SAAoB;AAHE,aAAP,CAFd;;AAAA;AAEC,gBAFD;AAAA,8CAOI,KAAK,OAPT;;AAAA;AAAA;AAAA;;AASH,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;AATG,8CAUI,EAAE,SAAS,EAAX,EAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,Y;;;;;;sDAcf,kBAA+B,SAA/B,EAA0C,UAA1C,EAAsD,WAAtD;AAAA,QAKC,IALD;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,OAAO,WAAP,KAAuB,UADtB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAKc,aAAa,SAAb,EAAwB,UAAxB,CALd;;AAAA;AAKC,gBALD;AAAA;AAAA,mBAMU,YAAY,IAAZ,CANV;;AAAA;AAMH,gBANG;AAAA;AAAA,mBAOG,GAAG,KAAH,CAAS;AACb,qBAAO,UADM;AAEb,oBAAM,OAFO;AAGb,kBAAO,SAAP,SAAoB,UAHP;AAIb,oBAAM;AAJO,aAAT,CAPH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcH,6BAAO,KAAP,CAAa,aAAI,KAAJ,gBAAb;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,e;;;;;;sDAmBf,kBAA+B,SAA/B,EAA0C,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACC,GAAG,MAAH,CAAU;AACd,qBAAO,UADO;AAEd,oBAAM,OAFQ;AAGd,kBAAO,SAAP,SAAoB;AAHN,aAAV,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,e;;;;;AAhEtB;;;;AAEA;;;;AACA;;;;;;;;AAEA,IAAI;AACF,MAAI,KAAK,IAAI,wBAAc,MAAlB,CAAyB,EAAE,MAAM,sBAAO,2BAAP,CAAR,EAAzB,CAAT;AACD,CAFD,CAEE,OAAO,GAAP,EAAY;AACZ,MAAI,KAAK,IAAT;AACD;;AAED,IAAM,aAAa,YAAnB","file":"storage/search.js","sourcesContent":["import Elasticsearch from 'elasticsearch';\n\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\n\ntry {\n  var es = new Elasticsearch.Client({ host: config('system.elasticsearch.host') });\n} catch (err) {\n  var es = null;\n}\n\nconst INDEX_NAME = 'ololord.js';\n\nexport async function indexPost({ boardName, postNumber, threadNumber, plainText, subject }) {\n  try {\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: {\n        plainText: plainText,\n        subject: subject,\n        boardName: boardName,\n        threadNumber: threadNumber\n      }\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function getPostIndex(boardName, postNumber) {\n  try {\n    let data = await es.get({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`\n    });\n    return data._source;\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return { _source: {} };\n  }\n}\n\nexport async function updatePostIndex(boardName, postNumber, transformer) {\n  if (typeof transformer !== 'function') {\n    return;\n  }\n  try {\n    let body = await getPostIndex(boardName, postNumber);\n    body = await transformer(body);\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: body\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\n\nexport async function removePostIndex(boardName, postNumber) {\n  await es.delete({\n    index: INDEX_NAME,\n    type: 'posts',\n    id: `${boardName}:${postNumber}`\n  });\n}\n"],"sourceRoot":"/source/"}