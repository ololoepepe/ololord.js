{"version":3,"sources":["storage/client-factory.js"],"names":[],"mappings":";;;;;;kBAiBe,UAAS,KAAT,EAAgB;AAC7B,MAAI,aAAa,sBAAO,oBAAP,CAAjB;AACA,MAAI,UAAU,CAAC,KAAf,EAAsB;AACpB,WAAO,MAAP;AACD;AACD,MAAI,qBAAE,OAAF,CAAU,UAAV,KAAyB,WAAW,MAAX,GAAoB,CAAjD,EAAoD;AAClD,QAAI,IAAI,IAAI,kBAAM,OAAV,CAAkB,UAAlB,EAA8B;AACpC,4BAAsB,sBAAO,mCAAP,EAA4C,UAAC,KAAD,EAAW;AACzE,eAAO,KAAK,GAAL,CAAS,MAAM,QAAQ,CAAvB,EAA0B,IAA1B,CAAP;AACH,OAFqB,CADc;AAIpC,wBAAkB,sBAAO,+BAAP,CAJkB;AAKpC,kBAAY,sBAAO,yBAAP,CALwB;AAMpC,uBAAiB,sBAAO,8BAAP,CANmB;AAOpC,4BAAsB,sBAAO,mCAAP,CAPc;AAQpC,+BAAyB,sBAAO,sCAAP,CARW;AASpC,4BAAsB,sBAAO,mCAAP,CATc;AAUpC,oBAAc;AAVsB,KAA9B,CAAR;AAYD,GAbD,MAaO;AACL,QAAI,IAAI,sBAAU,eAAV,CAAR;AACD;AACD,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,CAAT;AACD;AACD,SAAO,CAAP;AACD,C;;AA1CD;;;;AACA;;;;AAEA;;;;;;AAEA,IAAI,SAAS,IAAb;;AAEA,SAAS,aAAT,GAAyB;AACvB,SAAO;AACL,UAAM,sBAAO,mBAAP,CADD;AAEL,UAAM,sBAAO,mBAAP,CAFD;AAGL,YAAQ,sBAAO,qBAAP,CAHH;AAIL,cAAU,sBAAO,uBAAP,CAJL;AAKL,QAAI,sBAAO,iBAAP;AALC,GAAP;AAOC","file":"storage/client-factory.js","sourcesContent":["import _ from 'underscore';\nimport Redis from 'ioredis';\n\nimport config from '../helpers/config';\n\nlet client = null;\n\nfunction createOptions() {\n  return {\n    host: config('system.redis.host'),\n    port: config('system.redis.port'),\n    family: config('system.redis.family'),\n    password: config('system.redis.password'),\n    db: config('system.redis.db')\n  }\n  };\n\nexport default function(force) {\n  let redisNodes = config('system.redis.nodes');\n  if (client && !force) {\n    return client;\n  }\n  if (_.isArray(redisNodes) && redisNodes.length > 0) {\n    var c = new Redis.Cluster(redisNodes, {\n      clusterRetryStrategy: config('system.redis.clusterRetryStrategy', (times) => {\n          return Math.min(100 + times * 2, 2000);\n      }),\n      enableReadyCheck: config('system.redis.enableReadyCheck'),\n      scaleReads: config('system.redis.scaleReads'),\n      maxRedirections: config('system.redis.maxRedirections'),\n      retryDelayOnFailover: config('system.redis.retryDelayOnFailover'),\n      retryDelayOnClusterDown: config('system.redis.retryDelayOnClusterDown'),\n      retryDelayOnTryAgain: config('system.redis.retryDelayOnTryAgain'),\n      redisOptions: createOptions()\n    });\n  } else {\n    var c = new Redis(createOptions());\n  }\n  if (!client) {\n    client = c;\n  }\n  return c;\n}\n"],"sourceRoot":"/source/"}