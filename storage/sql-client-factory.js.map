{"version":3,"sources":["storage/sql-client-factory.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;IAAY,K;;;;;;;;AAEZ,IAAI,KAAK,IAAT;;AAEA,SAAS,SAAT,GAAqB;AACnB,SAAO,EAAP;AACD;;AAED,UAAU,UAAV;AAAA,sDAAuB,kBAAe,gBAAf;AAAA,QAcjB,MAdiB,EAkBjB,UAlBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACf,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,mBAAK,IAAI,iBAAQ,QAAZ,CAAwB,SAAxB,6BAA2D,UAAC,GAAD,EAAS;AACvE,oBAAI,GAAJ,EAAS;AACP,uBAAK,IAAL;AACA,yBAAO,GAAP;AACA;AACD;AACD;AACD,eAPI,CAAL;AAQD,aATK,CADe;;AAAA;AAAA,gBAWhB,gBAXgB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAcF,aAAG,IAAH,CAAW,SAAX,4BAdE;;AAAA;AAcjB,kBAdiB;;AAerB,qBAAS,OAAO,OAAP,CAAe,qBAAf,EAAsC,EAAtC,CAAT;AACA,qBAAS,OAAO,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAT;AACA,qBAAS,OAAO,OAAP,CAAe,SAAf,EAA0B,GAA1B,CAAT;AACI,sBAlBiB,GAkBJ,OAAO,KAAP,CAAa,GAAb,EAAkB,MAAlB,CAAyB,UAAC,SAAD;AAAA,qBAAe,CAAC,QAAQ,IAAR,CAAa,SAAb,CAAhB;AAAA,aAAzB,CAlBI;AAAA;AAAA,mBAmBf,MAAM,MAAN,CAAa,UAAb;AAAA,kEAAyB,iBAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAChB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC5C,6BAAG,GAAH,CAAO,SAAP,EAAkB,EAAlB,EAAsB,UAAC,GAAD,EAAS;AAC7B,gCAAI,GAAJ,EAAS;AACP,qCAAO,GAAP;AACD,6BAFD,MAEO;AACL;AACD;AACF,2BAND;AAOD,yBARY,CADgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAzB;;AAAA;AAAA;AAAA;AAAA,gBAnBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;kBAgCe,S","file":"storage/sql-client-factory.js","sourcesContent":["import FS from 'q-io/fs';\nimport SQLite3 from 'sqlite3';\n\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet db = null;\n\nfunction getClient() {\n  return db;\n}\n\ngetClient.initialize = async function(createFromSchema) {\n  await new Promise((resolve, reject) => {\n    db = new SQLite3.Database(`${__dirname}/../sqlite/main.sqlite`, (err) => {\n      if (err) {\n        db = null;\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n  if (!createFromSchema) {\n    return;\n  }\n  let schema = await FS.read(`${__dirname}/../sqlite/main.schema`);\n  schema = schema.replace(/\\/\\*(.|\\r?\\n)*\\*\\//g, '');\n  schema = schema.replace(/\\-\\-.*/g, '');\n  schema = schema.replace(/\\r?\\n+/g, ' ');\n  let statements = schema.split(';').filter((statement) => !/^\\s+$/.test(statement));\n  await Tools.series(statements, async function(statement) {\n    return await new Promise((resolve, reject) => {\n      db.run(statement, [], (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  });\n};\n\nexport default getClient;\n"],"sourceRoot":"/source/"}