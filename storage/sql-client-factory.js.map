{"version":3,"sources":["storage/sql-client-factory.js"],"names":[],"mappings":";;;;;;kBAwCe,UAAS,IAAT,EAAe;AAC5B,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,MAAP;AACD;AACD,MAAI,SAAS,QAAQ,GAAR,CAAY,IAAZ,CAAb;AACA,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,aAAa,IAAb,CAAT;AACA,YAAQ,GAAR,CAAY,IAAZ,EAAkB,MAAlB;AACD;AACD,SAAO,MAAP;AACD,C;;AAlDD;;;;AACA;;;;AAEA;;;;AACA;;IAAY,K;;;;;;;;AAEZ,IAAI,UAAU,IAAI,GAAJ,EAAd;;AAEA,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC1B,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,KAAK,IAAI,iBAAQ,QAAZ,CAAwB,SAAxB,mBAA+C,IAA/C,cAA8D,UAAC,GAAD,EAAS;AAC9E,UAAI,GAAJ,EAAS;AACP,eAAO,GAAP;AACA;AACD;AACD,SAAG,UAAH,6CAAgB;AAAA,YACV,IADU,EAEV,MAFU,EAGV,MAHU,EAOV,UAPU;AAAA;AAAA;AAAA;AAAA;AACV,oBADU,GACA,SADA,mBACuB,IADvB;AAAA;AAAA,uBAEK,aAAG,MAAH,CAAU,IAAV,CAFL;;AAAA;AAEV,sBAFU;AAAA;AAAA,uBAGK,aAAG,IAAH,CAAQ,IAAR,CAHL;;AAAA;AAGV,sBAHU;;AAId,yBAAS,OAAO,OAAP,CAAe,qBAAf,EAAsC,EAAtC,CAAT;AACA,yBAAS,OAAO,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAT;AACA,yBAAS,OAAO,OAAP,CAAe,SAAf,EAA0B,GAA1B,CAAT;AACI,0BAPU,GAOG,OAAO,KAAP,CAAa,GAAb,EAAkB,MAAlB,CAAyB,UAAC,SAAD;AAAA,yBAAe,CAAC,QAAQ,IAAR,CAAa,SAAb,CAAhB;AAAA,iBAAzB,CAPH;AAAA;AAAA,uBAQR,MAAM,MAAN,CAAa,UAAb;AAAA,sEAAyB,iBAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAChB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC5C,iCAAG,GAAH,CAAO,SAAP,EAAkB,EAAlB,EAAsB,UAAC,GAAD,EAAS;AAC7B,oCAAI,GAAJ,EAAS;AACP,yCAAO,GAAP;AACD,iCAFD,MAEO;AACL;AACD;AACF,+BAND;AAOD,6BARY,CADgB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAzB;;AAAA;AAAA;AAAA;AAAA,oBARQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;AAoBA,cAAQ,EAAR;AACD,KA1BQ,CAAT;AA2BD,GA5BM,CAAP;AA6BD","file":"storage/sql-client-factory.js","sourcesContent":["import FS from 'q-io/fs';\nimport SQLite3 from 'sqlite3';\n\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nlet clients = new Map();\n\nfunction createClient(name) {\n  return new Promise((resolve, reject) => {\n    let db = new SQLite3.Database(`${__dirname}/../sqlite/${name}.sqlite`, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      db.initialize = async function() {\n        let path = `${__dirname}/../sqlite/${name}.schema`;\n        let exists = await FS.exists(path);\n        let schema = await FS.read(path);\n        schema = schema.replace(/\\/\\*(.|\\r?\\n)*\\*\\//g, '');\n        schema = schema.replace(/\\-\\-.*/g, '');\n        schema = schema.replace(/\\r?\\n+/g, ' ');\n        let statements = schema.split(';').filter((statement) => !/^\\s+$/.test(statement));\n        await Tools.series(statements, async function(statement) {\n          return await new Promise((resolve, reject) => {\n            db.run(statement, [], (err) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          });\n        });\n      };\n      resolve(db);\n    });\n  });\n}\n\nexport default function(name) {\n  if (!name) {\n    name = 'main';\n  }\n  let client = clients.get(name);\n  if (!client) {\n    client = createClient(name);\n    clients.set(name, client);\n  }\n  return client;\n}\n"],"sourceRoot":"/source/"}