{"version":3,"sources":["storage/unordered-set.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;IAEqB,Y;;;AACnB,0BAAqB;AAAA;;AAAA;;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AAAA,0JACV,IADU;AAEpB;;;;;2EAEY,M;YACP,I;;;;;;uBAAa,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,OAAL,CAAa,MAAb,CAAxB,C;;;AAAb,oB;iDACG,KAAK,KAAL,CAAW,IAAX,C;;;;;;;;;;;;;;;;;;;4EAGI,M;YACP,I;;;;;;uBAAa,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,OAAL,CAAa,MAAb,CAArB,C;;;AAAb,oB;kDACG,KAAK,GAAL,CAAS,KAAK,KAAd,C;;;;;;;;;;;;;;;;;;;4EAGM,I,EAAM,M;YACf,Q;;;;;;uBAAiB,KAAK,MAAL,CAAY,SAAZ,CAAsB,KAAK,OAAL,CAAa,MAAb,CAAtB,EAA4C,KAAK,SAAL,CAAe,IAAf,CAA5C,C;;;AAAjB,wB;kDACG,CAAC,CAAC,Q;;;;;;;;;;;;;;;;;;;4EAGE,I,EAAM,M;;;;;;uBACJ,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,MAAb,CAAjB,EAAuC,KAAK,SAAL,CAAe,IAAf,CAAvC,C;;;;;;;;;;;;;;;;;;;;;;4EAGD,I,EAAM,M;;;;;;;sBACd,CAAC,IAAD,IAAS,CAAC,0BAAE,IAAF,EAAQ,OAAR,EAAV,IAA+B,KAAK,MAAL,IAAe,C;;;;;kDACzC,C;;;;uBAEI,qBAAK,MAAL,CAAY,IAAZ,EAAiB,IAAjB,sBAAsB,KAAK,MAA3B,EAAmC,KAAK,OAAL,CAAa,MAAb,CAAnC,4BAA4D,KAAK,GAAL,CAAS,KAAK,SAAd,CAA5D,G;;;;;;;;;;;;;;;;;;;;;;4EAGC,I,EAAM,M;;;;;;uBACP,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,OAAL,CAAa,MAAb,CAAjB,EAAuC,KAAK,SAAL,CAAe,IAAf,CAAvC,C;;;;;;;;;;;;;;;;;;;;;;4EAGE,I,EAAM,M;;;;;;;sBACjB,CAAC,IAAD,IAAS,CAAC,0BAAE,IAAF,EAAQ,OAAR,EAAV,IAA+B,KAAK,MAAL,IAAe,C;;;;;kDACzC,C;;;;uBAEI,qBAAK,MAAL,CAAY,IAAZ,EAAiB,IAAjB,sBAAsB,KAAK,MAA3B,EAAmC,KAAK,OAAL,CAAa,MAAb,CAAnC,4BAA4D,KAAK,GAAL,CAAS,KAAK,SAAd,CAA5D,G;;;;;;;;;;;;;;;;;;;;;;4EAGH,M;;;;;;uBACG,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,OAAL,CAAa,MAAb,CAAlB,C;;;;;;;;;;;;;;;;;;;;;;;;kBA3CI,Y","file":"storage/unordered-set.js","sourcesContent":["import _ from 'underscore';\n\nimport CommonKey from './common-key';\n\nexport default class UnorderedSet extends CommonKey {\n  constructor(...args) {\n    super(...args);\n  }\n\n  async getOne(subkey) {\n    let data = await this.client.srandmember(this.fullKey(subkey));\n    return this.parse(data);\n  }\n\n  async getAll(subkey) {\n    let data = await this.client.smembers(this.fullKey(subkey));\n    return data.map(this.parse);\n  }\n\n  async contains(data, subkey) {\n    let contains = await this.client.sismember(this.fullKey(subkey), this.stringify(data));\n    return !!contains;\n  }\n\n  async addOne(data, subkey) {\n    return await this.client.sadd(this.fullKey(subkey), this.stringify(data));\n  }\n\n  async addSome(list, subkey) {\n    if (!list || !_(list).isArray() || list.length <= 0) {\n      return 0;\n    }\n    return await this.client.sadd.call(this.client, this.fullKey(subkey), ...list.map(this.stringify));\n  }\n\n  async deleteOne(data, subkey) {\n    return await this.client.srem(this.fullKey(subkey), this.stringify(data));\n  }\n\n  async deleteSome(list, subkey) {\n    if (!list || !_(list).isArray() || list.length <= 0) {\n      return 0;\n    }\n    return await this.client.srem.call(this.client, this.fullKey(subkey), ...list.map(this.stringify));\n  }\n\n  async count(subkey) {\n    return await this.client.scard(this.fullKey(subkey));\n  }\n}\n"],"sourceRoot":"/source/"}