{"version":3,"sources":["storage/files.js"],"names":[],"mappings":"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","file":"storage/files.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport HTTP from 'q-io/http';\nimport merge from 'merge';\nimport Path from 'path';\nimport promisify from 'promisify-node';\nimport UUID from 'uuid';\n\nimport Board from '../boards/board';\nimport * as FilesModel from '../models/files';\nimport * as Tools from '../helpers/tools';\nimport vk from '../helpers/vk';\n\nconst mkpath = promisify('mkpath');\n\nconst FILE_RATINGS = new Set(['SFW', 'R-15', 'R-18', 'R-18G']);\n\nlet thumbCreationPlugins = Tools.loadPlugins(`${__dirname}/../thumbnailing`);\n\nfunction setFileRating(file, id, fields) {\n  let rating = fields[`file_${id}_rating`];\n  if (FILE_RATINGS.has(rating)) {\n    file.rating = rating;\n  } else {\n    file.rating = 'SFW';\n  }\n}\n\nasync function downloadFile(url, formFieldName, fields, transaction) {\n  let path = `${__dirname}/../tmp/upload_${UUID.v4()}`;\n  transaction.addFile(path);\n  let proxy = Tools.proxy();\n  let options = { timeout: Tools.Minute }; //TODO: magic number\n  if (/^vk\\:\\/\\//.test(url)) {\n    let result = await vk('audio.getById', { audios: url.split('/')[2] });\n    options.url = result.response[0].url;\n  } else if (proxy) {\n    options = merge.recursive(options, {\n      host: proxy.host,\n      port: proxy.port,\n      headers: { 'Proxy-Authorization': proxy.auth },\n      path: url,\n    });\n  } else {\n    optons.url = url;\n  }\n  let response = await HTTP.request(options);\n  if (200 !== response.status) {\n    return Promise.reject(new Error(Tools.translate('Failed to download file')));\n  }\n  let data = await response.body.read();\n  if (data.length < 1) {\n    return Promise.reject(new Error(Tools.translate('File is empty')));\n  }\n  await Tools.writeFile(path, data);\n  let file = {\n    name: url.split('/').pop(),\n    size: data.length,\n    path: path\n  };\n  setFileRating(file, formFieldName.substr(9), fields);\n  let mimeType = await Tools.mimeType(path);\n  file.mimeType = mimeType;\n  return file;\n}\n\nasync function getFiles(fields, files, transaction) {\n  files = await Tools.series(_(files).pick((file) => {\n    if (file.size < 1) {\n      FS.remove(file.path).catch((err) => { Logger.error(req, err.stack || err); });\n      return false;\n    }\n    return true;\n  }), async function(file, fileName) {\n    setFileRating(file, file.fieldName.substr(5), fields);\n    let mimeType = await Tools.mimeType(file.path);\n    file.mimeType = mimeType;\n    return file;\n  }, {});\n  let downloadedFiles = Tools.series(_(fields).pick((_1, key) => {\n    return /^file_url_\\S+$/.test(key);\n  }), async function(url, formFieldName) {\n    return await downloadFile(url, formFieldName, fields, transaction);\n  }, true);\n  files.concat(downloadedFiles);\n  let hashes = (typeof fields.fileHashes === 'string') ? fields.fileHashes.split(',') : [];\n  let fileInfos = await FilesModel.getFileInfosByHashes(hashes);\n  let existingFiles = fileInfos.map((fileInfo, index) => {\n    let fi = {\n      name: fileInfo.name,\n      thumbName: fileInfo.thumb.name,\n      size: fileInfo.size,\n      boardName: fileInfo.boardName,\n      mimeType: fileInfo.mimeType,\n      rating: fileInfo.rating,\n      copy: true\n    };\n    setFileRating(fi, hashes[index], fields);\n    return fi;\n  });\n  return files.concat(existingFiles);\n}\n\nasync function waitForFile(filePath, options) { //TODO: That is not okay\n  let delay = 50;\n  let retry = 4;\n  async function f() {\n    let exists = await FS.exists(filePath);\n    if (!exists) {\n      if (!retry) {\n        return Promise.reject(new Error(Tools.translate('Failed to copy file')));\n      }\n      --retry;\n      await new Promise((resolve, reject) => {\n        setTimeout(resolve, delay);\n      });\n      await f();\n    }\n  }\n  await f();\n}\n\nasync function generateFileName(file, plugin) {\n  let baseName = await IPC.send('fileName');\n  let suffix = Path.extname(file.name);\n  if (typeof suffix === 'string') {\n    suffix = suffix.substr(1);\n  }\n  if (!suffix || !plugin.suffixMatchesMimeType(suffix, file.mimeType)) {\n    suffix = plugin.defaultSuffixForMimeType(file.mimeType);\n  }\n  let thumbSuffix = suffix;\n  if (typeof plugin.thumbnailSuffixForMimeType === 'function') {\n    thumbSuffix = plugin.thumbnailSuffixForMimeType(file.mimeType) || suffix;\n  }\n  return {\n    name: `${baseName}.${suffix}`,\n    thumbName: `${baseName}s.${thumbSuffix}`\n  };\n}\n\nasync function createFileThumb(file, plugin) {\n  let thumbPath = `${Path.dirname(file.path)}/${UUID.v4()}`;\n  file.thumbPath = thumbPath;\n  let result = await plugin.createThumbnail(file, thumbPath, file.path) || {};\n  file.dimensions = result.dimensions || null;\n  file.extraData = result.extraData || null;\n  file.thumbDimensions = result.thumbDimensions;\n  if (result.ihash) {\n    file.ihash = result.ihash;\n  }\n}\n\nasync function processFile(boardName, file, transaction) {\n  let plugin = thumbCreationPlugins.find(plugin => plugin.match(file.mimeType));\n  if (!plugin) {\n    return Promise.reject(new Error(Tools.translate('Unsupported file type')));\n  }\n  let fn = await generateFileName(file, plugin);\n  let targetFilePath = `${__dirname}/../public/${boardName}/src/${fn.name}`;\n  var targetThumbPath = `${__dirname}/../public/${boardName}/thumb/${fn.thumbName}`;\n  transaction.addFile(targetFilePath);\n  transaction.addFile(targetThumbPath);\n  if (file.copy) {\n    let sourceFilePath = `${__dirname}/../public/${file.boardName}/src/${file.name}`;\n    let sourceThumbPath = `${__dirname}/../public/${file.boardName}/thumb/${file.thumbName}`;\n    await FS.copy(sourceFilePath, targetFilePath);\n    await FS.copy(sourceThumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    let fileInfo = await FilesModel.getFileInfoByName(file.name);\n    return {\n      dimensions: fileInfo.dimensions,\n      extraData: fileInfo.extraData,\n      hash: fileInfo.hash,\n      ihash: fileInfo.ihash || null,\n      mimeType: fileInfo.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: fileInfo.size,\n      thumb: {\n        dimensions: fileInfo.thumb.dimensions,\n        name: fn.thumbName\n      }\n    };\n  } else {\n    let sourceFilePath = file.path;\n    if (!file.hash) {\n      let data = await FS.read(file.path, 'b');\n      file.hash = Tools.sha1(data);\n    }\n    await createFileThumb(file, plugin);\n    await FS.move(sourceFilePath, targetFilePath);\n    transaction.addFile(file.thumbPath);\n    await FS.move(file.thumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    return {\n      dimensions: file.dimensions,\n      extraData: file.extraData,\n      hash: file.hash,\n      ihash: file.ihash || null,\n      mimeType: file.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: file.size,\n      thumb: {\n        dimensions: file.thumbDimensions,\n        name: fn.thumbName\n      }\n    };\n  }\n}\n\nexport async function processFiles(boardName, files, transaction) {\n  if (files.length < 1) {\n    return [];\n  }\n  let path = `${__dirname}/../public/${boardName}`;\n  await mkpath(`${path}/src`);\n  await mkpath(`${path}/thumb`);\n  return await Tools.series(files, async function(file) {\n    return await processFile(boardName, file, transaction);\n  }, true);\n}\n\nexport async function createFile(dir, fileName, { file, isDir } = {}) {\n  if (dir.slice(-1)[0] !== '/') {\n    dir += '/';\n  }\n  let path = `${__dirname}/../${dir}${fileName}`;\n  if (isDir) {\n    await FS.makeDirectory(path);\n  }\n  if (file) {\n    await FS.move(file.path, path);\n  } else {\n    await Tools.writeFile(path, '');\n  }\n}\n\nexport async function editFile(fileName, content) {\n  await Tools.writeFile(`${__dirname}/../${fileName}`, content);\n}\n\nexport async function renameFile(oldFileName, fileName) {\n  let oldPath = `${__dirname}/../${oldFileName}`;\n  await FS.rename(oldPath, oldPath.split('/').slice(0, -1).join('/') + '/' + fileName);\n}\n\nexport async function deleteFile(fileName) {\n  await FS.removeTree(`${__dirname}/../${fileName}`);\n}\n"],"sourceRoot":"/source/"}