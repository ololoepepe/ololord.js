{"version":3,"sources":["models/posts.js"],"names":[],"mappings":"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","file":"models/posts.js","sourcesContent":["import _ from 'underscore';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as ThreadsModel from './threads';\nimport * as UsersModel from './users';\nimport Board from '../boards/board';\nimport * as Search from '../core/search';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport redisClient from '../storage/redis-client-factory';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport UnorderedSet from '../storage/unordered-set';\n\nlet FileInfos = new Hash(redisClient(), 'fileInfos');\nlet PostFileInfoNames = new UnorderedSet(redisClient(), 'postFileInfoNames', {\n  parse: false,\n  stringify: false\n});\nlet Posts = new Hash(redisClient(), 'posts');\nlet PostsPlannedForDeletion = new UnorderedSet(redisClient(), 'postsPlannedForDeletion', {\n  parse: false,\n  stringify: false\n});\nlet ReferringPosts = new Hash(redisClient(), 'referringPosts');\nlet ReferencedPosts = new Hash(redisClient(), 'referencedPosts');\nlet UserBans = new Key(redisClient(), 'userBans');\n\nfunction sortedReferences(references) {\n  return _(references).toArray().sort((a, b) => {\n    return (a.createdAt && b.createdAt && a.createdAt.localeCompare(b.createdAt))\n      || a.boardName.localeCompare(b.boardName) || (a.postNumber - b.postNumber);\n  }).map((reference) => {\n    delete reference.createdAt;\n    return reference;\n  });\n}\n\nasync function addDataToPost(board, post, { withExtraData, withFileInfos, withReferences } = {}) {\n  let key = `${post.boardName}:${post.number}`;\n  let ban = await UserBans.get(`${post.user.ip}:${post.boardName}`);\n  post.bannedFor = !!(ban && ban.postNumber === post.number);\n  if (withExtraData) {\n    let extraData = await board.loadExtraData(post.number);\n    post.extraData = extraData;\n  }\n  if (withFileInfos) {\n    let fileNames = await PostFileInfoNames.getAll(key);\n    let fileInfos = await FileInfos.getSome(fileNames);\n    post.fileInfos = fileInfos;\n  }\n  if (withReferences) {\n    let referringPosts = await ReferringPosts.getAll(key);\n    let referencedPosts = await ReferencedPosts.getAll(key);\n    post.referringPosts = sortedReferences(referringPosts);\n    post.referencedPosts = sortedReferences(referencedPosts);\n  }\n}\n\nexport async function getPost(boardName, postNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let key = `${boardName}:${postNumber}`;\n  let post = await Posts.getOne(key);\n  if (!post) {\n    return post;\n  }\n  let threadPostNumbers = await ThreadsModel.getThreadPostNumbers(boardName, post.threadNumber);\n  post.sequenceNumber = threadPostNumbers.indexOf(post.number) + 1;\n  await addDataToPost(board, post, options);\n  return post;\n}\n\nexport async function getPosts(boardName, postNumbers, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!_(postNumbers).isArray()) {\n    postNumbers = [postNumbers];\n  }\n  postNumbers = postNumbers.map((postNumber) => {\n    return Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  });\n  if (postNumbers.some(postNumber => !postNumber)) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let posts = await Posts.getSome(postNumbers.map(postNumber => `${boardName}:${postNumber}`));\n  posts = _(posts).toArray();\n  if (posts.length <= 0) {\n    return [];\n  }\n  let threadPostNumbers = await ThreadsModel.getThreadPostNumbers(boardName, posts[0].threadNumber);\n  await Tools.series(posts, async function(post, index) {\n    if (!post) {\n      return;\n    }\n    post.sequenceNumber = threadPostNumbers.indexOf(post.number) + 1;\n    await addDataToPost(board, post, options);\n  });\n  return posts;\n}\n\nexport async function getPostKeys() {\n  return await Posts.keys();\n}\n\nexport async function addReferencedPosts(post, referencedPosts, { nogenerate } = {}) {\n  let key = `${post.boardName}:${post.number}`;\n  //TODO: Optimise (hmset)\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    await ReferencedPosts.setOne(refKey, ref, key);\n    await ReferringPosts.setOne(key, {\n      boardName: post.boardName,\n      postNumber: post.number,\n      threadNumber: post.threadNumber,\n      createdAt: refKey.createdAt\n    }, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).each((ref, refKey) => {\n      if (ref.boardName !== post.boardName || ref.threadNumber !== post.threadNumber) {\n        IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n      }\n    });\n  }\n}\n\nexport async function createPost(req, fields, files, transaction, { postNumber, date } = {}) {\n  let { boardName, threadNumber, text, markupMode, name, subject, sage, signAsOp, tripcode, password } = fields;\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!board.postingEnabled) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled at this board')));\n  }\n  date = date || Tools.now();\n  if (postNumber) {\n    threadNumber = postNumber;\n  }\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  tripcode = ('true' === tripcode);\n  signAsOp = ('true' === signAsOp);\n  password = Tools.sha1(password);\n  let hashpass = (req.hashpass || null);\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  if (!thread) {\n    return Promise.reject(new Error(Tools.translate('No such thread')));\n  }\n  if (thread.closed) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled in this thread')));\n  }\n  let unbumpable = !!thread.unbumpable;\n  let accessLevel = req.level(boardName) || null;\n  let postCount = await ThreadsModel.getThreadPostCount(boardName, threadNumber);\n  if (postCount >= board.postLimit) {\n    return Promise.reject(new Error(Tools.translate('Post limit reached')));\n  }\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    referencedPosts: referencedPosts,\n    accessLevel: accessLevel\n  });\n  let extraData = await board.postExtraData(req, fields, files);\n  if (typeof extraData === 'undefined') {\n    extraData = null;\n  }\n  if (!postNumber) {\n    postNumber = await BoardsModel.nextPostNumber(boardName);\n  }\n  let plainText = text ? Tools.plainText(text, { brToNewline: true }) : null;\n  let post = {\n    bannedFor: false,\n    boardName: boardName,\n    createdAt: date.toISOString(),\n    geolocation: req.geolocationInfo,\n    markup: markupModes,\n    name: name || null,\n    number: postNumber,\n    options: {\n      sage: sage,\n      showTripcode: !!req.hashpass && tripcode,\n      signAsOp: signAsOp\n    },\n    rawText: rawText,\n    subject: subject || null,\n    text: text || null,\n    plainText: plainText,\n    threadNumber: threadNumber,\n    updatedAt: null,\n    user: {\n      hashpass: hashpass,\n      ip: req.ip,\n      level: accessLevel,\n      password: password\n    }\n  };\n  transaction.setPostNumber(postNumber);\n  await Posts.setOne(`${boardName}:${postNumber}`, post);\n  await board.storeExtraData(postNumber, extraData);\n  await addReferencedPosts(post, referencedPosts);\n  await UsersModel.addUserPostNumber(req.ip, boardName, postNumber);\n  await Tools.series(files, async function(file) {\n    file.boardName = boardName;\n    file.postNumber = postNumber;\n    await FilesModel.addFileInfo(file);\n    await PostFileInfoNames.addOne(file.name, `${boardName}:${postNumber}`);\n  });\n  await FilesModel.addFileHashes(files);\n  await Search.indexPost({\n    boardName: boardName,\n    postNumber: postNumber,\n    threadNumber: threadNumber,\n    plainText: plainText,\n    subject: subject\n  });\n  await ThreadsModel.addThreadPostNumber(boardName, threadNumber, postNumber);\n  if (!sage && postCount < board.bumpLimit && !unbumpable) {\n    await ThreadsModel.setThreadUpdateTime(boardName, threadNumber, date.toISOString());\n  }\n  post.referencedPosts = referencedPosts;\n  post.fileInfos = files;\n  return post;\n}\n\nasync function removeReferencedPosts({ boardName, number, threadNumber }, { nogenerate } = {}) {\n  let key = `${boardName}:${number}`;\n  let referencedPosts = await ReferencedPosts.getAll(key);\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    return await ReferringPosts.deleteOne(key, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).filter((ref) => {\n      return (ref.boardName !== boardName) || (ref.threadNumber !== threadNumber);\n    }).forEach((ref) => {\n      IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n    });\n  }\n  ReferencedPosts.delete(key);\n}\n\nasync function rerenderPost(boardName, postNumber, { nogenerate } = {}) {\n  let post = await getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  let referencedPosts = {};\n  let text = await markup(boardName, post.rawText, {\n    markupModes: post.markup,\n    referencedPosts: referencedPosts,\n    accessLevel: post.user.level\n  });\n  post.text = text;\n  await Posts.setOne(`${boardName}:${postNumber}`, post);\n  await removeReferencedPosts(post, { nogenerate: nogenerate });\n  await addReferencedPosts(post, referencedPosts, { nogenerate: nogenerate });\n  if (!nogenerate) {\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n  }\n}\n\nasync function rerenderReferringPosts({ boardName, number, threadNumber }, { removingThread } = {}) {\n  let referringPosts = ReferringPosts.getAll(`${boardName}:${number}`);\n  referringPosts = _(referringPosts).filter((ref) => {\n    return !removingThread || ref.boardName !== boardName || ref.threadNumber !== threadNumber;\n  });\n  await Tools.series(referringPosts, async function(ref) {\n    return await rerenderPost(ref.boardName, ref.postNumber);\n  });\n}\n\nexport async function removePost(boardName, postNumber, { removingThread, leaveReferences, leaveFileInfos } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let key = `${boardName}:${postNumber}`\n  await PostsPlannedForDeletion.addOne(key);\n  let post = await getPost(boardName, postNumber, { withReferences: true });\n  await ThreadsModel.removeThreadPostNumber(boardName, post.threadNumber, postNumber);\n  await Posts.deleteOne(key);\n  if (!leaveReferences) {\n    try {\n      await rerenderReferringPosts(post, { removingThread: removingThread });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n    try {\n      await removeReferencedPosts(post);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n  await UsersModel.removeUserPostNumber(post.user.ip, boardName, postNumber);\n  if (!leaveFileInfos) {\n    let fileNames = await PostFileInfoNames.getAll(key);\n    let fileInfos = await Tools.series(fileNames, async function(fileName) {\n      return await FilesModel.getFileInfoByName(fileName);\n    }, true);\n    fileInfos = fileInfos.filter(fileInfo => !!fileInfo);\n    let paths = fileInfos.map((fileInfo) => {\n      return [\n        `${__dirname}/../public/${boardName}/src/${fileInfo.name}`,\n        `${__dirname}/../public/${boardName}/thumb/${fileInfo.thumb.name}`\n      ];\n    });\n    await PostFileInfoNames.delete(key);\n    await FilesModel.removeFileInfos(fileNames);\n    await FilesModel.removeFileHashes(fileInfos);\n    Tools.series(_(paths).flatten(), async function(path) {\n      try {\n        await FS.remove(path);\n      } catch (err) {\n        Logger.error(err.stack || err);\n      }\n    });\n  }\n  await board.removeExtraData(postNumber);\n  await Search.removePostIndex(boardName, postNumber);\n  await PostsPlannedForDeletion.deleteOne(key);\n}\n\nexport async function editPost(req, fields) {\n  let { boardName, postNumber, text, name, subject, sage, markupMode } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let date = Tools.now();\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  let post = await getPost(boardName, postNumber, { withExtraData: true });\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('Invalid post')));\n  }\n  /*\n  return db.hget(\"threads:\" + board.name, c.post.threadNumber);\n  if (!thread)\n      return Promise.reject(Tools.translate(\"No such thread\"));\n  */\n  let key = `${boardName}:${postNumber}`;\n  text = await markup(board.name, rawText, {\n    markupModes: /*markupModes*/post.markup, //TODO ???\n    referencedPosts: referencedPosts,\n    accessLevel: req.level(board.name)\n  });\n  let plainText = text ? Tools.plainText(text, { brToNewline: true }) : null;\n  let extraData = await board.postExtraData(req, fields, null, post);\n  //post.markup = markupModes; //TODO ???\n  post.name = name || null;\n  post.plainText = plainText;\n  post.rawText = rawText;\n  post.subject = subject || null;\n  post.text = text || null;\n  post.updatedAt = date.toISOString();\n  //delete post.bannedFor; //TODO: WTF?\n  await Posts.setOne(key, post);\n  await board.removeExtraData(postNumber);\n  await board.storeExtraData(postNumber, extraData);\n  await removeReferencedPosts(post);\n  await addReferencedPosts(post, referencedPosts);\n  await Search.updatePostIndex(boardName, postNumber, (body) => {\n    body.plainText = plainText;\n    body.subject = subject;\n    return body;\n  });\n  return post;\n}\n\nexport async function deletePost(req, { boardName, postNumber, archived }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let post = await getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  let isThread = post.threadNumber === post.number;\n  archived = ('true' === archived);\n  if (archived && !isThread) {\n    return Promise.reject(new Error(Tools.translate('Deleting posts from archived threads is not allowed')));\n  }\n  if (isThread) {\n    await removeThread(boardName, postNumber, { archived: archived });\n  } else {\n    await removePost(boardName, postNumber);\n  }\n  if (isThread && archived) {\n    await Tools.series(['json', 'html'], async function(suffix) {\n      return await FS.remove(`${__dirname}/../public/${boardName}/arch/${postNumber}.${suffix}`);\n    });\n    await IPC.renderArchive(boardName);\n  } else if (!archived) {\n    await IPC.render(boardName, post.threadNumber, postNumber, isThread ? 'delete' : 'edit');\n  }\n}\n\nexport async function getPostFileCount(boardName, postNumber) {\n  return await PostFileInfoNames.count(`${boardName}:${postNumber}`);\n}\n\nasync function forEachPost(targets, action) {\n  if (typeof targets !== 'object') {\n    return;\n  }\n  if (_(targets).toArray().length <= 0) {\n    targets = Board.boardNames();\n  }\n  if (_(targets).isArray()) {\n    targets = targets.reduce((acc, boardName) => {\n      acc[boardName] = '*';\n      return acc;\n    }, {});\n  }\n  let postKeys = await Posts.keys();\n  postKeys = postKeys.reduce((acc, key) => {\n    let [boardName, postNumber] = key.split(':');\n    let set = acc.get(boardName);\n    if (!set) {\n      set = new Set();\n      acc.set(boardName, set);\n    }\n    set.add(+postNumber);\n    return acc;\n  }, new Map());\n  await Tools.series(targets, async function(postNumbers, boardName) {\n    if (typeof postNumbers !== 'string' && !_(postNumbers).isArray()) {\n      return;\n    }\n    if (!Board.board(boardName)) {\n      Logger.error(new Error(Tools.translate('Invalid board name: $[1]', '', boardName)));\n      return;\n    }\n    let set = postKeys.get(boardName);\n    if ('*' === postNumbers) {\n      postNumbers = set ? Array.from(set) : [];\n    } else {\n      postNumbers = set ? postNumbers.filter(postNumber => set.has(postNumber)) : [];\n    }\n    return await Tools.series(postNumbers, async function(postNumber) {\n      try {\n        return await action(boardName, postNumber);\n      } catch (err) {\n        Logger.error(err.stack || err);\n      }\n    });\n  });\n}\n\nexport async function rerenderPosts(targets) {\n  return await forEachPost(targets, async function(boardName, postNumber) {\n    console.log(Tools.translate('Rendering post: >>/$[1]/$[2]', '', boardName, postNumber));\n    return await rerenderPost(boardName, postNumber, { nogenerate: true });\n  });\n}\n\nasync function rebuildPostSearchIndex(boardName, postNumber, threads) {\n  threads = threads || new Map();\n  let key = `${boardName}:${postNumber}`;\n  let post = await getPost(boardName, postNumber);\n  let threadNumber = post.threadNumber;\n  let threadKey = `${boardName}:${threadNumber}`;\n  let thread = threads.get(threadKey);\n  if (!thread) {\n    thread = await ThreadsModel.getThread(boardName, threadNumber);\n    if (!thread) {\n      return Promise.reject(new Error(Tools.translate('No such thread: >>/$[1]/$[2]', '', boardName, threadNumber)));\n    }\n    threads.set(threadKey, thread);\n  }\n  await Search.updatePostIndex(boardName, postNumber, (body) => {\n    body.plainText = post.plainText;\n    body.subject = post.subject;\n    body.archived = !!thread.archived;\n    return body;\n  });\n}\n\nexport async function rebuildSearchIndex(targets) {\n  let threads = new Map();\n  return await forEachPost(targets || {}, async function(boardName, postNumber) {\n    console.log(Tools.translate('Rebuilding post search index: >>/$[1]/$[2]', '', boardName, postNumber));\n    return await rebuildPostSearchIndex(boardName, postNumber, threads);\n  });\n}\n\nasync function processMovedThreadPostReferences({ references, entity, sourceBoardName, targetBoardName, threadNumber,\n  postNumberMap, toRerender, toUpdate }) {\n  await Tools.series(references, async function(ref) {\n    let nref;\n    if (ref.boardName === sourceBoardName && ref.threadNumber === threadNumber) {\n        nref = {\n          boardName: targetBoardName,\n          threadNumber: post.threadNumber,\n          postNumber: postNumberMap[ref.postNumber]\n        };\n    } else {\n      nref = ref;\n      toUpdate[`${ref.boardName}:${ref.threadNumber}`] = {\n        boardName: ref.boardName,\n        threadNumber: ref.threadNumber\n      };\n      if (toRerender) {\n        toRerender[`${ref.boardName}:${ref.postNumber}`] = {\n          boardName: ref.boardName,\n          postNumber: ref.postNumber\n        };\n      }\n    }\n    await entity.deleteOne(`${ref.boardName}:${ref.postNumber}`, `${sourceBoardName}:${oldPostNumber}`);\n    await entity.setOne(`${nref.boardName}:${nref.postNumber}`, `${targetBoard.name}:${post.number}`, nref);\n  });\n}\n\nexport async function processMovedThreadPosts({ posts, postNumberMap, threadNumber, targetBoard, sourceBoardName,\n  sourcePath, sourceThumbPath, targetPath, targetThumbPath }) {\n  let toRerender = {};\n  let toUpdate = {};\n  await Tools.series(posts, async function(post) {\n    let oldPostNumber = post.number;\n    post.number = postNumberMap.get(post.number);\n    post.threadNumber = threadNumber;\n    post.boardName = targetBoard.name;\n    let referencedPosts = post.referencedPosts;\n    delete post.referencedPosts;\n    let extraData = post.extraData;\n    delete post.extraData;\n    let referringPosts = post.referringPosts;\n    delete post.referringPosts;\n    let fileInfos = post.fileInfos;\n    delete post.fileInfos;\n    if (post.rawText) {\n      _(postNumberMap).each((newPostNumber, previousPostNumber) => {\n        let rx = new RegExp(`>>/${sourceBoardName}/${previousPostNumber}`, 'g');\n        post.rawText = post.rawText.replace(rx, `>>/${targetBoard.name}/${newPostNumber}`);\n        rx = new RegExp(`>>${previousPostNumber}`, 'g');\n        post.rawText = post.rawText.replace(rx, `>>${newPostNumber}`);\n      });\n      referencedPosts.filter((ref) => { return ref.boardName === sourceBoardName; }).forEach((ref) => {\n        let rx = new RegExp(`>>${ref.postNumber}`, 'g');\n        post.rawText = post.rawText.replace(rx, `>>/${sourceBoardName}/${ref.postNumber}`);\n      });\n    }\n    if (post.rawText) {\n      post.text = await markup(targetBoard.name, post.rawText, {\n        markupModes: post.markup,\n        accessLevel: post.user.level\n      });\n    }\n    await Posts.setOne(`${targetBoard.name}:${post.number}`, post);\n    await targetBoard.storeExtraData(post.number, extraData);\n    await processMovedThreadPostReferences({\n      references: referencedPosts,\n      entity: ReferencedPosts,\n      sourceBoardName: sourceBoardName,\n      targetBoardName: targetBoard.name,\n      threadNumber: threadNumber,\n      postNumberMap: postNumberMap,\n      toUpdate: toUpdate\n    });\n    await processMovedThreadPostReferences({\n      references: referringPosts,\n      entity: ReferringPosts,\n      sourceBoardName: sourceBoardName,\n      targetBoardName: targetBoard.name,\n      threadNumber: threadNumber,\n      postNumberMap: postNumberMap,\n      toRerender: toRerender,\n      toUpdate: toUpdate\n    });\n    await UsersModel.addUserPostNumber(post.user.ip, targetBoard.name, post.number);\n    await FilesModel.addFilesToPost(targetBoard.name, post.number, fileInfos);\n    await Tools.series(fileInfos, async function(fileInfo) {\n      await FS.move(`${sourcePath}/${fileInfo.name}`, `${targetPath}/${fileInfo.name}`);\n      await FS.move(`${sourceThumbPath}/${fileInfo.thumb.name}`, `${targetThumbPath}/${fileInfo.thumb.name}`);\n    });\n    await Search.indexPost(targetBoard.name, post.number, threadNumber, post.plainText, post.subject);\n  });\n  return {\n    toRerender: toRerender,\n    toUpdate: toUpdate\n  };\n}\n\nexport async function processMovedThreadRelatedPosts({ posts, sourceBoardName, postNumberMap }) {\n  await Tools.series(posts, async function(post) {\n    post = await PostsModel.getPost(post.boardName, post.postNumber);\n    if (!post.rawText) {\n      return;\n    }\n    _(postNumberMap).each((newPostNumber, previousPostNumber) => {\n      let rx = new RegExp(`>>/${sourceBoardName}/${previousPostNumber}`, 'g');\n      post.rawText = post.rawText.replace(rx, `>>/${targetBoardName}/${newPostNumber}`);\n      if (post.boardName === sourceBoardName) {\n        rx = new RegExp(`>>${previousPostNumber}`, 'g');\n        post.rawText = post.rawText.replace(rx, `>>/${targetBoardName}/${newPostNumber}`);\n      }\n    });\n    post.text = await markup(post.boardName, post.rawText, {\n      markupModes: post.markup,\n      accessLevel: post.user.level\n    });\n    await Posts.setOne(`${post.boardName}:${post.number}`, post);\n  });\n}\n"],"sourceRoot":"/source/"}