{"version":3,"sources":["models/chats.js"],"names":[],"mappings":"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","file":"models/chats.js","sourcesContent":["import _ from 'underscore';\nimport Crypto from 'crypto';\n\nimport * as PostsModel from './posts';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport OrderedSet from '../storage/ordered-set';\nimport UnorderedSet from '../storage/unordered-set';\n\nlet Chat = new OrderedSet(redisClient(), 'chat');\nlet ChatMembers = new UnorderedSet(redisClient(), 'chatMembers');\nlet Chats = new UnorderedSet(redisClient(), 'chats', {\n  parse: false,\n  stringify: false\n});\n\nfunction createUserHash(user) {\n  let sha256 = Crypto.createHash('sha256');\n  sha256.update(user.hashpass || user.ip);\n  return sha256.digest('hex');\n}\n\nexport async function getChatMessages(user, lastRequestDate) {\n  lastRequestDate = +(new Date(lastRequestDate)) || 0;\n  let hash = createUserHash(user);\n  let date = Tools.now().toISOString();\n  let keys = await Chats.getAll(hash);\n  let chats = await Tools.series(keys, async function(key) {\n    let list = await Chat.getSomeByScore(lastRequestDate, Infinity, key);\n    return (list || []).map((msg) => {\n      return {\n        text: msg.text,\n        date: msg.date,\n        type: ((hash === msg.senderHash) ? 'out' : 'in')\n      };\n    });\n  }, {});\n  return {\n    lastRequestDate: date,\n    chats: _(chats).pick((list) => { return list.length > 0; })\n  };\n}\n\nexport async function addChatMessage(user, boardName, postNumber, text) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  if (!text || typeof text !== 'string') {\n    throw new Error(Tools.translate('Message is empty'));\n  }\n  let key = `${boardName}:${postNumber}`;\n  let senderHash = createUserHash(user);\n  let date = Tools.now();\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let receiver = post.user;\n  let receiverHash = createUserHash(receiver);\n  let messages = await Chat.getSome(0, 0, key);\n  if (messages.length > 0 && messages[0].senderHash !== senderHash && messages[0].receiverHash !== senderHash) {\n    throw new Error(Tools.translate('Somebody is chatting here already'));\n  }\n  let members = await ChatMembers.getAll(key);\n  if (members.length < 2) {\n    await ChatMembers.addSome([{\n      hash: senderHash,\n      ip: user.ip,\n      hashpass: user.hashpass\n    }, {\n      hash: receiverHash,\n      ip: receiver.ip,\n      hashpass: receiver.hashpass\n    }], key);\n  } else {\n    if (senderHash === receiverHash) {\n      let member = _(members).find((member) => { return member.hash !== senderHash; });\n      if (member) {\n        receiverHash = member.hash;\n        receiver = {\n          ip: member.ip,\n          hashpass: member.hashpass\n        };\n      }\n    }\n    await Chats.addOne(key, senderHash);\n  }\n  await Chats.addOne(key, receiverHash);\n  await Chat.addOne({\n    text: text,\n    date: date.toISOString(),\n    senderHash: senderHash,\n    receiverHash: receiverHash\n  }, date.valueOf(), key);\n  let ttl = config('server.chat.ttl') * Tools.SECOND;\n  await Chats.expire(ttl, senderHash);\n  await Chats.expire(ttl, receiverHash);\n  await Chat.expire(ttl, key);\n  await ChatMembers.expire(ttl, key);\n  return {\n    message: {\n      text: text,\n      date: date.toISOString()\n    },\n    senderHash: senderHash,\n    receiverHash: receiverHash,\n    receiver: receiver\n  };\n}\n\nexport async function deleteChatMessages(user, boardName, postNumber) {\n  await Chats.deleteOne(createUserHash(user));\n}\n"],"sourceRoot":"/source/"}