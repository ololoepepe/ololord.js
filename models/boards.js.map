{"version":3,"sources":["models/boards.js"],"names":[],"mappings":"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","file":"models/boards.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as MiscModel from './misc';\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport Hash from '../storage/hash';\n\nlet PostCounters = new Hash(redisClient(), 'postCounters', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet Threads = new Hash(redisClient(), 'threads');\n\nlet pageCounts = new Map();\n\nfunction addDataToThread(thread, board) {\n  thread.bumpLimit = board.bumpLimit;\n  thread.postLimit = board.postLimit;\n  thread.bumpLimitReached = (thread.postCount >= board.bumpLimit);\n  thread.postLimitReached = (thread.postCount >= board.postLimit);\n  thread.postingEnabled = (board.postingEnabled && !thread.closed);\n}\n\nexport function postSubject(post, maxLength) {\n  let subject = '';\n  if (post.subject) {\n    subject = post.subject;\n  } else if (post.text) {\n    subject = Tools.plainText(post.text);\n  }\n  subject = subject.replace(/\\r*\\n+/gi, '');\n  maxLength = Tools.option(maxLength, 'number', 0, { test: (l) => { return l > 0; } });\n  if (maxLength > 1 && subject.length > maxLength) {\n    subject = subject.substr(0, maxLength - 1) + '…';\n  }\n  return subject;\n}\n\nexport async function getThread(boardName, threadNumber, archived) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  let posts = await ThreadsModel.getThreadPosts(boardName, threadNumber, {\n    withExtraData: true,\n    withFileInfos: true,\n    withReferences: true\n  });\n  thread.postCount = posts.length;\n  thread.opPost = posts.splice(0, 1)[0];\n  thread.lastPosts = posts;\n  thread.title = postSubject(thread.opPost, 50) || null;\n  thread.archived = !!archived;\n  addDataToThread(thread, board);\n  return thread;\n}\n\nexport async function getPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  pageNumber = Tools.option(pageNumber, 'number', -1, { test: (n) => { return n >= 0; } });\n  let pageCount = pageCounts.get(boardName);\n  if (pageNumber < 0 || pageNumber >= pageCount) {\n    return Promise.reject(new Error(Tools.translate('Invalid page number')));\n  }\n  let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n  let threads = await ThreadsModel.getThreads(boardName, threadNumbers, { withPostNumbers: true });\n  threads.sort(ThreadsModel.sortThreadsByDate);\n  let start = pageNumber * board.threadsPerPage;\n  threads = threads.slice(start, start + board.threadsPerPage);\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    let lastPosts = await ThreadsModel.getThreadPosts(boardName, thread.number, {\n      limit: board.maxLastPosts,\n      reverse: true,\n      notOP: true,\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.lastPosts = lastPosts.reverse();\n    thread.postCount = thread.postNumbers.length;\n    delete thread.postNumbers;\n    addDataToThread(thread, board);\n    if (thread.postCount > (board.maxLastPosts + 1)) {\n      thread.omittedPosts = thread.postCount - board.maxLastPosts - 1;\n    } else {\n      thread.omittedPosts = 0;\n    }\n  });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    pageCount: pageCount,\n    currentPage: pageNumber,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Tools.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getCatalog(boardName, sortMode) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n  let threads = await ThreadsModel.getThreads(boardName, threadNumbers, { withPostNumbers: true });\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.postCount = thread.postNumbers.length;\n    delete thread.postNumbers;\n    addDataToThread(thread, board);\n  });\n  let sortFunction = ThreadsModel.sortThreadsByCreationDate;\n  switch ((sortMode || 'date').toLowerCase()) {\n  case 'recent':\n    sortFunction = ThreadsModel.sortThreadsByDate;\n    break;\n  case 'bumps':\n    sortFunction = ThreadsModel.sortThreadsByPostCount;\n    break;\n  default:\n    break;\n  }\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort(sortFunction),\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Tools.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getArchive(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let path = `${__dirname}/../public/${boardName}/arch`;\n  let exists = await FS.exists(path);\n  if (exists) {\n    var fileNames = await FS.list(path);\n  } else {\n    var fileNames = [];\n  }\n  fileNames = fileNames.filter((fileName) => { return fileName.split('.').pop() === 'json'; });\n  let threads = await Tools.series(fileNames, async function(fileName) {\n    let stats = await FS.stat(`${path}/${fileName}`);\n    return {\n      boardName: boardName,\n      number: +fileName.split('.').shift(),\n      birthtime: stats.node.birthtime.valueOf()\n    };\n  }, true);\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort((t1, t2) => { return t2 - t1; }), //NOTE: The order is correct (t2 - t1).\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Tools.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getLastPostNumber(boardName) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid boardName')));\n  }\n  return await PostCounters.getOne(boardName);\n}\n\nexport async function getLastPostNumbers(boardNames) {\n  if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  if (boardNames.some(boardName => !Board.board(boardName))) {\n    return Promise.reject(new Error(Tools.translate('Invalid boardName')));\n  }\n  return await PostCounters.getSome(boardNames);\n}\n\nexport async function getPageCount(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let threadCount = await Threads.count(boardName);\n  let pageCount = Math.ceil(threadCount / board.threadsPerPage) || 1;\n  pageCounts.set(boardName, pageCount);\n  return pageCount;\n}\n\nexport async function nextPostNumber(boardName, incrementBy) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  incrementBy = Tools.option(incrementBy, 'number', 1, { test: (i) => { i >= 1; } });\n  let postNumber = await PostCounters.incrementBy(boardName, incrementBy);\n  if (!postNumber) {\n    return 0;\n  }\n  //TODO: improve get skipping\n  if (1 === incrementBy && board.skippedGetOrder > 0 && !(postNumber % Math.pow(10, board.skippedGetOrder))) {\n    return await nextPostNumber(boardName, incrementBy);\n  }\n  return postNumber;\n}\n\nexport async function initialize() {\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    await getPageCount(boardName);\n  });\n  await ThreadsModel.clearDeletedThreads();\n}\n\nexport async function delall(req, ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let deletedThreads = {};\n  let updatedThreads = {};\n  let deletedPosts = {};\n  await Tools.series(boardNames, async function(boardName) {\n    let postNumbers = await UsersModel.getUserPostNumbers(ip, boardName);\n    let posts = await PostsModel.getPosts(boardName, postNumbers);\n    posts.forEach((post) => {\n      if (post.threadNumber === post.number) {\n        deletedThreads[`${boardName}:${post.threadNumber}`] = {\n          boardName: boardName,\n          number: post.threadNumber\n        };\n      }\n    });\n    posts.filter(post => !deletedThreads.hasOwnProperty(`${boardName}:${post.threadNumber}`)).forEach((post) => {\n      updatedThreads[`${boardName}:${post.threadNumber}`] = {\n        boardName: boardName,\n        number: post.threadNumber\n      };\n      deletedPosts[`${boardName}:${post.number}`] = {\n        boardName: boardName,\n        number: post.number\n      };\n    });\n  });\n  await Tools.series(deletedPosts, async function(post) {\n    await PostsModel.removePost(post.boardName, post.number);\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await ThreadsModel.removeThread(thread.boardName, thread.number);\n  });\n  await Tools.series(updatedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'edit');\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'delete');\n  });\n}\n"],"sourceRoot":"/source/"}