{"version":3,"sources":["models/users.js"],"names":[],"mappings":"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","file":"models/users.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport * as PostsModel from './posts';\nimport redisClient from '../storage/redis-client-factory';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport UnorderedSet from '../storage/unordered-set';\nimport Board from '../boards/board';\nimport * as Permissions from '../helpers/permissions';\nimport * as Tools from '../helpers/tools';\n\nlet BannedUserIPs = new UnorderedSet(redisClient(), 'bannedUserIps', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserHashes = new Hash(redisClient(), 'registeredUserHashes', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserIPs = new UnorderedSet(redisClient(), 'registeredUserIps', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserLevels = new Hash(redisClient(), 'registeredUserLevels', {\n  parse: false,\n  stringify: false\n});\nlet SuperuserHashes = new UnorderedSet(redisClient(), 'superuserHashes', {\n  parse: false,\n  stringify: false\n});\nlet SynchronizationData = new Key(redisClient(), 'synchronizationData');\nlet Threads = new Hash(redisClient(), 'threads');\nlet UserBanPostNumbers = new Hash(redisClient(), 'userBanPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet UserBans = new Key(redisClient(), 'userBans');\nlet UserCaptchaQuotas = new Hash(redisClient(), 'captchaQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\nlet UserPostNumbers = new UnorderedSet(redisClient(), 'userPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\n\nfunction transformIPBans(bans) {\n  return _(bans).reduce((acc, ban, ip) => {\n    ip = Tools.correctAddress(ip);\n    if (ip) {\n      acc[ip] = ban;\n    }\n    return acc;\n  }, {});\n}\n\nlet ipBans = Tools.createWatchedResource(`${__dirname}/../misc/user-bans.json`, (path) => {\n  return transformIPBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  ipBans = transformIPBans(JSON.parse(data));\n}) || {};\n\nfunction transformGeoBans(bans) {\n  return _(bans).reduce((acc, value, key) => {\n    if (typeof value === 'string') {\n      value = [value];\n    }\n    if (_(value).isArray()) {\n      value = new Set(value.map(ip => Tools.correctAddress(ip)).filter(ip => !!ip));\n    } else {\n      value = !!value;\n    }\n    acc.set(key.toUpperCase(), value);\n    return acc;\n  }, new Map());\n}\n\nlet geoBans = Tools.createWatchedResource(`${__dirname}/../misc/geo-bans.json`, (path) => {\n  return transformGeoBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  geoBans = transformGeoBans(JSON.parse(data));\n}) || new Map();\n\nexport async function getUserCaptchaQuota(boardName, userIp) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let quota = await UserCaptchaQuotas.getOne(`${boardName}:${userIp}`);\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setUserCaptchaQuota(boardName, userIp, quota) {\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.setOne(`${boardName}:${userIp}`, quota);\n}\n\nexport async function useCaptcha(boardName, userIp) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (board.captchaQuota < 1) {\n    return 0;\n  }\n  let key = `${boardName}:${userIp}`;\n  let quota = await UserCaptchaQuotas.incrementBy(key, -1);\n  if (+quota < 0) {\n    return await UserCaptchaQuotas.setOne(key, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function getUserIP(boardName, postNumber) {\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  return post.user.ip;\n}\n\nexport async function getBannedUserBans(ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!boardNames) {\n    boardNames = Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  let bans = await Tools.series(boardNames, async function(boardName) {\n    return await UserBans.get(`${ip}:${boardName}`);\n  }, {});\n  return _(bans).pick(ban => !!ban);\n}\n\nexport async function getBannedUsers(boardNames) {\n  let ips = await BannedUserIPs.getAll();\n  return await Tools.series(ips, async function(ip) {\n    return await getBannedUserBans(ip, boardNames);\n  }, {});\n}\n\nexport async function getRegisteredUserLevel(hashpass, boardName) {\n  if (!hashpass || !Tools.mayBeHashpass(hashpass)) {\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  }\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let exists = await SuperuserHashes.contains(hashpass);\n  if (exists) {\n    return 'SUPERUSER';\n  }\n  let level = await RegisteredUserLevels.getOne(boardName, hashpass);\n  return level || null;\n}\n\nexport async function getRegisteredUserLevelByIp(ip, boardName) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n  }\n  let hashpass = await RegisteredUserHashes.getOne(ip);\n  if (!hashpass) {\n    return null;\n  }\n  return await getRegisteredUserLevel(hashpass, boardName);\n}\n\nexport async function getRegisteredUserLevels(hashpass) {\n  if (!hashpass || !Tools.mayBeHashpass(hashpass)) {\n    return {};\n  }\n  let exists = await SuperuserHashes.contains(hashpass);\n  if (exists) {\n    return Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 'SUPERUSER';\n      return acc;\n    }, {});\n  }\n  let levels = await RegisteredUserLevels.getAll(hashpass);\n  return levels || {};\n}\n\nexport async function getRegisteredUserLevelsByIp(ip) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return {};\n  }\n  let hashpass = await RegisteredUserHashes.getOne(ip);\n  if (!hashpass) {\n    return {};\n  }\n  return await getRegisteredUserLevels(hashpass);\n}\n\nexport async function getRegisteredUser(hashpass) {\n  let user = { hashpass: hashpass };\n  let levels = await RegisteredUserLevels.getAll(hashpass);\n  if (_(levels).isEmpty()) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  user.levels = levels;\n  let ips = await RegisteredUserIPs.getAll(hashpass);\n  user.ips = ips || [];\n  return user;\n}\n\nexport async function getRegisteredUsers() {\n  let keys = await RegisteredUserLevels.find();\n  return await Tools.series(keys.map((key) => {\n    return key.split(':')[1];\n  }), async function(hashpass) {\n    return await getRegisteredUser(hashpass);\n  }, true);\n}\n\nasync function processUserIPs(ips) {\n  if (_(ips).isArray()) {\n    ips = ips.map(ip => Tools.correctAddress(ip));\n    if (ips.some(ip => !ip)) {\n      return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n    }\n  }\n  return ips;\n}\n\nasync function processRegisteredUserData(levels, ips) {\n  if (_(levels).isEmpty()) {\n    return Promise.reject(new Error(Tools.translate('Access level is not specified for any board')));\n  }\n  if (Object.keys(levels).some(boardName => !Board.board(boardName))) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let invalidLevel = _(levels).some((level) => {\n    return (Tools.compareRegisteredUserLevels(level, 'USER') < 0)\n      || (Tools.compareRegisteredUserLevels(level, 'SUPERUSER') >= 0);\n  });\n  if (invalidLevel) {\n    return Promise.reject(new Error(Tools.translate('Invalid access level')));\n  }\n  return await processUserIPs(ips);\n}\n\nasync function addUserIPs(hashpass, ips) {\n  //TODO: May be optimised (hmset)\n  await Tools.series(ips, async function(ip) {\n    await RegisteredUserHashes.setOne(ip, hashpass);\n    await RegisteredUserIPs.addOne(ip, hashpass);\n  });\n}\n\nasync function removeUserIPs(hashpass) {\n  let ips = await RegisteredUserIPs.getAll(hashpass);\n  if (ips && ips.length > 0) {\n    await RegisteredUserHashes.deleteSome(ips);\n  }\n  await RegisteredUserIPs.delete(hashpass);\n}\n\nexport async function registerUser(hashpass, levels, ips) {\n  ips = await processRegisteredUserData(levels, ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  let existingSuperuserHash = await SuperuserHashes.contains(hashpass);\n  if (existingSuperuserHash) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered as superuser')));\n  }\n  await RegisteredUserLevels.setSome(levels, hashpass);\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function updateRegisteredUser(hashpass, levels, ips) {\n  ips = await processRegisteredUserData(levels, ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (!existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  await RegisteredUserLevels.setSome(levels, hashpass);\n  await removeUserIPs(hashpass);\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function unregisterUser(hashpass) {\n  let count = await RegisteredUserLevels.delete(hashpass);\n  if (count <= 0) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  await removeUserIPs(hashpass);\n}\n\nexport async function addSuperuser(hashpass, ips) {\n  if (!hashpass) {\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  }\n  ips = await processUserIPs(ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  let count = await SuperuserHashes.addOne(hashpass);\n  if (count <= 0) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function removeSuperuser(password, notHashpass) {\n  if (!hashpass) {\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  }\n  let count = await SuperuserHashes.deleteOne(hashpass);\n  if (count <= 0) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  await removeUserIPs();\n}\n\nexport async function getSynchronizationData(key) {\n  return await SynchronizationData.get(key);\n}\n\nexport async function getUserPostNumbers(ip, boardName) {\n  ip = Tools.correctAddress(ip) || '*';\n  boardName = boardName || '*';\n  return await UserPostNumbers.find(`${ip}:${boardName}`);\n}\n\nexport async function addUserPostNumber(ip, boardName, postNumber) {\n  ip = Tools.correctAddress(ip);\n  await UserPostNumbers.addOne(postNumber, `${ip}:${boardName}`);\n}\n\nexport async function removeUserPostNumber(ip, boardName, postNumber) {\n  ip = Tools.correctAddress(ip);\n  await UserPostNumbers.deleteOne(postNumber, `${ip}:${boardName}`);\n}\n\nfunction checkGeoBan(geolocationInfo, ip) {\n  let def = geoBans.get('*');\n  if (def) {\n    geolocationInfo = geolocationInfo || {};\n  } else if (!geolocationInfo || !geolocationInfo.countryCode) {\n    return;\n  }\n  let countryCode = geolocationInfo.countryCode;\n  if (typeof countryCode !== 'string') {\n    countryCode = '';\n  }\n  let user = geoBans.get(countryCode.toUpperCase());\n  if (ip && ((typeof user === 'object' && user.has(ip)) || (typeof def === 'object' && def.has(ip)))) {\n    return;\n  }\n  if (typeof user === 'boolean' && !user) {\n    return;\n  }\n  if (!user && !def) {\n    return;\n  }\n  return Promise.reject(new Error(Tools.translate('Posting is disabled for this country')));\n}\n\nexport async function checkUserBan(ip, boardNames, { write, geolocationInfo } = {}) {\n  ip = Tools.correctAddress(ip);\n  let ban = ipBans[ip];\n  if (ban && (write || 'NO_ACCESS' === ban.level)) {\n    return Promise.reject({ ban: ban });\n  }\n  let bans = await getBannedUserBans(ip, boardNames);\n  ban = _(bans).find((ban) => { return ban && (write || 'NO_ACCESS' === ban.level); });\n  if (ban) {\n    return Promise.reject({ ban: ban });\n  }\n  if (geolocationInfo) {\n    return checkGeoBan(geolocationInfo, ip);\n  }\n}\n\nexport async function checkUserPermissions(req, boardName, postNumber, permission, password) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('Not such post: $[1]', '', `/${boardName}/${postNumber}`)));\n  }\n  let { user, threadNumber } = post;\n  if (req.isSuperuser()) {\n    return;\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), Permissions[permission]()) > 0) {\n    if (Tools.compareRegisteredUserLevels(req.level(boardName), 'USER') > 0\n      && Tools.compareRegisteredUserLevels(req.level(boardName), user.level) > 0) {\n      return;\n    }\n    if (req.hashpass && req.hashpass === user.hashpass) {\n      return;\n    }\n    if (password && password === user.password) {\n      return;\n    }\n  }\n  if (!board.opModeration) {\n    return Promise.reject(new Error(Tools.translate('Not enough rights')));\n  }\n  let thread = await Threads.getOne(threadNumber, boardName);\n  if (thread.user.ip !== req.ip && (!req.hashpass || req.hashpass !== thread.user.hashpass)) {\n    return Promise.reject(new Error(Tools.translate('Not enough rights')));\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), user.level) >= 0) {\n    return;\n  }\n  if (req.hashpass && req.hashpass === user.hashpass) {\n    return;\n  }\n  if (password && password === user.password) {\n    return;\n  }\n  return Promise.reject(new Error(Tools.translate('Not enough rights')));\n}\n\nexport async function updatePostBanInfo(boardName, postNumber) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return;\n  }\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return;\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nexport async function banUser(ip, newBans) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n  }\n  let oldBans = await UsersModel.getBannedUserBans(userIp);\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    let key = `${ip}:${boardName}`;\n    let ban = newBans[boardName];\n    if (ban) {\n      await UserBans.set(ban, key);\n      if (ban.expiresAt) {\n        await UserBans.expire(Math.ceil((+ban.expiresAt - +Tools.now()) / 1000), key);\n      }\n      if (ban.postNumber) {\n        await UserBanPostNumbers.setOne(key, ban.postNumber);\n        await updatePostBanInfo(boardName, ban.postNumber);\n      }\n    } else {\n      ban = oldBans[boardName];\n      if (!ban) {\n        return;\n      }\n      await UserBans.delete(key);\n      if (ban.postNumber) {\n        UserBanPostNumbers.deleteOne(ban.postNumber, key);\n        await updatePostBanInfo(boardName, ban.postNumber);\n      }\n    }\n  });\n  await BannedUserIPs[_(newBans).isEmpty() ? 'deleteOne' : 'addOne'](ip);\n}\n\nasync function updateBanOnMessage(message) {\n  try {\n    let ip = Tools.correctAddress(message.split(':').slice(1, -1).join(':'));\n    if (!ip) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    let boardName = message.split(':').pop();\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let postNumber = await UserBanPostNumbers.getOne(message);\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UserBanPostNumbers.deleteOne(message);\n    let keys = await UserBans.find(`${ip}:*`);\n    if (!keys || keys.length <= 0) {\n      await BannedUserIPs.deleteOne(ip);\n    }\n    await updatePostBanInfo(boardName, postNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function initializeUserBansMonitoring() {\n  //NOTE: Enabling \"key expired\" notifications\n  const CHANNEL = `__keyevent@${config('system.redis.db')}__:expired`;\n  const db = redisClient(true);\n  db.on('message', (channel, message) => {\n    if (CHANNEL !== channel) {\n      return;\n    }\n    updateBanOnMessage(message);\n  });\n  await redisClient().config('SET', 'notify-keyspace-events', 'Ex');\n  db.subscribe(CHANNEL).catch((err) => {\n    Logger.error(err.stack || err);\n  });\n}\n"],"sourceRoot":"/source/"}