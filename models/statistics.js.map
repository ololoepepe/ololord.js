{"version":3,"sources":["models/statistics.js"],"names":[],"mappings":"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","file":"models/statistics.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as BoardsModel from './boards';\nimport * as UsersModel from './users';\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nasync function gatherBoardStatistics(board) {\n  const BOARD_PUBLIC_PATH = `${__dirname}/../public/${board.name}`;\n  let statistics = { diskUsage: 0 };\n  try {\n    let lastPostNumber = await BoardsModel.getLastPostNumber(board.name);\n    statistics.postCount = lastPostNumber;\n    statistics.postingSpeed = Renderer.postingSpeedString(board.launchDate, lastPostNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    let fileNames = await FS.list(`${BOARD_PUBLIC_PATH}/src`);\n    statistics.fileCount = fileNames.length;\n  } catch (err) {\n    if ('ENOENT' !== err.code) {\n      Logger.error(err.stack || err);\n    }\n  }\n  await Tools.series(['src', 'thumb', 'arch'], async function(subpath) {\n    try {\n      let size = await Files.diskUsage(`${BOARD_PUBLIC_PATH}/${subpath}`);\n      statistics.diskUsage += size;\n    } catch (err) {\n      if ('ENOENT' !== err.code) {\n        Logger.error(err.stack || err);\n      }\n    }\n  });\n  return statistics;\n}\n\n//Must be called from the master process only.\nexport async function generateStatistics() {\n  if (!Cluster.isMaster) {\n    Logger.error(Tools.translate('Error: generateStatistics() called from worker process.'));\n    return;\n  }\n  console.log(Tools.translate('Generating statisticsâ€¦'));\n  let statistics = {\n    boards: [],\n    total: {\n      postCount: 0,\n      fileCount: 0,\n      diskUsage: 0\n    }\n  };\n  let launchDate = _.now();\n  try {\n    let keys = await UsersModel.getUserPostNumbers();\n    let uniqueUsers = Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 0;\n      return acc;\n    }, {});\n    statistics.total.uniqueIPCount = keys.map((key) => {\n      return {\n        ip: key.split(':').slice(1, -1).join(':'),\n        boardName: key.split(':').pop()\n      };\n    }).filter(userPostInfo => uniqueUsers.hasOwnProperty(userPostInfo.boardName)).reduce((acc, userPostInfo) => {\n      ++uniqueUsers[userPostInfo.boardName];\n      acc.add(userPostInfo.ip);\n      return acc;\n    }, new Set()).size;\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      let boardLaunchDate = board.launchDate.valueOf();\n      if (boardLaunchDate < statistics.launchDate) {\n        launchDate = boardLaunchDate;\n      }\n      let boardStatistics = await gatherBoardStatistics(board);\n      boardStatistics.name = board.name;\n      boardStatistics.title = board.title;\n      boardStatistics.hidden = board.hidden;\n      boardStatistics.uniqueIPCount = uniqueUsers[board.name];\n      statistics.total.postCount += boardStatistics.postCount;\n      statistics.total.fileCount += boardStatistics.fileCount;\n      statistics.total.diskUsage += boardStatistics.diskUsage;\n      statistics.boards.push(boardStatistics);\n    });\n    statistics.total.postingSpeed = Renderer.postingSpeedString(launchDate, statistics.total.postCount);\n    let data = await IPC.send('getConnectionIPs');\n    statistics.online = data.reduce((acc, ips) => {\n      _(ips).each((_1, ip) => { acc.add(ip); });\n      return acc;\n    }, new Set()).size;\n    statistics.uptime = process.uptime();\n    await Cache.writeFile('misc/statistics.json', JSON.stringify(statistics));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}