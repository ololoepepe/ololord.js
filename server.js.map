{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport _ from 'underscore';\nimport Cluster from 'cluster';\nimport express from 'express';\nimport expressCluster from 'express-cluster';\nimport HTTP from 'http';\n\nimport Board from './boards/board';\nimport Captcha from './captchas/captcha';\nvar NodeCaptcha = require('./captchas/node-captcha'); //TODO\nvar NodeCaptchaNoscript = require('./captchas/node-captcha-noscript'); //TODO\nimport BoardController from './controllers/board';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport commands from './core/commands';\nimport * as Renderer from './core/renderer';\nimport WebSocketServer from './core/websocket-server';\nimport * as BoardsModel from './models/boards';\nimport * as StatisticsModel from './models/statistics';\nvar Chat = require(\"./helpers/chat\");\nimport config from './helpers/config';\nvar Database = require(\"./helpers/database\");\nimport * as IPC from './helpers/ipc';\nimport Logger from './helpers/logger';\nimport * as OnlineCounter from './helpers/online-counter';\nimport Program from './helpers/program';\nimport * as Tools from './helpers/tools';\nimport geolocation from './storage/geolocation';\nimport sqlClient from './storage/sql-client-factory';\n\nconfig.installSetHook(\"site.locale\", Tools.setLocale);\n\nfunction spawnCluster() {\n  expressCluster(async function(worker) {\n    console.log(`[${process.pid}] Initializing...`);\n    console.log(1);\n    let app = express();\n    console.log(2, middlewares);\n    app.use(middlewares);\n    console.log(3);\n    app.use(controllers);\n    console.log(4);\n    try {\n      await geolocation.initialize();\n      console.log(5);\n      await sqlClient.initialize();\n      console.log(6);\n      await BoardsModel.initialize();\n      console.log(7);\n      await Renderer.reloadTemplates();\n      console.log(8);\n      var sockets = {};\n      var nextSocketId = 0;\n      var server = HTTP.createServer(app);\n      var ws = new WebSocketServer(server);\n      ws.on(\"sendChatMessage\", function(msg, conn) {\n          var data = msg.data || {};\n          return Chat.sendMessage({\n              ip: conn.ip,\n              hashpass: conn.hashpass\n          }, data.boardName, data.postNumber, data.text, ws).then(function(result) {\n              var message = result.message;\n              if (result.senderHash != result.receiverHash) {\n                  message.type = \"in\";\n                  var receiver = result.receiver;\n                  var ip = receiver.hashpass ? null : receiver.ip;\n                  ws.sendMessage(\"newChatMessage\", {\n                      message: message,\n                      boardName: data.boardName,\n                      postNumber: data.postNumber\n                  }, ip, receiver.hashpass);\n              }\n              message.type = \"out\";\n              return Promise.resolve(message);\n          });\n      });\n      var subscriptions = new Map();\n      ws.on(\"subscribeToThreadUpdates\", function(msg, conn) {\n          var data = msg.data || {};\n          var key = data.boardName + \"/\" + data.threadNumber;\n          if (subscriptions.has(key)) {\n              subscriptions.get(key).add(conn);\n          } else {\n              var s = new Set();\n              s.add(conn);\n              subscriptions.set(key, s);\n          }\n      });\n      ws.on(\"unsubscribeFromThreadUpdates\", function(msg, conn) {\n          var data = msg.data || {};\n          var key = data.boardName + \"/\" + data.threadNumber;\n          var s = subscriptions.get(key);\n          if (!s)\n              return;\n          s.delete(conn);\n          if (s.size < 1)\n              subscriptions.delete(key);\n      });\n      server.listen(config(\"server.port\", 8080), function() {\n          console.log(\"[\" + process.pid + \"] Listening on port \" + config(\"server.port\", 8080) + \"...\");\n          IPC.on('exit', function(status) {\n              process.exit(status);\n          });\n          IPC.on('stop', function() {\n              return new Promise(function(resolve, reject) {\n                  server.close(function() {\n                      Tools.forIn(sockets, function(socket, socketId) {\n                          delete sockets[socketId];\n                          socket.destroy();\n                      });\n                      OnlineCounter.clear();\n                      console.log(\"[\" + process.pid + \"] Closed\");\n                      resolve();\n                  });\n              });\n          });\n          IPC.on('start', function() {\n              return new Promise(function(resolve, reject) {\n                  server.listen(config(\"server.port\", 8080), function() {\n                      console.log(\"[\" + process.pid + \"] Listening on port \" + config(\"server.port\", 8080)\n                          + \"...\");\n                      resolve();\n                  });\n              });\n          });\n          IPC.on('render', function(data) {\n              var f = BoardController[`${data.type}`];\n              if (typeof f != \"function\")\n                  return Promise.reject(\"Invalid generator function\");\n              return f.call(BoardController, data.key, data.data);\n          });\n          IPC.on('reloadBoards', function() {\n              Board.initialize();\n              return Promise.resolve();\n          });\n          IPC.on('reloadConfig', function(data) {\n              if (data)\n                  config.setConfigFile(data);\n              else\n                  config.reload();\n              return Promise.resolve();\n          });\n          IPC.on('reloadTemplates', function() {\n            return Renderer.reloadTemplates();\n          });\n          IPC.on('notifyAboutNewPosts', function(data) {\n              Tools.forIn(data, function(_, key) {\n                  var s = subscriptions.get(key);\n                  if (!s)\n                      return;\n                  s.forEach(function(conn) {\n                      conn.sendMessage(\"newPost\");\n                  });\n              });\n              return Promise.resolve();\n          });\n          IPC.on('getConnectionIPs', function() {\n              return Promise.resolve(OnlineCounter.unique());\n          });\n          IPC.send('ready').catch(function(err) {\n              Logger.error(err);\n          });\n      });\n      server.on(\"connection\", function(socket) {\n          var socketId = ++nextSocketId;\n          sockets[socketId] = socket;\n          socket.on(\"close\", function() {\n              delete sockets[socketId];\n          });\n      });\n    } catch (err) {\n      console.log(err);\n      Logger.error(err.stack || err);\n    }\n  }, {\n    count: config('system.workerCount'),\n    respawn: true\n  });\n}\n\nfunction generateFileName() {\n  let fileName = _.now().toString();\n  if (fileName != generateFileName.lastFileName) {\n    generateFileName.lastFileName = fileName;\n    return fileName;\n  }\n  return new Promise((resolve) => {\n    setTimeout(async function() {\n      let fileName = await fileName();\n      resolve(fileName);\n    }, 1);\n  });\n}\n\nfunction onReady(initCallback) {\n  if (!onReady.ready) {\n    onReady.ready = 0;\n  }\n  ++onReady.ready;\n  if (config('system.workerCount') === onReady.ready) {\n    initCallback();\n    if (config('server.statistics.enabled')) {\n      setInterval(StatisticsModel.generateStatistics.bind(StatisticsModel),\n        config('server.statistics.ttl') * Tools.Minute);\n    }\n    if (config('server.rss.enabled')) {\n      setInterval(BoardController.renderRSS.bind(BoardController), config('server.rss.ttl') * Tools.Minute);\n    }\n    commands();\n  }\n}\n\nfunction spawnWorkers(initCallback) {\n  console.log(Tools.translate('Spawning workers, please, wait...'));\n  spawnCluster();\n  IPC.on('ready', onReady.bind(null, initCallback));\n  IPC.on('fileName', generateFileName);\n  IPC.on('render', (data) => {\n    return IPC.render(data.boardName, data.threadNumber, data.postNumber, data.action);\n  });\n  IPC.on('renderArchive', (data) => { //TODO\n    return IPC.renderArchive(data);\n  });\n  IPC.on('stop', () => {\n    return IPC.send('stop');\n  });\n  IPC.on('start', () => {\n    return IPC.send('start');\n  });\n  IPC.on('reloadBoards', () => {\n    Board.initialize();\n    return IPC.send('reloadBoards');\n  });\n  IPC.on('reloadTemplates', async function() {\n    await Renderer.compileTemplates();\n    await Renderer.reloadTemplates();\n    return IPC.send('reloadTemplates');\n  });\n  IPC.on('notifyAboutNewPosts', (data) => {\n    return IPC.send('notifyAboutNewPosts', data);\n  });\n  IPC.on('rerenderCache', (rerenderArchive) => {\n    if (rerenderArchive) {\n      return Renderer.rerender();\n    } else {\n      //return Renderer.rerender(Tools.ARCHIVE_PATHS_REGEXP, true);\n    }\n  });\n}\n\nBoard.initialize();\nCaptcha.initialize();\n\nif (Cluster.isMaster) {\n  (async function() {\n    try {\n      await NodeCaptcha.removeOldCaptchImages();\n      await NodeCaptchaNoscript.removeOldCaptchImages();\n      let initCallback = await Database.initialize();\n      await sqlClient.initialize(true);\n      await Renderer.compileTemplates();\n      await Renderer.reloadTemplates();\n      if (Program.rerender || config('system.rerenderCacheOnStartup')) {\n        if (Program.archive || config('system.rerenderArchive')) { //TODO\n          await Renderer.rerender();\n        } else {\n          await Renderer.rerender(['**', '!/*/arch/*']);\n        }\n      }\n      await StatisticsModel.generateStatistics();\n      await Renderer.generateTemplatingJavaScriptFile();\n      await Renderer.generateCustomJavaScriptFile();\n      await Renderer.generateCustomCSSFiles();\n      spawnWorkers(initCallback);\n    } catch (err) {\n      Logger.error(err.stack || err);\n      process.exit(1);\n    }\n  })();\n} else {\n  spawnCluster();\n}\n"],"sourceRoot":"/source/"}