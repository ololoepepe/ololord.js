{"version":3,"sources":["middlewares/index.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAY,K;;;;;;AAEZ,IAAM,SAAS,sBAAO,8BAAP,CAAf;AACA,IAAI,cAAc,EAAlB;;AAEA,SAAS,SAAT,GAAqB;AACnB,MAAI,WAAW,MAAf,EAAuB;AACrB,gBAAY,IAAZ;AACD;AACD,MAAI,CAAC,sBAAO,+BAAP,CAAL,EAA8C;AAC5C;AACD;AACD,cAAY,IAAZ,CAAiB,oBAAU;AACzB,eAAW,sBAAO,iCAAP,CADc;AAEzB,eAAW,sBAAO,iCAAP,CAFc;AAGzB,YAAQ,sBAAO,8BAAP,CAHiB;AAIzB,eAAW,sBAAO,iCAAP,CAJc;AAKzB,mBAAe,sBAAO,qCAAP,CALU;AAMzB,WAAO,sBAAO,6BAAP,CANkB;AAOzB,iBAAa,uBAAa;AAAA,wCAAT,IAAS;AAAT,YAAS;AAAA;;AACxB,uBAAO,KAAP,4CAAqB,MAAM,SAAN,CAAgB,gBAAhB,CAArB,SAA2D,IAA3D;AACD;AATwB,GAAV,EAUd,OAVc,EAAjB;AAWD;;AAED,SAAS,WAAT,GAAuB;AACrB,MAAI,aAAa,MAAjB,EAAyB;AACvB,gBAAY,IAAZ;AACD;AACD,cAAY,IAAZ,CAAiB,kBAAQ,MAAR,CAAkB,SAAlB,gBAAjB;AACD;;AAED,IAAI,UAAU,MAAd,EAAsB;AACpB,cAAY,IAAZ;AACD;;AAED,YAAY,IAAZ;;AAEA,YAAY,IAAZ;;AAEA,IAAI,sBAAO,8BAAP,CAAJ,EAA4C;AAC1C;AACA;AACD,CAHD,MAGO;AACL;AACA;AACD;;AAED,IAAI,iBAAiB,MAArB,EAA6B;AAC3B,cAAY,IAAZ;AACD;;AAED,YAAY,IAAZ,CAAiB,6BAAjB;;AAEA,YAAY,IAAZ;;AAEA,YAAY,IAAZ;;AAEA,IAAI,cAAc,MAAlB,EAA0B;AACxB,cAAY,IAAZ;AACD;;AAED,YAAY,IAAZ;;kBAEe,W","file":"middlewares/index.js","sourcesContent":["import cookieParser from 'cookie-parser';\nimport DDDoS from 'dddos';\nimport express from 'express';\n\nimport cookies from './cookies';\nimport hashpass from './hashpass';\nimport ipFix from './ip-fix';\nimport log from './log';\nimport onlineCounter from './online-counter';\nimport registeredUser from './registered-user';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst BEFORE = config('system.log.middleware.before');\nlet middlewares = [];\n\nfunction setupDdos() {\n  if ('ddos' === BEFORE) {\n    middlewares.push(log);\n  }\n  if (!config('server.ddosProtection.enabled')) {\n    return;\n  }\n  middlewares.push(new DDDoS({\n    errorData: config('server.ddosProtection.errorData'),\n    errorCode: config('server.ddosProtection.errorCode'),\n    weight: config('server.ddosProtection.weight'),\n    maxWeight: config('server.ddosProtection.maxWeight'),\n    checkInterval: config('server.ddosProtection.checkInterval'),\n    rules: config('server.ddosProtection.rules'),\n    logFunction: (...args) => {\n      Logger.error(Logger, Tools.translate('DDoS detected:'), ...args);\n    }\n  }).express());\n}\n\nfunction setupStatic() {\n  if ('static' === BEFORE) {\n    middlewares.push(log);\n  }\n  middlewares.push(express.static(`${__dirname}/../public`));\n}\n\nif ('all' === BEFORE) {\n  middlewares.push(log);\n}\n\nmiddlewares.push(ipFix);\n\nmiddlewares.push(onlineCounter);\n\nif (config('server.ddosProtection.static')) {\n  setupDdos();\n  setupStatic();\n} else {\n  setupStatic();\n  setupDdos();\n}\n\nif ('middleware' === BEFORE) {\n  middlewares.push(log);\n}\n\nmiddlewares.push(cookieParser());\n\nmiddlewares.push(hashpass);\n\nmiddlewares.push(registeredUser);\n\nif ('request' === BEFORE) {\n  middlewares.push(log);\n}\n\nmiddlewares.push(cookies);\n\nexport default middlewares;\n"],"sourceRoot":"/source/"}