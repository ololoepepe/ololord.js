{"version":3,"sources":["helpers/vk.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;IACY,K;;;;;;;;;sDAEG,iBAAe,MAAf,EAAuB,MAAvB;AAAA,QAYT,QAZS,EAoBT,IApBS;AAAA;AAAA;AAAA;AAAA;AAAA,gBACR,MADQ;AAAA;AAAA;AAAA;;AAAA,6CAEJ,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,uBAAhB,CAAV,CAAf,CAFI;;AAAA;AAIb,qBAAS,UAAU,EAAnB;AACA,mBAAO,YAAP,GAAsB,IAPZ,KAOY,UAAO,4BAAP,CAAtB;AACA,qBAAS,0BAAE,MAAF,EAAU,GAAV,CAAc,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACrC,kBAAI,CAAC,0BAAE,KAAF,EAAS,OAAT,EAAL,EAAyB;AACvB,wBAAQ,CAAC,KAAD,CAAR;AACD;AACD,qBAAO,MAAM,GAAN,CAAU,UAAC,CAAD;AAAA,uBAAU,GAAV,SAAiB,KAAjB;AAAA,eAAV,EAAoC,IAApC,CAAyC,GAAzC,CAAP;AACD,aALQ,EAKN,IALM,CAKD,GALC,CAAT;AANa;AAAA,mBAYQ,eAAK,OAAL,CAAa;AAChC,kDAAkC,MAAlC,SAA4C,MADZ;AAEhC,sBAAQ,MAFwB;AAGhC,uBAAS,MAAM,M;AAHiB,aAAb,CAZR;;AAAA;AAYT,oBAZS;;AAAA,kBAiBT,QAAQ,SAAS,MAjBR;AAAA;AAAA;AAAA;;AAAA,6CAkBJ,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,MAAM,SAAN,CAAgB,8BAAhB,CAAV,CAAf,CAlBI;;AAAA;AAAA;AAAA,mBAoBI,SAAS,IAAT,CAAc,IAAd,EApBJ;;AAAA;AAoBT,gBApBS;AAAA;AAAA,6CAsBJ,QAAQ,OAAR,CAAgB,KAAK,KAAL,CAAW,KAAK,QAAL,EAAX,CAAhB,CAtBI;;AAAA;AAAA;AAAA;AAAA,6CAwBJ,QAAQ,MAAR,aAxBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"helpers/vk.js","sourcesContent":["import _ from 'underscore';\nimport HTTP from 'q-io/http';\n\nimport config from '../helpers/tools';\nimport * as Tools from '../helpers/tools';\n\nexport default async function(method, params) {\n  if (!method) {\n    return Promise.reject(new Error(Tools.translate('Invalid VK API method')));\n  }\n  params = params || {};\n  params.access_token = config('site.vkontakte.accessToken');\n  params = _(params).map((value, key) => {\n    if (!_(value).isArray()) {\n      value = [value];\n    }\n    return value.map((v) => `${key}=${value}`).join('&');\n  }).join('&');\n  let response = await HTTP.request({\n    url: `https://api.vk.com/method/${method}?${params}`,\n    method: 'POST',\n    timeout: Tools.Minute //TODO: magic number\n  });\n  if (200 !== response.status) {\n    return Promise.reject(new Error(Tools.translate('Failed to call VK API method')));\n  }\n  let data = await response.body.read();\n  try {\n    return Promise.resolve(JSON.parse(data.toString()));\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n"],"sourceRoot":"/source/"}