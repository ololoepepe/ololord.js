{"version":3,"sources":["controllers/action-other.js"],"names":[],"mappings":"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","file":"controllers/action-other.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport geolocation from '../core/geolocation';\nimport * as Search from '../core/search';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nfunction splitCommand(cmd) {\n  let args = [];\n  let arg = '';\n  let quot = 0;\n  for (let i = 0; i < cmd.length; ++i) {\n    let c = cmd[i];\n    if (/\\s/.test(c)) {\n      if (quot) {\n        arg += c;\n      } else if (arg.length > 0) {\n        args.push(arg);\n        arg = '';\n      }\n    } else {\n      if ('\"' === c && (i < 1 || '\\\\' !== cmd[i - 1])) {\n        switch (quot) {\n        case 1:\n          quot = 0;\n          break;\n        case -1:\n          arg += c;\n          break;\n        case 0:\n        default:\n          quot = 1;\n          break;\n        }\n      } else if (\"'\" === c && (i < 1 || '\\\\' !== cmd[i - 1])) {\n        switch (quot) {\n        case 1:\n          arg += c;\n          break;\n        case -1:\n          quot = 0;\n          break;\n        case 0:\n        default:\n          quot = -1;\n          break;\n        }\n      } else {\n        if (('\"' === c || \"'\" === c) && (i > 0 || '\\\\' == cmd[i - 1]) && arg.length > 0) {\n          arg = arg.substring(0, arg.length - 1);\n        }\n        arg += c;\n      }\n    }\n  }\n  if (arg.length > 0) {\n    if (quot) {\n      return null;\n    }\n    args.push(arg);\n  }\n  let command = null;\n  if (args.length > 0) {\n    command = args.shift();\n  }\n  return {\n    command: command,\n    arguments: args\n  };\n}\n\nrouter.post('/action/sendChatMessage', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, text } } = await Tools.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    if (!text || typeof text !== 'string') {\n      throw new Error(Tools.translate('Message is empty'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await ChatsModel.addChatMessage(req, boardName, postNumber, text);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteChatMessages', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber } } = await Tools.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await ChatsModel.deleteChatMessages(req, boardName, postNumber);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/synchronize', async function(req, res, next) {\n  try {\n    let { fields: { key, data } } = await Tools.parseForm(req);\n    if (!key || typeof key !== 'string') {\n      throw new Error(Tools.translate('No key specified'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    try {\n      data = JSON.parse(data);\n    } catch (err) {\n      throw new Error(Tools.translate('Failed to parse data'));\n    }\n    await UsersModel.setSynchronizationData(key, data);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/search', async function(req, res, next) {\n  try {\n    let { fields: { query, boardName, page } } = await Tools.parseForm(req);\n    if (!query || typeof query !== 'string') {\n      throw new Error(Tools.translate('Search query is empty'));\n    }\n    if (query.length > config('site.maxSearchQueryLength')) {\n      throw new Error(Tools.translate('Search query is too long'));\n    }\n    if ('*' === boardName) {\n      boardName = '';\n    }\n    if (boardName && !Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n    let phrases = splitCommand(query);\n    if (!phrases || !phrases.command) {\n      throw new Error(Tools.translate('Invalid search query'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let model = {\n      searchQuery: query,\n      searchBoard: boardName\n    };\n    query = {\n      requiredPhrases: [],\n      excludedPhrases: [],\n      possiblePhrases: []\n    };\n    [phrases.command].concat(phrases.arguments).forEach((phrase) => {\n      if (phrase.substr(0, 1) === '+') {\n        query.requiredPhrases.push(phrase.substr(1).toLowerCase());\n      } else if (phrase.substr(0, 1) === '-') {\n        query.excludedPhrases.push(phrase.substr(1).toLowerCase());\n      } else {\n        query.possiblePhrases.push(phrase.toLowerCase());\n      }\n    });\n    model.phrases = query.requiredPhrases.concat(query.excludedPhrases).concat(query.possiblePhrases);\n    model.phrases = Tools.withoutDuplicates(model.phrases);\n    let result = await Search.findPosts(query, {\n      boardName: boardName,\n      page: page\n    });\n    let maxSubjectLength = config('system.search.maxResultPostSubjectLengh');\n    let maxTextLength = config('system.search.maxResultPostTextLengh');\n    model.searchResults = result.posts.map((post) => {\n      let text = (post.plainText || '').replace(/\\r*\\n+/g, ' ');\n      if (text.length > maxTextLength) {\n        text = text.substr(0, maxTextLength - 1) + '…';\n      }\n      let subject = post.subject || text;\n      if (subject.length > maxSubjectLength) {\n        subject = subject.substr(0, maxSubjectLength - 1) + '…';\n      }\n      return {\n        boardName: post.boardName,\n        postNumber: post.number,\n        threadNumber: post.threadNumber,\n        archived: post.archived,\n        subject: subject,\n        text: text\n      };\n    });\n    model.total = result.total;\n    model.max = result.max;\n    res.json(model);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}