{"version":3,"sources":["controllers/board.js"],"names":[],"mappings":"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","file":"controllers/board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport FS from 'q-io/fs';\nimport moment from 'moment';\n\nimport Board from '../boards/board';\nimport * as BoardsModel from '../models/board';\nimport * as MiscModel from '../models/misc';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost || oldPost.updatedAt < post.updatedAt || oldPost.bannedFor !== post.bannedFor\n      || oldPost.text === post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { targetPath, archived } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  thread.title = thread.title || (`${board.title} — ${thread.number}`);\n  let model = { thread: thread };\n  model.isThreadPage = true;\n  model.board = MiscModel.board(board).board;\n  model.threadNumber = thread.number;\n  if (archived) {\n    model.archived = true;\n  }\n  let data = Renderer.render('pages/thread', model);\n  if (targetPath) {\n    await FS.write(targetPath, data);\n  } else {\n    await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n  }\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nasync function renderPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  page.title = board.title;\n  page.board = MiscModel.board(board).board;\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }, {\n      path: '/rss',\n      description: Tools.translate('RSS feed (for all boards)')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`];\n    return paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten().concat('/rss');\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}.json`;\n    let threadData = await Cache.readFile(threadID);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = await ThreadsModel.getThreadPosts(data.boardName, data.threadNumber, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    let opPost = posts.splice(0, 1)[0];\n    posts = posts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    await Cache.writeFile(threadID, JSON.stringify(model));\n    await renderThreadHTML(thread);\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    return Promise.reject(new Error(Tools.translate('Invalid action')));\n  }\n  }\n}\n\nrouter.renderPages = async function(boardName) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber);\n  });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function() {\n  try {\n    let rssPostCount = config('server.rss.postCount');\n    let keys = await PostsModel.getPostKeys();\n    let postNumbers = keys.reduce((acc, key) => {\n      let [boardName, postNumber] = key.split(':');\n      postNumber = +postNumber;\n      if (!postNumber) {\n        return acc;\n      }\n      if (!acc.hasOwnProperty(boardName)) {\n        acc[boardName] = [];\n      }\n      acc[boardName].push(postNumber);\n      return acc;\n    }, {});\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let numbers = postNumbers[boardName];\n      if (!numbers || numbers.length <= 0) {\n        return;\n      }\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      numbers = numbers.sort((pn1, pn2) => { return pn2 - pn1; }).slice(0, rssPostCount).reverse();\n      let posts = await PostsModel.getPosts(boardName, numbers, { withFileInfos: true });\n      posts.forEach((post) => {\n        post.subject = BoardsModel.postSubject(post, 150) || post.number;\n      });\n      let rss = {\n        date: Tools.now(),\n        ttl: config('server.rss.ttl'),\n        board: MiscModel.board(board).board,\n        posts: posts,\n        formattedDate: (date) => {\n          return moment().utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n        }\n      };\n      return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/rss$/);\n  if (match) {\n    return await router.renderRSS();\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await router.renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}