{"version":3,"sources":["controllers/action-posts.js"],"names":[],"mappings":"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","file":"controllers/action-posts.js","sourcesContent":["import express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas';\nimport markup from '../core/markup';\nimport * as FilesModel from '../models/files';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\nimport PostCreationTransaction from '../storage/post-creation-transaction';\nimport * as IPC from '../helpers/ipc';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as Files from '../storage/files';\nimport geolocation from '../storage/geolocation';\n\nlet router = express.Router();\n\nasync function testParameters(boardName, mode, { fields, files, postNumber } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!fields) {\n    fields = {};\n  }\n  if (!_(files).isArray()) {\n    files = [];\n  }\n  let fileCount = 0;\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let post;\n  if (postNumber) {\n    fileCount = await PostsModel.getPostFileCount(boardName, postNumber);\n    if (typeof fields.text === 'undefined') {\n      post = await PostsModel.getPost(boardName, postNumber);\n      fields.text = post.rawText;\n    }\n  }\n  await board.testParameters(mode, fields, files, fileCount);\n  return post;\n}\n\nrouter.post('/action/markupText', async function(req, res, next) {\n  try {\n    let { fields: { boardName, text, markupMode, signAsOp, tripcode } } = await Tools.parseForm(req);\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true }); //TODO: Should it really be \"write\"?\n    let rawText = text || '';\n    await testParameters(boardName, 'markupText', { fields: fields });\n    markupMode = markupMode || '';\n    let markupModes = markup.markupModes(markupMode);\n    text = await markup(boardName, text, {\n      markupModes: markupModes,\n      accessLevel: req.level(boardName)\n    });\n    let data = {\n      boardName: boardName,\n      text: text || null,\n      rawText: rawText || null,\n      options: {\n        signAsOp: ('true' === signAsOp),\n        showTripcode: !!(req.hashpass && ('true' === tripcode))\n      },\n      createdAt: Tools.now().toISOString()\n    };\n    if (req.hashpass && tripcode) {\n      data.tripcode = Tools.generateTripcode(req.hashpass);\n    }\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/createPost', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Tools.parseForm(req);\n    let { boardName, threadNumber, captchaEngine } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await Captcha.checkCaptcha(req.ip, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(boardName, 'createPost', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction);\n    await IPC.render(post.boardName, post.threadNumber, post.number, 'create');\n    //hasNewPosts.add(c.post.boardName + \"/\" + c.post.threadNumber); //TODO: pass to main process immediately\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.send({\n        boardName: post.boardName,\n        postNumber: post.number\n      });\n    } else {\n      let hash = `post-${post.number}`;\n      let path = `/${config('site.pathPrefix')}${post.boardName}/res/${post.threadNumber}.html#${hash}`;\n      res.redirect(303, path);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/createThread', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Tools.parseForm(req);\n    let { boardName, captchaEngine } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await Captcha.checkCaptcha(req.ip, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(boardName, 'createThread', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    let thread = await ThreadsModel.createThread(req, fields, transaction);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction, {\n      postNumber: thread.number,\n      date: new Date(thread.createdAt)\n    });\n    await IPC.render(post.boardName, post.threadNumber, post.number, 'create');\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.send({\n        boardName: thread.boardName,\n        threadNumber: thread.number\n      });\n    } else {\n      res.redirect(303, `/${config('site.pathPrefix')}${thread.boardName}/res/${thread.number}.html`);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/editPost', async function(req, res, next) {\n  try {\n    let { fields } = await Tools.parseForm(req);\n    let { boardName, postNumber } = fields;\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editPost');\n    await testParameters(boardName, 'editPost', {\n      fields: fields,\n      postNumber: postNumber\n    });\n    let post = await PostsModel.editPost(req, fields);\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n    res.send({\n      boardName: post.boardName,\n      postNumber: post.number\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/addFiles', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Tools.parseForm(req);\n    let { boardName, postNumber } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'addFilesToPost');\n    let post = await PostsModel.getPost(boardName, postNumber);\n    if (!post) {\n      return Promise.reject(Tools.translate('No such post'));\n    }\n    files = await Files.getFiles(fields, files);\n    if (files.length <= 0) {\n      throw new Error(Tools.translate('No file specified'));\n    }\n    await testParameters(boardName, 'addFiles', {\n      fields: fields,\n      files: files,\n      postNumber: postNumber\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    await FilesModel.addFiles(boardName, postNumber, files, transaction);\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n    res.send({});\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/deletePost', async function(req, res, next) {\n  try {\n    let { fields } = await Tools.parseForm(req);\n    let { boardName, postNumber, password } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deletePost', Tools.sha1(password));\n    await PostsModel.deletePost(req, fields);\n    res.send({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteFile', async function(req, res, next) {\n  try {\n    let { fields } = await Tools.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deleteFile', Tools.sha1(password));\n    let post = await testParameters(boardName, 'deleteFile', { postNumber: postNumber });\n    await FilesModel.deleteFile(fileName);\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n    res.send({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editFileRating', async function(req, res, next) {\n  try {\n    let { fields } = await Tools.parseForm(req);\n    let { fileName, rating, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n    req.geolocation = await geolocation(req.ip);\n    await UsersModel.checkGeoBan(req.geolocation);\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editFileRating', Tools.sha1(password));\n    await FilesModel.editFileRating(fileName, rating);\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n    res.send({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editAudioTags', async function(req, res, next) {\n  let { fields } = await Tools.parseForm(req);\n  let { fileName, password } = fields;\n  if (!fileName || typeof fileName !== 'string') {\n    throw new Error(Tools.translate('Invalid file name'));\n  }\n  let fileInfo = await FilesModel.getFileInfoByName(fileName);\n  if (!fileInfo) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  if (!Tools.isAudioType(fileInfo.mimeType)) {\n    throw new Error(Tools.translate('Not an audio file'));\n  }\n  let { boardName, postNumber } = fileInfo;\n  await UsersModel.checkUserBan(req.ip, boardName, { write: true });\n  req.geolocation = await geolocation(req.ip);\n  await UsersModel.checkGeoBan(req.geolocation);\n  await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editAudioTags', Tools.sha1(password));\n  await FilesModel.editAudioTags(fileName, fields);\n  IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n  res.send({});\n});\n\nexport default router;\n"],"sourceRoot":"/source/"}