{"version":3,"sources":["core/files.js"],"names":[],"mappings":"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","file":"core/files.js","sourcesContent":["import _ from 'underscore';\nimport Canvas from 'canvas';\nimport ChildProcess from 'child_process';\nimport du from 'du';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\nimport HTTP from 'q-io/http';\nimport Jdenticon from 'jdenticon';\nimport merge from 'merge';\nimport mkpathSync from 'mkpath';\nimport Multiparty from 'multiparty';\nimport Path from 'path';\nimport promisify from 'promisify-node';\nimport UUID from 'uuid';\n\nimport Board from '../boards/board';\nimport * as FilesModel from '../models/files';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport vk from '../helpers/vk';\n\nconst mkpath = promisify('mkpath');\n\nconst FILE_RATINGS = new Set(['SFW', 'R-15', 'R-18', 'R-18G']);\n\nmkpathSync.sync(config('system.tmpPath') + '/form');\n\nlet fileTypePlugins = Tools.loadPlugins([`${__dirname}/../file-types`, `${__dirname}/../file-types/custom`]);\n\nfunction setFileRating(file, id, fields) {\n  let rating = fields[`file_${id}_rating`];\n  if (FILE_RATINGS.has(rating)) {\n    file.rating = rating;\n  } else {\n    file.rating = 'SFW';\n  }\n}\n\nasync function downloadFile(url, formFieldName, fields, transaction) {\n  let path = `${__dirname}/../tmp/upload_${UUID.v4()}`;\n  transaction.addFile(path);\n  let proxy = config.proxy();\n  let options = { timeout: config('system.httpRequestTimeout') };\n  if (/^vk\\:\\/\\//.test(url)) {\n    let result = await vk('audio.getById', { audios: url.split('/')[2] });\n    options.url = result.response[0].url;\n  } else if (proxy) {\n    options = merge.recursive(options, {\n      host: proxy.host,\n      port: proxy.port,\n      headers: { 'Proxy-Authorization': proxy.auth },\n      path: url,\n    });\n  } else {\n    optons.url = url;\n  }\n  let response = await HTTP.request(options);\n  if (200 !== response.status) {\n    return Promise.reject(new Error(Tools.translate('Failed to download file')));\n  }\n  let data = await response.body.read();\n  if (data.length < 1) {\n    return Promise.reject(new Error(Tools.translate('File is empty')));\n  }\n  await writeFile(path, data);\n  let file = {\n    name: url.split('/').pop(),\n    size: data.length,\n    path: path\n  };\n  setFileRating(file, formFieldName.substr(9), fields);\n  let mimeType = await getMimeType(path);\n  file.mimeType = mimeType;\n  return file;\n}\n\nexport async function getFiles(fields, files, transaction) {\n  files = await Tools.series(_(files).pick((file) => {\n    if (file.size < 1) {\n      FS.remove(file.path).catch((err) => { Logger.error(req, err.stack || err); });\n      return false;\n    }\n    return true;\n  }), async function(file, fileName) {\n    setFileRating(file, file.fieldName.substr(5), fields);\n    let mimeType = await getMimeType(file.path);\n    file.mimeType = mimeType;\n    return file;\n  }, true);\n  let downloadedFiles = await Tools.series(_(fields).pick((_1, key) => {\n    return /^file_url_\\S+$/.test(key);\n  }), async function(url, formFieldName) {\n    return await downloadFile(url, formFieldName, fields, transaction);\n  }, true);\n  files = files.concat(downloadedFiles);\n  let hashes = (typeof fields.fileHashes === 'string') ? fields.fileHashes.split(',').filter(hash => !!hash) : [];\n  let fileInfos = await FilesModel.getFileInfosByHashes(hashes);\n  let existingFiles = fileInfos.map((fileInfo, index) => {\n    let fi = {\n      name: fileInfo.name,\n      thumbName: fileInfo.thumb.name,\n      size: fileInfo.size,\n      boardName: fileInfo.boardName,\n      mimeType: fileInfo.mimeType,\n      rating: fileInfo.rating,\n      copy: true\n    };\n    setFileRating(fi, hashes[index], fields);\n    return fi;\n  });\n  return files.concat(existingFiles);\n}\n\nasync function waitForFile(filePath, options) { //TODO: That is not okay\n  let delay = 50;\n  let retry = 4;\n  async function f() {\n    let exists = await FS.exists(filePath);\n    if (!exists) {\n      if (!retry) {\n        return Promise.reject(new Error(Tools.translate('Failed to copy file')));\n      }\n      --retry;\n      await new Promise((resolve, reject) => {\n        setTimeout(resolve, delay);\n      });\n      await f();\n    }\n  }\n  await f();\n}\n\nasync function generateFileName(file, plugin) {\n  let baseName = await IPC.send('fileName');\n  let suffix = Path.extname(file.name);\n  if (typeof suffix === 'string') {\n    suffix = suffix.substr(1);\n  }\n  if (!suffix || !plugin.suffixMatchesMimeType(suffix, file.mimeType)) {\n    suffix = plugin.defaultSuffixForMimeType(file.mimeType);\n  }\n  let thumbSuffix = suffix;\n  if (typeof plugin.thumbnailSuffixForMimeType === 'function') {\n    thumbSuffix = plugin.thumbnailSuffixForMimeType(file.mimeType) || suffix;\n  }\n  return {\n    name: `${baseName}.${suffix}`,\n    thumbName: `${baseName}s.${thumbSuffix}`\n  };\n}\n\nasync function createFileThumb(file, plugin) {\n  let thumbPath = `${Path.dirname(file.path)}/${UUID.v4()}`;\n  file.thumbPath = thumbPath;\n  let result = await plugin.createThumbnail(file, thumbPath, file.path) || {};\n  file.dimensions = result.dimensions || null;\n  file.extraData = result.extraData || null;\n  file.thumbDimensions = result.thumbDimensions;\n  if (result.ihash) {\n    file.ihash = result.ihash;\n  }\n}\n\nexport function selectThumbnailingPlugin(mimeType) {\n  //TODO: Cache\n  return _(fileTypePlugins).find(plugin => plugin.match(mimeType));\n}\n\nexport async function renderPostFileInfos(post) {\n  if (!post) {\n    return;\n  }\n  await Tools.series(post.fileInfos || [], async function(fileInfo) {\n    if (!fileInfo) {\n      return;\n    }\n    fileInfo.sizeKB = fileInfo.size / 1024;\n    fileInfo.sizeText = fileInfo.sizeKB.toFixed(2) + ' ' + Tools.translate('KB');\n    let plugin = selectThumbnailingPlugin(fileInfo.mimeType);\n    if (!plugin) {\n      let err = new Error(Tools.translate('Unsupported file type'));\n      Logger.error(err.stack || err);\n      return;\n    }\n    if (typeof plugin.renderPostFileInfo !== 'function') {\n      return;\n    }\n    await plugin.renderPostFileInfo(fileInfo);\n  });\n}\n\nexport function parseForm(req = {}) {\n  let { formFields, formFiles } = req;\n  if (formFields) {\n    return {\n      fields: formFields,\n      files: formFiles || []\n    };\n  }\n  let form = new Multiparty.Form();\n  form.uploadDir = config('system.tmpPath') + '/form';\n  form.autoFields = true;\n  form.autoFiles = true;\n  form.maxFieldsSize = config('system.maxFormFieldsSize');\n  return new Promise((resolve, reject) => {\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve({\n        fields: _(fields).mapObject((value, key) => { return (1 === value.length) ? value[0] : value; }),\n        files: _(files).toArray().map((file) => {\n          file.name = file.originalFilename;\n          return file;\n        })\n      });\n    });\n  });\n}\n\nasync function processFile(boardName, file, transaction) {\n  let plugin = selectThumbnailingPlugin(file.mimeType);\n  if (!plugin) {\n    return Promise.reject(new Error(Tools.translate('Unsupported file type')));\n  }\n  let fn = await generateFileName(file, plugin);\n  let targetFilePath = `${__dirname}/../public/${boardName}/src/${fn.name}`;\n  var targetThumbPath = `${__dirname}/../public/${boardName}/thumb/${fn.thumbName}`;\n  transaction.addFile(targetFilePath);\n  transaction.addFile(targetThumbPath);\n  if (file.copy) {\n    let sourceFilePath = `${__dirname}/../public/${file.boardName}/src/${file.name}`;\n    let sourceThumbPath = `${__dirname}/../public/${file.boardName}/thumb/${file.thumbName}`;\n    await FS.copy(sourceFilePath, targetFilePath);\n    await FS.copy(sourceThumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    let fileInfo = await FilesModel.getFileInfoByName(file.name);\n    return {\n      dimensions: fileInfo.dimensions,\n      extraData: fileInfo.extraData,\n      hash: fileInfo.hash,\n      ihash: fileInfo.ihash || null,\n      mimeType: fileInfo.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: fileInfo.size,\n      thumb: {\n        dimensions: fileInfo.thumb.dimensions,\n        name: fn.thumbName\n      }\n    };\n  } else {\n    let sourceFilePath = file.path;\n    if (!file.hash) {\n      let data = await FS.read(file.path, 'b');\n      file.hash = Tools.sha1(data);\n    }\n    await createFileThumb(file, plugin);\n    await FS.move(sourceFilePath, targetFilePath);\n    transaction.addFile(file.thumbPath);\n    await FS.move(file.thumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    return {\n      dimensions: file.dimensions,\n      extraData: file.extraData,\n      hash: file.hash,\n      ihash: file.ihash || null,\n      mimeType: file.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: file.size,\n      thumb: {\n        dimensions: file.thumbDimensions,\n        name: fn.thumbName\n      }\n    };\n  }\n}\n\nexport async function processFiles(boardName, files, transaction) {\n  if (files.length < 1) {\n    return [];\n  }\n  let path = `${__dirname}/../public/${boardName}`;\n  await mkpath(`${path}/src`);\n  await mkpath(`${path}/thumb`);\n  return await Tools.series(files, async function(file) {\n    return await processFile(boardName, file, transaction);\n  }, true);\n}\n\nexport async function diskUsage(path) {\n  return await new Promise((resolve, reject) => {\n    du(path, (err, size) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(size);\n    });\n  });\n}\n\nexport async function writeFile(filePath, data) {\n  let tmpFilePath = `${filePath}.tmp`;\n  let path = filePath.split('/').slice(0, -1).join('/');\n  let exists = await FS.exists(path);\n  if (!exists) {\n    await FS.makeTree(path);\n  }\n  await FS.write(tmpFilePath, data);\n  await FS.rename(tmpFilePath, filePath);\n}\n\nexport async function createFile(dir, fileName, { file, isDir } = {}) {\n  if (dir.slice(-1)[0] !== '/') {\n    dir += '/';\n  }\n  let path = `${__dirname}/../${dir}${fileName}`;\n  if (isDir) {\n    await FS.makeDirectory(path);\n  }\n  if (file) {\n    await FS.move(file.path, path);\n  } else {\n    await writeFile(path, '');\n  }\n}\n\nexport async function editFile(fileName, content) {\n  await writeFile(`${__dirname}/../${fileName}`, content);\n}\n\nexport async function renameFile(oldFileName, fileName) {\n  let oldPath = `${__dirname}/../${oldFileName}`;\n  await FS.rename(oldPath, oldPath.split('/').slice(0, -1).join('/') + '/' + fileName);\n}\n\nexport async function deleteFile(fileName) {\n  await FS.removeTree(`${__dirname}/../${fileName}`);\n}\n\nexport async function generateRandomImage(hash, mimeType, thumbPath) {\n  let canvas = new Canvas(200, 200);\n  let ctx = canvas.getContext('2d');\n  Jdenticon.drawIcon(ctx, hash, 200);\n  let data = await FS.read(`${__dirname}/../thumbs/${mimeType}.png`, 'b');\n  let img = new Canvas.Image();\n  img.src = data;\n  ctx.drawImage(img, 0, 0, 200, 200);\n  return await new Promise((resolve, reject) => {\n    canvas.pngStream().pipe(FSSync.createWriteStream(thumbPath).on('error', reject).on('finish', resolve));\n  });\n}\n\nexport async function getMimeType(fileName) {\n  if (!fileName || typeof fileName !== 'string') {\n    return null;\n  }\n  try {\n    return await new Promise((resolve, reject) => {\n      ChildProcess.exec(`file --brief --mime-type ${fileName}`, {\n        timeout: config('system.mimeTypeRetrievingTimeout'),\n        encoding: 'utf8',\n        stdio: [0, 'pipe', null]\n      }, (err, out) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(out ? out.replace(/\\r*\\n+/g, '') : null);\n      });\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return null;\n  }\n}\n\nexport function isAudioType(mimeType) {\n  return 'application/ogg' === mimeType || /^audio\\//.test(mimeType);\n}\n\nexport function isVideoType(mimeType) {\n  return /^video\\//.test(mimeType);\n}\n\nexport function isPdfType(mimeType) {\n  return 'application/pdf' === mimeType;\n}\n\nexport function isImageType(mimeType) {\n  return /^image\\//.test(mimeType);\n}\n"],"sourceRoot":"/source/"}