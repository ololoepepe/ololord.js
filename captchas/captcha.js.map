{"version":3,"sources":["captchas/captcha.js"],"names":[],"mappings":"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","file":"captchas/captcha.js","sourcesContent":["import _ from 'underscore';\n\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as UsersModel from '../models/users';\n\nvar captchas = {};\n\nvar defineSetting = function(o, name, def) {\n    Object.defineProperty(o, name, {\n        get: (function(o, name, def) {\n            return config(\"captcha.\" + o.id + \".\" + name, def);\n        }).bind(o, o, name, def)\n    });\n};\n\nvar Captcha = function(id, title, options) {\n    Object.defineProperty(this, \"id\", { value: id });\n    Object.defineProperty(this, \"title\", {\n        get: function() {\n            return Tools.translate(title);\n        }\n    });\n    defineSetting(this, \"privateKey\");\n    defineSetting(this, \"publicKey\");\n};\n\n/*public*/ Captcha.prototype.info = function() {\n    var info = {\n        id: this.id,\n        title: this.title,\n        publicKey: this.publicKey\n    };\n    if (this.script)\n        info.script = this.script();\n    if (this.scriptSource)\n        info.scriptSource = this.scriptSource();\n    if (this.widgetHtml)\n        info.widgetHtml = this.widgetHtml();\n    if (this.widgetTemplate)\n        info.widgetTemplate = this.widgetTemplate();\n    return info;\n};\n\n/*public*/ Captcha.prototype.apiRoutes = function() {\n    return []; //[ { method, path, handler }, ... ]\n};\n\n/*public*/ Captcha.prototype.actionRoutes = function() {\n    return []; //[ { method, path, handler }, ... ]\n};\n\nCaptcha.captcha = function(id) {\n    return captchas[id];\n};\n\nCaptcha.addCaptcha = function(captcha) {\n    if (!Captcha.prototype.isPrototypeOf(captcha))\n        return;\n    captchas[captcha.id] = captcha;\n};\n\nCaptcha.captchaIds = function() {\n    var list = [];\n    Tools.toArray(captchas).sort(function(c1, c2) {\n        return (c1.id < c2.id) ? -1 : 1;\n    }).forEach(function(captcha) {\n        list.push(captcha.id);\n    });\n    return list;\n};\n\nCaptcha.checkCaptcha = async function(ip, fields = {}) {\n  let { boardName, captchaEngine } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!board.captchaEnabled) {\n    return;\n  }\n  let quota = await UsersModel.getUserCaptchaQuota(boardName, ip);\n  if (board.captchaQuota > 0 && +quota > 0) {\n    return await UsersModel.useCaptcha(boardName, ip);\n  }\n  let supportedCaptchaEngines = board.supportedCaptchaEngines;\n  if (supportedCaptchaEngines.length < 1) {\n    return Promise.reject(new Error(Tools.translate('Internal error: no captcha engine')));\n  }\n  let ceid = captchaEngine || null;\n  if (!ceid || !_(supportedCaptchaEngines).contains(ceid)) {\n    if (_(supportedCaptchaEngines).contains(Tools.NODE_CAPTCHA_ID)) {\n      ceid = Tools.NODE_CAPTCHA_ID;\n    } else {\n      ceid = supportedCaptchaEngines[0].id;\n    }\n  }\n  let captcha = Captcha.captcha(ceid);\n  if (!captcha) {\n    return Promise.reject(new Error(Tools.translate('Invalid captcha engine')));\n  }\n  await captcha.checkCaptcha(ip, fields);\n  return await UsersModel.setUserCaptchaQuota(boardName, ip, board.captchaQuota);\n};\n\n//NOTE: Must implement the following methods:\n//checkCaptcha(ip, fields) -> Promise.resolve() / Promise.reject(err)\n//widgetHtml() -> string\n//or\n//widgetTemplate() -> string\n//NOTE: May implement the following methods:\n//script() -> string\n//scriptSource() -> string\n\nmodule.exports = Captcha;\n"],"sourceRoot":"/source/"}