{"version":3,"sources":["captchas/node-captcha-noscript.js"],"names":[],"mappings":"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","file":"captchas/node-captcha-noscript.js","sourcesContent":["import _ from 'underscore';\nimport captcha from 'node-captcha';\nimport FS from 'q-io/fs';\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst CAPTCHA_PATH = `${__dirname}/../tmp/node-captcha-noscript`;\n\nasync function getNodeCaptchaImage(req, res, next) {\n  let challenge = this.challenges[req.ip];\n  if (challenge) {\n    res.sendFile(challenge.fileName, { root: CAPTCHA_PATH });\n    return;\n  }\n  let self = this;\n  captcha({\n    fileMode: 2,\n    size: this.size,\n    height: this.height,\n    width: this.width,\n    color: this.color,\n    background: this.background,\n    lineWidth: this.lineWidth,\n    noise: this.noise,\n    noiseColor: this.noiseColor,\n    complexity: this.complexity,\n    spacing: this.spacing\n  }, async function(response, data) {\n    try {\n      let fileName = `${_.now()}.png`;\n      await FS.write(`${CAPTCHA_PATH}/${fileName}`, data);\n      self.challenges.set(req.ip, {\n        ip: req.ip,\n        fileName: fileName,\n        response: response,\n        timer: setTimeout(() => {\n          FS.remove(`${CAPTCHA_PATH}/${fileName}`).catch((err) => {\n            Logger.error(err);\n          });\n          self.challenges.delete(challenge);\n        }, self.ttl)\n      });\n      res.end(data);\n    } catch (err) {\n      next(err);\n    }\n  });\n}\n\nexport default class NodeCaptchaNoscript extends Captcha {\n  static async removeOldCaptchImages() {\n    try {\n      let fileNames = await FS.list(CAPTCHA_PATH);\n      await Tools.series(fileNames.filter((fileName) => {\n        let [name, suffix] = fileName.split('.');\n        return 'png' === suffix && /^[0-9]+$/.test(name);\n      }), async function(fileName) {\n        return await FS.remove(`${CAPTCHA_PATH}/${fileName}`);\n      });\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }\n\n  constructor() {\n    super('node-captcha-noscript', Tools.translate.noop('Node captcha (no script)'));\n    this.challenges = new Map();\n    this.defineSetting('size', 6);\n    this.defineSetting('height', 60);\n    this.defineSetting('color', 'rgb(0,0,0)');\n    this.defineSetting('background', 'rgb(255,255,255)');\n    this.defineSetting('lineWidth', 4);\n    this.defineSetting('noise', true);\n    this.defineSetting('complexity', 1);\n    this.defineSetting('spacing', 4);\n    this.defineProperty('width', () => {\n      return config('captcha.node-captcha.width', Math.round((this.size * this.height) / 1.8));\n    });\n    this.defineProperty('noiseColor', () => {\n      return config('captcha.node-captcha.noiseColor', this.color);\n    });\n  }\n\n  async checkCaptcha(ip, { nodeCaptchaResponse }) {\n    let challenge = this.challenges.get(ip);\n    let response = nodeCaptchaResponse;\n    if (!challenge) {\n      throw new Error(Tools.translate('No captcha for this IP'));\n    }\n    if (!response) {\n      throw new Error(Tools.translate('Captcha is empty'));\n    }\n    clearTimeout(challenge.timer);\n    FS.remove(`${CAPTCHA_PATH}/${challenge.fileName}`).catch((err) => {\n      Logger.error(err);\n    });\n    this.challenges.delete(ip);\n    if (response !== challenge.response) {\n      throw new Error(Tools.translate('Captcha is solved incorrectly'));\n    }\n  }\n\n  apiRoutes() {\n    return [{\n      method: 'get',\n      path: '/nodeCaptchaImage.png',\n      handler: getNodeCaptchaImage.bind(this)\n    }];\n  }\n}\n"],"sourceRoot":"/source/"}