{"version":3,"sources":["captchas/node-captcha-noscript.js"],"names":[],"mappings":"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","file":"captchas/node-captcha-noscript.js","sourcesContent":["var captcha = require(\"node-captcha\");\nvar FS = require(\"q-io/fs\");\nvar UUID = require(\"uuid\");\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nvar nodeCaptcha = new Captcha(\"node-captcha-noscript\", Tools.translate.noop(\"Node captcha (no script)\"));\n\nnodeCaptcha.challenges = {};\n\nnodeCaptcha.checkCaptcha = function(ip, fields) {\n  var challenge = nodeCaptcha.challenges[ip];\n  if (!challenge) {\n    return Promise.reject(Tools.translate(\"No captcha for this IP\"));\n  }\n  var response = fields.nodeCaptchaResponse;\n  if (!response) {\n    return Promise.reject(Tools.translate(\"Captcha is empty\"));\n  }\n  clearTimeout(challenge.timer);\n  FS.remove(__dirname + \"/../tmp/node-captcha-noscript/\" + challenge.fileName).catch(function(err) {\n    Logger.error(err);\n  });\n  delete nodeCaptcha.challenges[ip];\n  if (response !== challenge.response) {\n    return Promise.reject(Tools.translate(\"Captcha is solved incorrectly\"));\n  }\n  return Promise.resolve();\n};\n\nnodeCaptcha.apiRoutes = function() {\n  return [{\n    method: \"get\",\n    path: \"/nodeCaptchaImage.png\",\n    handler: function(req, res) {\n      let challenge = nodeCaptcha.challenges[req.ip];\n      if (challenge) {\n        res.sendFile(challenge.fileName, { root: __dirname + \"/../tmp/node-captcha-noscript\" });\n      } else {\n        var size = config(\"captcha.node-captcha.size\", 6);\n        var height = config(\"captcha.node-captcha.height\", 60);\n        var color = config(\"captcha.node-captcha.color\", \"rgb(0,0,0)\");\n        captcha({\n          fileMode: 2,\n          size: size,\n          height: height,\n          width: config(\"captcha.node-captcha.width\", Math.round((height * size) / 1.8)),\n          color: color,\n          background: config(\"captcha.node-captcha.background\", \"rgb(255,255,255)\"),\n          lineWidth: config(\"captcha.node-captcha.lineWidth\", 4),\n          noise: config(\"captcha.node-captcha.noise\", true),\n          noiseColor: config(\"captcha.node-captcha.noiseColor\", color),\n          complexity: config(\"captcha.node-captcha.complexity\", 1),\n          spacing: config(\"captcha.node-captcha.spacing\", 4)\n        }, function(response, data) {\n          let fileName = `${+Tools.now()}.png`;\n          FS.write(__dirname + \"/../tmp/node-captcha-noscript/\" + fileName, data).then(function() {\n            nodeCaptcha.challenges[req.ip] = {\n              challenge: challenge,\n              fileName: fileName,\n              response: response,\n              timer: setTimeout(function() {\n                FS.remove(__dirname + \"/../tmp/node-captcha-noscript/\" + fileName).catch(function(err) {\n                  Logger.error(err);\n                });\n                delete nodeCaptcha.challenges[challenge];\n              }, config(\"captcha.node-captcha.ttl\", 5 * Tools.Minute))\n            };\n            res.end(data);\n          });\n        });\n      }\n    }\n  }];\n};\n\nnodeCaptcha.removeOldCaptchImages = async function() {\n  try {\n    const PATH = `${__dirname}/../tmp/node-captcha-noscript`;\n    let fileNames = await FS.list(PATH);\n    await Tools.series(fileNames.filter((fileName) => {\n      let [name, suffix] = fileName.split('.');\n      return 'png' === suffix && /^[0-9]+$/.test(name);\n    }), async function(fileName) {\n      return await FS.remove(`${PATH}/${fileName}`);\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nmodule.exports = nodeCaptcha;\n"],"sourceRoot":"/source/"}