{"version":3,"sources":["captchas/node-captcha.js"],"names":[],"mappings":"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","file":"captchas/node-captcha.js","sourcesContent":["var captcha = require(\"node-captcha\");\nvar FS = require(\"q-io/fs\");\nvar UUID = require(\"uuid\");\n\nimport Captcha from './captcha';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nvar nodeCaptcha = new Captcha(Tools.NODE_CAPTCHA_ID, Tools.translate.noop(\"Node captcha\"));\n\nnodeCaptcha.challenges = {};\n\nnodeCaptcha.info = function() {\n    var inf = Captcha.prototype.info.call(this);\n    inf.size = config(\"captcha.node-captcha.size\", 6);\n    inf.height = config(\"captcha.node-captcha.height\", 60);\n    inf.width = config(\"captcha.node-captcha.width\", Math.round((inf.size * inf.height) / 1.8));\n    inf.ttl = config(\"captcha.node-captcha.ttl\", 5 * Tools.Minute);\n    return inf;\n};\n\nnodeCaptcha.checkCaptcha = function(_1, fields) {\n    var challenge = fields.nodeCaptchaChallenge;\n    var response = fields.nodeCaptchaResponse;\n    if (!challenge)\n        return Promise.reject(Tools.translate(\"Captcha challenge is empty\"));\n    if (!response)\n        return Promise.reject(Tools.translate(\"Captcha is empty\"));\n    var c = nodeCaptcha.challenges[challenge];\n    if (!c)\n        return Promise.reject(Tools.translate(\"Invalid captcha\"));\n    clearTimeout(c.timer);\n    FS.remove(__dirname + \"/../public/node-captcha/\" + c.fileName).catch(function(err) {\n        Logger.error(err);\n    });\n    delete nodeCaptcha.challenges[challenge];\n    if (response !== c.response)\n        return Promise.reject(Tools.translate(\"Captcha is solved incorrectly\"));\n    return Promise.resolve();\n};\n\nnodeCaptcha.apiRoutes = function() {\n    return [{\n        method: \"get\",\n        path: \"/nodeCaptchaImage.json\",\n        handler: function(_1, res) {\n            var size = config(\"captcha.node-captcha.size\", 6);\n            var height = config(\"captcha.node-captcha.height\", 60);\n            var color = config(\"captcha.node-captcha.color\", \"rgb(0,0,0)\");\n            captcha({\n                fileMode: 1,\n                saveDir: __dirname + \"/../public/node-captcha\",\n                size: size,\n                height: height,\n                width: config(\"captcha.node-captcha.width\", Math.round((height * size) / 1.8)),\n                color: color,\n                background: config(\"captcha.node-captcha.background\", \"rgb(255,255,255)\"),\n                lineWidth: config(\"captcha.node-captcha.lineWidth\", 4),\n                noise: config(\"captcha.node-captcha.noise\", true),\n                noiseColor: config(\"captcha.node-captcha.noiseColor\", color),\n                complexity: config(\"captcha.node-captcha.complexity\", 1),\n                spacing: config(\"captcha.node-captcha.spacing\", 4)\n            }, function(response, fileName) {\n                var challenge = UUID.v4();\n                nodeCaptcha.challenges[challenge] = {\n                    challenge: challenge,\n                    fileName: fileName,\n                    response: response,\n                    timer: setTimeout(function() {\n                        FS.remove(__dirname + \"/../public/node-captcha/\" + fileName).catch(function(err) {\n                            Logger.error(err);\n                        });\n                        delete nodeCaptcha.challenges[challenge];\n                    }, config(\"captcha.node-captcha.ttl\", 5 * Tools.Minute))\n                };\n                res.send({\n                    challenge: challenge,\n                    fileName: fileName,\n                    ttl: config(\"captcha.node-captcha.ttl\", 5 * Tools.Minute)\n                });\n            });\n        }\n    }];\n};\n\nnodeCaptcha.removeOldCaptchImages = async function() {\n  try {\n    const PATH = `${__dirname}/../public/node-captcha`;\n    let fileNames = await FS.list(PATH);\n    await Tools.series(fileNames.filter((fileName) => {\n      let [name, suffix] = fileName.split('.');\n      return 'png' === suffix && /^[0-9]+$/.test(name);\n    }), async function(fileName) {\n      return await FS.remove(`${PATH}/${fileName}`);\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nmodule.exports = nodeCaptcha;\n"],"sourceRoot":"/source/"}